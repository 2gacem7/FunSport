var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.04,1,2.3]],["body/controllers/AppController.html",[0,1.682,1,3.721,2,1.345,3,0.253,4,0.216,5,0.216,6,3.75,7,0.497,8,1.682,9,5.532,10,4.424,11,1.345,12,0.025,13,4.424,14,0.638,15,4.424,16,1.345,17,0.742,18,1.263,19,2.879,20,1.345,21,0.396,22,2.302,23,2.302,24,3.75,25,0.689,26,1.99,27,2.491,28,2.491,29,3.399,30,3.75,31,0.253,32,0.163,33,2.137,34,2.491,35,2.491,36,4.424,37,4.424,38,1.345,39,4.424,40,0.015,41,0.019,42,0.015]],["title/modules/AppModule.html",[43,1.04,44,2.3]],["body/modules/AppModule.html",[1,3.135,2,1.417,3,0.194,4,0.166,5,0.166,12,0.025,21,0.442,25,0.53,29,3.479,30,2.887,31,0.194,32,0.125,40,0.012,41,0.016,42,0.012,43,1.616,44,4.663,45,1.431,46,1.431,47,1.645,48,1.645,49,1.431,50,2.567,51,1.645,52,2.887,53,2.887,54,2.887,55,3.667,56,3.787,57,3.667,58,3.787,59,3.787,60,3.479,61,2.252,62,1.645,63,1.645,64,3.405,65,2.856,66,2.856,67,3.135,68,3.405,69,1.917,70,0.856,71,2.887,72,3.405,73,3.405,74,3.405,75,3.405,76,3.405,77,3.405,78,3.405,79,3.405,80,3.405,81,3.405]],["title/injectables/AppService.html",[29,1.925,82,0.706]],["body/injectables/AppService.html",[3,0.296,4,0.253,5,0.253,12,0.024,21,0.34,25,0.807,29,3.429,31,0.296,32,0.191,40,0.018,41,0.021,42,0.018,82,1.258,83,2.036,84,4.393]],["title/controllers/AuthController.html",[0,1.04,85,2.3]],["body/controllers/AuthController.html",[0,1.332,2,1.332,3,0.25,4,0.214,5,0.214,7,0.492,8,1.672,11,1.332,12,0.025,14,0.632,16,1.332,17,0.734,18,1.25,19,2.862,20,1.332,21,0.394,22,2.28,23,2.28,25,0.682,31,0.25,32,0.161,33,2.116,38,1.332,40,0.015,41,0.019,42,0.015,85,3.699,86,3.714,87,2.467,88,4.381,89,1.947,90,4.662,91,4.381,92,4.381,93,4.381,94,4.381,95,3.714,96,2.467,97,3.128,98,3.275,99,4.381,100,4.381,101,4.381,102,4.381,103,4.381]],["title/modules/AuthModule.html",[43,1.04,55,2.095]],["body/modules/AuthModule.html",[2,1.489,3,0.209,4,0.179,5,0.179,12,0.025,21,0.435,25,0.57,31,0.209,32,0.135,40,0.013,41,0.017,42,0.013,43,1.677,45,1.538,46,1.538,47,1.769,48,1.769,49,1.538,50,2.664,51,1.769,55,4.171,60,3.555,61,2.365,62,1.769,63,1.769,67,3.293,71,3.104,85,3.709,96,2.062,97,3.285,98,2.737,104,3.104,105,3.662,106,3.104,107,3.869,108,3.869,109,3.662,110,4.896,111,3.662,112,3.662,113,3.662,114,3.662,115,2.737,116,2.463,117,3.104,118,3.662,119,3.104,120,3.104,121,3.662,122,3.662,123,3.662,124,3.662]],["title/injectables/AuthService.html",[82,0.706,97,1.779]],["body/injectables/AuthService.html",[3,0.189,4,0.161,5,0.161,7,0.371,8,1.389,12,0.025,14,0.755,16,1.591,17,0.877,18,1.493,20,1.389,21,0.37,25,0.515,31,0.189,32,0.122,38,1.591,40,0.018,41,0.016,42,0.012,82,0.943,83,1.299,89,1.984,90,3.872,97,2.377,115,2.471,125,2.803,126,4.567,127,1.795,128,3.306,129,3.187,130,6.277,131,3.306,132,0.877,133,4.567,134,3.306,135,1.315,136,4.567,137,1.265,138,5.232,139,3.306,140,2.377,141,2.571,142,3.306,143,3.414,144,2.377,145,1.396,146,1.681,147,3.306,148,4.567,149,3.306,150,3.306,151,3.306,152,2.224,153,1.861,154,3.306,155,2.803,156,3.306,157,0.886,158,3.306,159,1.861,160,3.306,161,1.861,162,3.306,163,1.861,164,3.306,165,1.861,166,3.306,167,5.232,168,3.306]],["title/classes/CreateMyFavoriteDto.html",[32,0.126,169,2.3]],["body/classes/CreateMyFavoriteDto.html",[3,0.231,4,0.197,5,0.197,7,0.454,12,0.025,14,0.835,21,0.265,31,0.231,32,0.192,40,0.014,41,0.018,42,0.014,132,0.97,137,1.34,157,1.639,169,3.514,170,1.488,171,3.184,172,3.427,173,0.892,174,3.514,175,1.491,176,2.524,177,1.491,178,2.524,179,2.053,180,3.297,181,3.893,182,2.432,183,4.043,184,4.043,185,3.184,186,1.538,187,4.043,188,2.477,189,2.477,190,2.477,191,2.719,192,2.276]],["title/classes/CreateMySportDto.html",[32,0.126,193,2.095]],["body/classes/CreateMySportDto.html",[3,0.231,4,0.197,5,0.197,7,0.454,12,0.025,14,0.835,21,0.265,31,0.231,32,0.192,40,0.014,41,0.018,42,0.014,132,0.97,137,1.34,157,1.639,170,1.488,171,3.184,173,0.892,174,3.514,175,1.491,176,2.524,177,1.491,179,2.053,180,3.297,181,3.893,182,2.432,185,3.184,186,1.538,188,2.477,189,2.477,190,2.477,191,2.719,192,2.276,193,3.202,194,3.427,195,2.524,196,4.043,197,4.043,198,4.043]],["title/classes/CreatePronosticDto.html",[32,0.126,199,2.095]],["body/classes/CreatePronosticDto.html",[3,0.204,4,0.175,5,0.175,7,0.401,11,1.087,12,0.025,14,0.878,17,0.977,21,0.235,31,0.204,32,0.177,40,0.012,41,0.017,42,0.012,132,1.092,135,1.211,137,1.378,157,1.562,170,1.316,171,3.263,173,0.789,174,3.24,175,1.375,176,2.327,177,1.375,179,1.893,182,2.289,185,3.034,186,1.211,188,2.191,189,2.191,190,2.191,191,3.665,192,2.013,199,2.952,200,3.031,201,3.263,202,4.094,203,3.665,204,3.665,205,3.575,206,3.575,207,4.084,208,3.575,209,1.663,210,3.575,211,3.575,212,4.084]],["title/classes/CreateSportDto.html",[32,0.126,213,2.556]],["body/classes/CreateSportDto.html",[3,0.264,4,0.226,5,0.226,7,0.519,12,0.024,14,0.666,17,1.14,31,0.264,32,0.17,40,0.016,41,0.02,42,0.016,132,0.774,137,1.174,170,1.701,171,2.957,173,1.02,174,3.107,175,1.622,176,2.231,177,1.318,179,2.233,209,2.125,213,4.248,214,3.916,215,3.107,216,5.218,217,2.601,218,3.916,219,4.619,220,5.683]],["title/classes/CreateUserDto.html",[32,0.126,221,2.095]],["body/classes/CreateUserDto.html",[3,0.213,4,0.182,5,0.182,7,0.419,11,1.93,12,0.024,14,0.916,21,0.245,31,0.213,32,0.182,40,0.013,41,0.017,42,0.013,132,1.064,137,1.389,140,2.897,145,0.879,153,3.135,159,3.135,161,3.135,163,3.135,165,3.135,170,1.374,171,3.371,177,1.065,179,1.949,188,3.412,189,2.287,190,2.287,191,3.745,192,2.101,221,3.038,222,2.51,223,3.164,224,5.029,225,3.164,226,4.203,227,3.732,228,3.164,229,4.203,230,3.732,231,4.203,232,3.164,233,2.51,234,2.79,235,2.79,236,2.79,237,3.706,238,2.79,239,2.79]],["title/injectables/JwtAuthGuard.html",[26,1.539,82,0.706]],["body/injectables/JwtAuthGuard.html",[3,0.288,4,0.246,5,0.246,12,0.024,21,0.393,25,0.786,26,2.698,31,0.288,32,0.186,40,0.018,41,0.021,42,0.018,82,1.238,83,1.984,95,4.279,96,2.842,240,4.279,241,4.279,242,2.438,243,5.047]],["title/injectables/JwtStrategy.html",[82,0.706,107,2.095]],["body/injectables/JwtStrategy.html",[3,0.232,4,0.199,5,0.199,7,0.457,8,1.595,12,0.025,14,0.757,16,1.237,17,0.682,18,1.161,20,1.237,21,0.402,25,0.633,31,0.232,32,0.15,38,1.237,40,0.014,41,0.018,42,0.014,82,1.083,83,1.598,89,1.88,96,2.29,107,3.214,116,2.735,117,3.448,120,3.448,127,2.281,132,0.682,140,2.116,155,3.448,157,1.089,159,2.29,161,2.29,163,2.29,165,2.29,242,1.965,244,3.448,245,4.446,246,4.067,247,5.245,248,4.067,249,4.067,250,3.448,251,3.04,252,3.448,253,3.448,254,3.448,255,3.448,256,4.067,257,4.067,258,4.067,259,3.448,260,4.067,261,4.067,262,4.067,263,4.067,264,4.067,265,4.067,266,4.067]],["title/injectables/LocalStrategy.html",[82,0.706,108,2.095]],["body/injectables/LocalStrategy.html",[3,0.222,4,0.19,5,0.19,7,0.437,8,1.55,12,0.025,14,0.735,16,1.55,17,0.854,18,1.455,20,1.184,21,0.396,25,0.606,31,0.222,32,0.143,33,1.88,38,1.184,40,0.014,41,0.018,42,0.014,82,1.053,83,1.53,89,1.841,96,2.191,97,3.342,98,2.91,108,3.124,127,1.53,132,0.854,135,1.429,137,1.327,140,2.653,141,2.87,145,0.917,146,1.433,153,3.395,177,1.111,242,1.88,245,4.321,250,3.3,251,2.91,253,3.3,254,3.3,255,3.3,267,3.3,268,3.892,269,3.892,270,5.097,271,3.892,272,3.3,273,5.097,274,3.892,275,3.892,276,1.88]],["title/classes/MyFavorite.html",[32,0.126,178,1.652]],["body/classes/MyFavorite.html",[3,0.212,4,0.181,5,0.181,7,0.417,11,1.688,12,0.025,14,0.801,21,0.324,31,0.282,32,0.182,40,0.013,41,0.017,42,0.013,70,0.933,132,0.931,135,1.242,137,1.309,145,0.875,157,1.586,170,1.367,173,0.819,178,2.386,179,1.941,180,3.207,181,4.146,182,2.333,185,2.571,186,1.242,209,1.705,215,3.323,242,2.386,277,2.775,278,3.693,279,4.94,280,3.693,281,3.403,282,3.964,283,3.712,284,3.712,285,4.94,286,2.386,287,3.712,288,2.075,289,2.781,290,1.367,291,2.275,292,3.147]],["title/controllers/MyFavoritesController.html",[0,1.04,66,2.095]],["body/controllers/MyFavoritesController.html",[0,1.913,2,0.822,3,0.154,4,0.132,5,0.132,7,0.303,8,1.203,11,1.423,12,0.025,14,0.675,16,1.423,17,0.785,18,1.336,19,3.222,20,1.423,21,0.307,22,1.406,23,2.059,25,0.421,26,1.216,27,1.521,28,1.521,31,0.154,32,0.099,33,1.305,34,1.521,35,2.635,38,1.8,40,0.009,41,0.014,42,0.009,66,2.424,87,1.521,89,2.006,127,1.062,135,0.994,145,0.637,146,1.723,173,0.596,175,1.129,180,1.406,181,2.661,186,0.994,293,2.291,294,5.152,295,3.719,296,3.354,297,3.354,298,3.956,299,2.702,300,1.817,301,2.702,302,2.227,303,3.851,304,3.853,305,3.853,306,3.511,307,2.702,308,2.02,309,2.702,310,2.318,311,2.702,312,1.817,313,2.702,314,3.354,315,3.354,316,1.817,317,2.02,318,3.087,319,2.291,320,2.702,321,2.318,322,2.702,323,4.282,324,2.702,325,2.702,326,4.68,327,3.956,328,2.702,329,2.661,330,2.661,331,2.702,332,2.702]],["title/modules/MyFavoritesModule.html",[43,1.04,56,2.095]],["body/modules/MyFavoritesModule.html",[2,1.586,3,0.23,4,0.197,5,0.197,12,0.025,17,0.676,21,0.415,25,0.628,31,0.23,32,0.148,40,0.014,41,0.018,42,0.014,43,1.925,45,1.693,46,1.693,47,1.947,48,1.947,49,1.693,50,2.792,51,2.792,56,4.044,61,2.519,62,1.947,63,1.947,66,3.542,69,2.269,70,1.013,173,0.89,178,1.947,186,1.311,288,1.693,291,3.195,318,3.887,319,3.417,333,3.417,334,3.417,335,3.417,336,4.031,337,4.031,338,2.711,339,3.013,340,3.417]],["title/injectables/MyFavoritesService.html",[82,0.706,318,1.925]],["body/injectables/MyFavoritesService.html",[3,0.159,4,0.136,5,0.136,7,0.313,8,1.232,12,0.025,14,0.755,16,1.591,17,0.877,18,1.493,20,1.45,21,0.365,25,0.435,31,0.159,32,0.103,38,1.762,40,0.01,41,0.014,42,0.01,70,0.701,82,0.837,83,1.097,89,2.022,127,2.056,132,0.679,135,1.315,137,1.235,144,1.452,145,0.954,146,1.755,157,1.085,169,1.877,173,0.616,175,1.748,178,1.348,180,2.722,182,2.198,186,1.593,286,1.957,290,1.491,296,3.434,297,3.434,302,2.281,303,3.91,310,1.822,314,4.435,315,4.435,318,2.945,321,2.607,338,1.877,341,2.366,342,4.119,343,3.434,344,3.028,345,2.724,346,4.05,347,2.791,348,2.791,349,4.042,350,2.791,351,4.768,352,2.791,353,4.05,354,2.791,355,2.791,356,2.791,357,1.571,358,1.452,359,2.791,360,2.366,361,2.791,362,2.791,363,2.791,364,4.05,365,2.791,366,2.791,367,2.791,368,2.791,369,1.256,370,1.71]],["title/classes/MySport.html",[32,0.126,195,1.652]],["body/classes/MySport.html",[3,0.209,4,0.178,5,0.178,7,0.41,11,1.675,12,0.025,14,0.794,21,0.321,31,0.279,32,0.18,40,0.013,41,0.017,42,0.013,70,0.918,132,0.923,135,1.228,137,1.303,145,0.861,157,1.575,170,1.345,173,0.806,175,1.395,179,1.921,180,3.353,182,2.314,185,3.06,186,1.478,195,2.361,209,1.687,215,3.287,217,2.751,242,2.361,278,3.653,280,3.653,281,3.375,282,3.948,288,2.053,289,2.751,290,1.345,371,2.73,372,4.887,373,4.887,374,3.704,375,3.652,376,3.652,377,3.652,378,2.238,379,3.096]],["title/controllers/MySportsController.html",[0,1.04,65,2.095]],["body/controllers/MySportsController.html",[0,1.886,2,0.828,3,0.156,4,0.133,5,0.133,7,0.306,8,1.21,11,1.43,12,0.025,14,0.678,16,1.43,17,0.788,18,1.342,19,3.228,20,1.43,21,0.339,22,1.417,23,2.071,25,0.62,26,1.226,27,1.534,28,1.534,31,0.156,32,0.1,33,1.316,34,1.534,35,2.647,38,1.747,40,0.009,41,0.014,42,0.009,65,2.439,87,1.534,89,2.01,135,1,145,0.642,146,1.731,157,0.73,173,0.601,175,1.136,177,0.777,186,1.444,209,1.785,276,1.316,286,1.922,295,3.521,300,1.832,302,2.241,304,3.478,305,3.478,306,3.169,308,2.036,310,2.327,312,1.832,316,1.832,317,2.036,321,2.116,323,4.294,329,1.832,330,2.677,369,1.226,374,1.832,380,2.309,381,6.204,382,3.374,383,3.374,384,3.374,385,2.724,386,2.724,387,2.724,388,2.724,389,2.724,390,2.724,391,1.832,392,2.647,393,2.309,394,2.071,395,1.417,396,1.534,397,2.724,398,2.724,399,2.724,400,2.724,401,3.979,402,2.724,403,2.724,404,2.309,405,2.724,406,1.417]],["title/modules/MySportsModule.html",[43,1.04,57,2.095]],["body/modules/MySportsModule.html",[2,1.556,3,0.224,4,0.191,5,0.191,12,0.025,17,0.656,21,0.412,25,0.61,31,0.224,32,0.144,40,0.014,41,0.018,42,0.014,43,1.907,45,1.645,46,1.645,47,1.891,48,1.891,49,1.645,50,2.753,51,2.753,57,4.016,61,2.472,62,1.891,63,1.891,65,3.493,69,2.204,70,0.984,173,0.864,175,1.46,186,1.286,195,1.891,288,1.645,339,2.926,378,3.135,392,3.871,393,3.319,407,3.319,408,3.319,409,3.319,410,3.915,411,3.825,412,5.116,413,5.116,414,5.116,415,3.915,416,2.633,417,3.319]],["title/injectables/MySportsService.html",[82,0.706,392,1.925]],["body/injectables/MySportsService.html",[3,0.159,4,0.136,5,0.136,7,0.313,8,1.232,12,0.025,14,0.755,16,1.591,17,0.877,18,1.493,20,1.45,21,0.365,25,0.435,31,0.159,32,0.103,38,1.762,40,0.01,41,0.014,42,0.01,70,0.701,82,0.837,83,1.097,89,2.022,127,2.056,132,0.468,135,1.018,137,1.08,144,1.452,145,0.954,146,1.755,157,1.085,173,0.894,175,1.748,180,1.452,182,2.198,186,1.632,193,1.71,195,1.348,209,1.806,217,2.281,286,1.957,290,1.491,302,2.281,303,3.91,310,1.822,321,2.499,342,4.119,344,3.028,357,1.571,358,1.452,369,1.256,370,1.71,374,3.897,382,3.434,383,3.434,384,3.434,392,2.945,411,3.028,416,1.877,418,2.366,419,2.791,420,2.791,421,4.042,422,4.05,423,2.791,424,5.231,425,4.05,426,2.791,427,4.05,428,4.05,429,2.791,430,2.366,431,2.366,432,4.05,433,2.791,434,4.05,435,2.791,436,2.791,437,2.791,438,2.791,439,2.366]],["title/classes/Pronostic.html",[32,0.126,201,1.779]],["body/classes/Pronostic.html",[3,0.187,4,0.16,5,0.16,7,0.367,11,1.793,12,0.025,14,0.851,17,0.941,18,1.293,21,0.297,31,0.259,32,0.167,40,0.011,41,0.016,42,0.011,70,0.821,132,1.069,135,1.138,137,1.354,145,0.77,157,1.504,170,1.203,173,0.721,175,1.293,179,1.78,182,2.184,185,3.175,186,1.138,201,2.921,202,4.208,203,3.497,204,3.497,207,3.84,209,1.564,212,3.84,215,3.046,242,2.188,278,3.385,281,3.186,282,4.059,288,1.903,289,2.55,290,1.203,440,2.442,441,4.529,442,4.529,443,3.266,444,4.529,445,3.266,446,3.385,447,3.266,448,3.266,449,3.266,450,2.197,451,2.769]],["title/controllers/PronosticsController.html",[0,1.04,452,2.3]],["body/controllers/PronosticsController.html",[0,1.841,2,0.618,3,0.116,4,0.099,5,0.099,7,0.228,8,0.969,11,1.354,12,0.025,14,0.642,16,1.196,17,0.659,18,1.271,19,1.659,20,1.354,21,0.365,22,1.659,23,1.659,25,0.496,26,0.914,27,1.144,28,1.144,31,0.116,32,0.075,33,0.982,34,1.144,35,2.507,38,1.737,40,0.007,41,0.011,42,0.007,70,0.511,87,1.144,89,1.961,127,0.799,132,0.746,135,0.801,137,1.147,141,2.889,144,1.058,145,0.751,146,1.448,152,1.367,157,1.437,173,0.449,175,0.91,176,2.151,177,1.271,182,2.156,186,0.988,199,3.581,201,2.891,202,1.367,203,3.842,204,1.367,276,1.54,286,1.54,290,0.748,295,3.581,300,1.367,304,3.736,305,3.736,306,3.404,310,2.176,312,1.367,316,1.367,321,2.414,329,2.144,330,2.144,357,1.144,358,1.058,369,1.434,391,2.645,394,2.046,395,1.058,396,1.144,406,1.659,446,3.328,452,2.144,453,1.723,454,4.954,455,2.995,456,2.382,457,2.032,458,2.032,459,3.187,460,3.187,461,3.187,462,2.144,463,2.032,464,1.723,465,2.032,466,2.032,467,3.775,468,2.144,469,2.032,470,2.032,471,2.032,472,3.187,473,2.507,474,1.723,475,1.723,476,1.519,477,2.032,478,2.702,479,2.032,480,2.032,481,1.723,482,2.702,483,1.723,484,2.032,485,2.032,486,1.723,487,2.032,488,2.032,489,2.032,490,3.187,491,1.723,492,2.032,493,2.032,494,2.032,495,2.032,496,1.723,497,2.032,498,2.032]],["title/modules/PronosticsModule.html",[43,1.04,58,2.095]],["body/modules/PronosticsModule.html",[2,1.598,3,0.233,4,0.199,5,0.199,12,0.025,17,0.684,21,0.417,25,0.635,31,0.233,32,0.15,40,0.014,41,0.018,42,0.014,43,1.768,45,1.714,46,1.714,47,1.971,48,1.971,49,1.714,50,2.808,51,2.808,58,4.055,61,2.538,62,1.971,63,1.971,67,2.744,69,2.297,70,1.025,201,2.123,288,1.714,450,3.534,452,3.91,473,3.894,474,3.458,476,3.049,499,3.458,500,3.458,501,3.458,502,4.079,503,4.079,504,3.458,505,4.079]],["title/injectables/PronosticsService.html",[82,0.706,473,1.925]],["body/injectables/PronosticsService.html",[3,0.114,4,0.098,5,0.098,7,0.224,8,0.956,12,0.025,14,0.735,16,1.458,17,0.804,18,1.369,20,1.62,21,0.334,25,0.489,31,0.114,32,0.073,38,1.679,40,0.014,41,0.011,42,0.007,70,0.502,82,0.649,83,0.785,89,2.027,127,1.528,132,0.652,135,0.79,137,1.201,141,3.274,144,1.039,145,1.039,146,1.623,157,1.364,173,0.858,175,1.72,176,2.13,177,0.897,182,2.319,186,1.205,199,3.694,201,3.288,202,1.343,203,3.425,204,1.343,276,0.965,286,2.46,290,1.157,295,3.563,304,3.911,305,3.911,306,3.563,310,1.414,321,2.158,342,4.054,345,2.114,357,1.124,358,1.039,369,1.414,370,1.926,394,1.636,395,1.039,406,1.039,411,2.349,446,2.349,454,3.738,455,2.966,462,2.114,467,3.738,468,2.114,473,2.867,475,1.693,476,1.492,478,2.665,482,2.665,483,2.665,486,2.665,491,1.693,506,1.693,507,3.143,508,3.143,509,3.143,510,3.143,511,1.997,512,1.997,513,3.143,514,1.997,515,3.143,516,1.997,517,1.997,518,3.143,519,1.997,520,3.143,521,1.997,522,1.997,523,1.997,524,1.997,525,4.409,526,1.997,527,1.997,528,1.997,529,1.997,530,1.997,531,1.997,532,1.997,533,1.997,534,1.997]],["title/classes/Sport.html",[32,0.126,209,1.18]],["body/classes/Sport.html",[3,0.241,4,0.206,5,0.206,7,0.474,11,1.283,12,0.025,14,0.608,17,1.076,21,0.352,31,0.307,32,0.197,40,0.015,41,0.019,42,0.015,70,1.06,132,0.707,137,1.109,145,0.994,170,1.553,173,0.931,175,1.532,179,2.11,209,2.146,217,3.023,242,2.594,281,3.619,282,3.619,288,2.612,289,3.023,290,1.553,345,3.611,535,3.153,536,5.369,537,5.369,538,4.218,539,2.837,540,3.576]],["title/controllers/SportsController.html",[0,1.04,541,2.3]],["body/controllers/SportsController.html",[0,1.902,2,0.753,3,0.141,4,0.121,5,0.121,7,0.278,8,1.128,11,1.501,12,0.025,14,0.712,16,1.352,17,0.828,18,1.269,19,2.888,20,1.501,21,0.324,22,1.93,23,1.288,24,2.099,25,0.577,26,1.114,27,1.394,28,1.394,31,0.141,32,0.091,33,1.196,34,1.394,35,2.503,38,1.799,40,0.009,41,0.013,42,0.009,87,1.394,89,2.053,127,0.973,132,0.415,137,1.02,145,0.874,146,1.818,157,1.487,173,0.819,175,1.809,177,1.058,185,1.93,186,1.329,209,2.127,216,3.144,217,3.24,276,1.791,286,2.385,295,2.273,300,1.665,302,2.78,308,1.851,310,2.379,321,2.221,323,3.323,330,2.494,369,1.669,394,2.314,395,1.288,396,1.394,404,2.099,406,1.93,468,3.733,541,2.99,542,2.099,543,3.708,544,3.144,545,3.144,546,3.144,547,4.185,548,2.476,549,2.476,550,2.476,551,2.476,552,2.099,553,2.099,554,2.476,555,3.708,556,2.476,557,2.476,558,2.503,559,2.099,560,2.476,561,2.099,562,2.476,563,2.476,564,2.476,565,2.476,566,2.476,567,2.476,568,2.476,569,2.476]],["title/modules/SportsModule.html",[43,1.04,59,2.095]],["body/modules/SportsModule.html",[2,1.62,3,0.238,4,0.203,5,0.203,12,0.025,17,0.698,21,0.42,25,0.649,31,0.238,32,0.153,40,0.015,41,0.019,42,0.015,43,1.945,45,1.75,46,1.75,47,2.013,48,2.013,49,1.75,50,2.837,51,2.013,59,4.008,61,2.573,62,2.013,63,2.013,69,2.346,70,1.047,173,0.92,186,1.339,209,1.438,288,1.75,339,3.114,539,3.583,541,3.949,558,3.683,559,3.532,570,3.532,571,3.532,572,4.166,573,4.166,574,3.532,575,4.166]],["title/injectables/SportsService.html",[82,0.706,558,1.925]],["body/injectables/SportsService.html",[3,0.148,4,0.126,5,0.126,7,0.291,8,1.166,12,0.025,14,0.777,16,1.535,17,0.979,18,1.44,20,1.535,21,0.37,25,0.597,31,0.148,32,0.095,38,1.823,40,0.009,41,0.013,42,0.009,70,0.651,82,0.792,83,1.018,89,2.072,127,1.983,132,0.434,137,0.943,144,1.347,145,1.076,146,1.858,157,1.352,173,0.572,175,1.778,177,0.739,186,1.588,193,1.587,209,2.208,217,2.158,276,1.251,286,2.438,290,1.411,302,2.158,310,1.725,321,2.271,329,1.741,342,4.19,343,3.25,344,2.866,345,3.394,357,1.458,358,1.347,369,1.725,370,1.587,374,1.741,394,1.995,395,1.347,396,1.458,406,1.347,430,2.195,439,2.195,468,2.579,544,3.25,545,3.25,546,3.25,547,4.278,552,3.25,558,2.841,574,2.195,576,2.195,577,2.589,578,2.589,579,4.565,580,3.834,581,2.589,582,3.834,583,2.589,584,2.589,585,2.589,586,2.589,587,2.589,588,2.589,589,2.589,590,2.589,591,2.589,592,3.834,593,2.589,594,2.589,595,2.589]],["title/classes/UpdateUserDto.html",[32,0.126,596,2.095]],["body/classes/UpdateUserDto.html",[3,0.218,4,0.186,5,0.186,7,0.428,11,1.891,12,0.025,14,0.897,21,0.25,31,0.218,32,0.185,40,0.013,41,0.018,42,0.013,132,1.043,137,1.395,140,2.929,145,0.899,153,3.169,159,3.169,161,3.169,165,3.169,170,1.405,177,1.089,179,1.977,188,3.449,189,2.338,190,2.338,192,2.148,222,2.567,223,3.235,224,5.073,225,3.235,228,3.235,229,3.235,231,4.265,232,3.235,233,2.567,234,2.852,235,2.852,236,2.852,237,3.761,238,2.852,239,2.852,596,3.083,597,4.775,598,3.816,599,3.816,600,5.031,601,3.816,602,3.816]],["title/classes/User.html",[32,0.126,135,0.859]],["body/classes/User.html",[3,0.216,4,0.185,5,0.185,7,0.425,11,1.938,12,0.025,14,0.919,21,0.328,31,0.286,32,0.139,40,0.013,41,0.017,42,0.013,70,0.951,132,1.068,135,1.258,137,1.393,140,2.917,145,0.892,153,3.156,159,3.156,161,3.156,163,3.156,165,3.156,170,1.393,179,1.966,226,4.242,242,2.417,281,3.435,282,4.216,288,2.102,289,2.131,290,1.393,603,2.829,604,3.784,605,3.784,606,3.784,607,3.784,608,3.784,609,3.784,610,2.545,611,3.208]],["title/controllers/UsersController.html",[0,1.04,612,2.3]],["body/controllers/UsersController.html",[0,0.631,2,0.631,3,0.119,4,0.101,5,0.101,7,0.233,8,0.985,11,1.644,12,0.025,14,0.78,16,1.644,17,0.906,18,1.543,19,3.117,20,1.644,21,0.355,22,1.08,23,2.074,25,0.505,26,0.934,27,1.169,28,1.169,31,0.119,32,0.076,33,1.003,34,1.169,35,2.915,38,1.644,40,0.007,41,0.011,42,0.007,87,1.169,89,2.132,129,2.074,132,0.755,135,1.002,137,1.069,141,2.915,145,1.274,146,1.991,157,1.499,163,2.75,176,1.565,177,1.543,221,3.73,276,2.612,280,1.552,306,2.993,310,1.793,312,1.396,316,1.396,317,1.552,321,0.934,358,1.08,369,2.433,391,4.029,394,2.911,395,1.08,396,1.169,406,1.686,455,2.179,456,2.422,462,2.179,464,1.76,481,2.747,496,1.76,553,1.76,561,1.76,596,1.272,612,2.179,613,1.76,614,2.747,615,2.747,616,2.076,617,2.076,618,2.076,619,2.076,620,2.076,621,2.076,622,1.76,623,2.076,624,2.076,625,2.076,626,2.076,627,2.076,628,2.076,629,2.076,630,2.076,631,2.076,632,2.076,633,3.24,634,1.76,635,2.747,636,1.76,637,1.552,638,2.076,639,2.076,640,3.24,641,3.24,642,3.24,643,3.24,644,2.076,645,2.076,646,4.885,647,4.885,648,4.885,649,4.885,650,2.076,651,2.076,652,3.24,653,2.076,654,2.076,655,2.076,656,2.076,657,2.076,658,2.076,659,2.076,660,2.076,661,2.076,662,2.076,663,2.076,664,2.076]],["title/modules/UsersModule.html",[43,1.04,60,1.925]],["body/modules/UsersModule.html",[2,1.53,3,0.218,4,0.186,5,0.186,12,0.025,17,0.944,21,0.427,25,0.594,31,0.218,32,0.14,40,0.013,41,0.018,42,0.013,43,1.712,45,1.603,46,1.603,47,1.843,48,1.843,49,1.603,50,2.719,51,2.719,60,3.667,61,2.431,62,1.843,63,1.843,67,2.567,69,2.148,70,0.959,129,3.564,135,0.959,178,1.843,195,1.843,288,2.365,291,3.083,338,2.567,340,3.235,378,3.083,416,2.567,417,3.235,504,4.772,610,3.384,612,3.786,634,3.235,637,2.852,665,3.235,666,3.235,667,3.235,668,3.816,669,3.816,670,3.816]],["title/injectables/UsersService.html",[82,0.706,129,1.779]],["body/injectables/UsersService.html",[3,0.085,4,0.073,5,0.073,7,0.167,8,0.754,12,0.025,14,0.783,16,1.608,17,0.887,18,1.51,20,1.608,21,0.356,25,0.386,31,0.085,32,0.055,38,1.688,40,0.009,41,0.009,42,0.005,70,0.374,82,0.512,83,0.585,89,2.113,127,0.585,129,1.29,132,0.746,135,1.423,137,0.919,140,2.571,141,3.47,143,1.853,144,1.657,145,1.475,146,2.333,152,1.002,153,1.396,157,1.104,159,2.505,161,2.505,163,2.505,165,2.505,176,1.198,177,1.176,178,0.72,186,1.365,195,0.72,221,3.469,259,3.147,276,1.538,290,0.913,338,1.002,349,2.699,357,0.839,358,0.775,360,1.263,369,1.67,370,1.519,391,2.992,394,1.931,395,0.775,396,0.839,406,1.657,416,1.002,421,2.699,431,1.263,455,2.496,456,1.853,462,1.667,596,0.913,614,2.102,615,2.102,622,2.102,635,2.102,636,1.263,637,1.113,671,1.263,672,2.479,673,2.479,674,2.479,675,1.49,676,1.49,677,2.479,678,2.479,679,1.49,680,2.479,681,1.49,682,1.49,683,2.479,684,1.49,685,1.49,686,2.479,687,1.49,688,2.479,689,1.49,690,2.479,691,1.49,692,2.479,693,1.49,694,2.479,695,1.49,696,1.49,697,1.49,698,1.49,699,1.49,700,3.712,701,1.49,702,1.49,703,1.49,704,3.184,705,1.49,706,5.66,707,2.479,708,2.479,709,2.479,710,4.449,711,2.479,712,3.147,713,2.479,714,2.479,715,2.479,716,1.49,717,1.49,718,1.49,719,1.49,720,5.842,721,5.842,722,2.479,723,5.43,724,2.479,725,2.479,726,2.479,727,2.479,728,2.479,729,2.479,730,2.479,731,2.479,732,2.479,733,2.479,734,2.479,735,2.479,736,2.479,737,2.479,738,2.479,739,2.479,740,2.479,741,1.49,742,1.49,743,1.49,744,1.49]],["title/coverage.html",[745,3.494]],["body/coverage.html",[0,1.82,1,1.885,5,0.137,6,2.376,12,0.025,26,1.261,29,1.578,32,0.236,40,0.01,41,0.014,42,0.01,49,1.177,65,1.717,66,1.717,82,1.311,84,2.376,85,1.885,86,2.376,97,1.458,107,1.717,108,1.717,116,1.885,125,2.376,129,1.458,132,0.47,135,0.704,152,4.53,169,1.885,171,3.019,172,2.376,177,0.8,178,1.354,193,1.717,194,2.376,195,1.354,199,1.717,200,2.376,201,1.458,209,0.967,213,2.095,214,2.376,221,1.717,222,3.525,233,2.733,240,2.376,241,2.376,244,2.376,267,2.376,277,3.037,291,1.717,293,2.376,318,1.578,341,2.376,371,3.037,378,1.717,380,2.376,392,1.578,418,2.376,440,3.037,450,1.885,452,1.885,453,2.376,473,1.578,506,2.376,535,3.037,539,1.885,541,1.885,542,2.376,558,1.578,576,2.376,596,1.717,597,3.037,603,3.037,610,1.885,612,1.885,613,2.376,671,2.376,745,2.095,746,2.802,747,2.802,748,2.802,749,6.825,750,5.802,751,5.241,752,2.802,753,4.063,754,5.985,755,2.802,756,2.376,757,6.13,758,4.063,759,4.779,760,4.063,761,4.063,762,2.802,763,2.376,764,2.802,765,5.241,766,2.802,767,2.802,768,2.802,769,2.802]],["title/dependencies.html",[46,1.729,770,2.852]],["body/dependencies.html",[12,0.025,25,0.663,32,0.199,40,0.015,41,0.019,42,0.015,46,1.789,70,1.07,96,2.397,115,3.183,143,3.183,192,2.397,251,4.663,252,3.609,272,3.609,290,1.568,771,5.931,772,4.258,773,5.401,774,4.258,775,4.258,776,4.258,777,4.258,778,4.258,779,4.258,780,4.258,781,4.258,782,4.258,783,4.258,784,4.258,785,4.258,786,4.258,787,4.258,788,4.258,789,4.258,790,4.258,791,4.258,792,4.258,793,4.258,794,4.258,795,4.258,796,4.258,797,4.258,798,4.258,799,4.258,800,4.258,801,4.258,802,4.258,803,4.258,804,4.258]],["title/miscellaneous/functions.html",[805,1.918,806,3.488]],["body/miscellaneous/functions.html",[7,0.602,12,0.022,40,0.019,41,0.022,42,0.019,49,2.756,763,4.549,805,3.609,806,4.549,807,5.365]],["title/index.html",[7,0.32,808,2.852,809,2.852]],["body/index.html",[4,0.195,12,0.024,40,0.014,41,0.018,42,0.014,173,0.882,218,3.387,745,2.986,810,3.995,811,3.995,812,5.185,813,3.995,814,3.995,815,3.995,816,3.995,817,3.995,818,3.995,819,3.995,820,3.995,821,3.995,822,5.756,823,3.995,824,3.995,825,3.995,826,3.995,827,6.585,828,3.995,829,3.995,830,6.469,831,3.995,832,3.995,833,5.185,834,3.995,835,3.995,836,3.995,837,3.995,838,5.185,839,5.185,840,3.995,841,3.995,842,3.995,843,5.185,844,5.185,845,3.995,846,3.995,847,3.995,848,3.995,849,3.995,850,3.387,851,3.995,852,3.995,853,3.995,854,3.995,855,3.995,856,3.995,857,3.995,858,3.995,859,3.995,860,3.995,861,3.995,862,3.995,863,3.995,864,3.995,865,3.995,866,3.995,867,3.995,868,3.995]],["title/modules.html",[45,1.964]],["body/modules.html",[12,0.02,40,0.017,41,0.02,42,0.017,44,3.25,45,2.03,55,2.961,56,2.961,57,2.961,58,2.961,59,2.961,60,2.721,850,5.82,869,6.865,870,6.865,871,6.865]],["title/overview.html",[872,3.962]],["body/overview.html",[2,1.023,12,0.024,29,2.973,40,0.012,41,0.016,42,0.012,43,1.023,44,4.621,45,1.413,46,1.413,47,1.625,48,1.625,49,1.413,50,1.625,51,1.625,52,2.851,53,2.851,54,2.851,55,4.081,56,3.773,57,3.773,58,3.773,59,3.651,60,3.551,61,2.232,62,1.625,63,1.625,83,1.322,97,2.747,104,2.851,106,2.851,107,3.235,108,3.235,129,3.282,170,1.238,318,3.551,333,2.851,334,2.851,335,2.851,392,3.551,407,2.851,408,2.851,409,2.851,473,3.551,499,2.851,500,2.851,501,2.851,558,2.973,570,2.851,571,2.851,665,2.851,666,2.851,667,2.851,712,2.851,872,2.851,873,4.621,874,3.363]],["title/miscellaneous/variables.html",[805,1.918,875,3.488]],["body/miscellaneous/variables.html",[7,0.443,12,0.024,32,0.223,40,0.014,41,0.018,42,0.014,116,3.461,119,3.348,132,0.662,171,2.055,177,1.469,222,4.079,233,4.079,234,3.846,235,3.846,236,3.846,237,4.533,238,3.846,239,3.846,277,2.952,289,3.414,291,3.153,292,3.348,371,2.952,378,3.153,379,3.348,440,2.952,450,3.461,451,3.348,535,2.952,539,3.461,540,3.348,597,2.952,603,2.952,610,3.461,611,3.348,756,3.348,805,2.656,875,3.348,876,3.949,877,3.949,878,3.949,879,3.949,880,3.949,881,3.949,882,3.949,883,3.949,884,3.949,885,6.659,886,6.659,887,3.949]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PronosticsController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":712,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{}}}],["100",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":874,"title":{},"body":{"overview.html":{}}}],["2",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["2.0.0",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["3.0.0",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":490,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["5.0.0",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["5.10.3",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":751,"title":{},"body":{"coverage.html":{}}}],["6.5.4",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":873,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":752,"title":{},"body":{"coverage.html":{}}}],["8.2.0",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["9])))(?=.{6",{"_index":239,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["9]))|((?=.*[a",{"_index":238,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["access",{"_index":306,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{}}}],["access_token",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":507,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["actions",{"_index":344,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["add",{"_index":302,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["addmyfavorite",{"_index":296,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["addmyfavorite(@request",{"_index":325,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["addmyfavorite(req",{"_index":299,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["addmyfavorite(userid",{"_index":350,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["addmyfavorite(userid,favoriteid",{"_index":363,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["addmysport",{"_index":382,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["addmysport(@request",{"_index":400,"title":{},"body":{"controllers/MySportsController.html":{}}}],["addmysport(req",{"_index":385,"title":{},"body":{"controllers/MySportsController.html":{}}}],["addmysport(userid",{"_index":422,"title":{},"body":{"injectables/MySportsService.html":{}}}],["addsport",{"_index":544,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["addsport(@request",{"_index":565,"title":{},"body":{"controllers/SportsController.html":{}}}],["addsport(name",{"_index":580,"title":{},"body":{"injectables/SportsService.html":{}}}],["addsport(req",{"_index":548,"title":{},"body":{"controllers/SportsController.html":{}}}],["admincreate",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admincreate(@request",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreate(createuserdto",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["admincreate(req",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminupdate",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["adminupdate(@request",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminupdate(id",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdate(req",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{}}}],["already",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["amazing",{"_index":851,"title":{},"body":{"index.html":{}}}],["angular",{"_index":821,"title":{},"body":{"index.html":{}}}],["api",{"_index":207,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{}}}],["app",{"_index":218,"title":{},"body":{"classes/CreateSportDto.html":{},"index.html":{}}}],["app.controller",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appcontroller,mysportscontroller,myfavoritescontroller",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":537,"title":{},"body":{"classes/Sport.html":{}}}],["applications",{"_index":818,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":44,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":29,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["associated",{"_index":442,"title":{},"body":{"classes/Pronostic.html":{}}}],["async",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":241,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":85,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":243,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":55,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule,mysportsmodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["author",{"_index":861,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":97,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":345,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"injectables/SportsService.html":{}}}],["await",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":852,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(body.password",{"_index":733,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":711,"title":{},"body":{"injectables/UsersService.html":{}}}],["body",{"_index":391,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["body.email},{new:true,usefindandmodify:false",{"_index":731,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.firstname},{new:true,usefindandmodify:false",{"_index":725,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"email",{"_index":729,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"firstname",{"_index":722,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"isadmin",{"_index":742,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"lastname",{"_index":726,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"password",{"_index":732,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"phone",{"_index":736,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.isadmin},{new:true,usefindandmodify:false",{"_index":744,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.lastname},{new:true,usefindandmodify:false",{"_index":728,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.phone},{new:true,usefindandmodify:false",{"_index":738,"title":{},"body":{"injectables/UsersService.html":{}}}],["boolean",{"_index":226,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":871,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":869,"title":{},"body":{"modules.html":{}}}],["building",{"_index":813,"title":{},"body":{"index.html":{}}}],["catch",{"_index":589,"title":{},"body":{"injectables/SportsService.html":{}}}],["check",{"_index":459,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["class",{"_index":32,"title":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":170,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule",{"_index":333,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule_exports",{"_index":334,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule_providers",{"_index":335,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule",{"_index":407,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule_exports",{"_index":409,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule_providers",{"_index":408,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule",{"_index":499,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule_exports",{"_index":501,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule_providers",{"_index":500,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_sportsmodule",{"_index":570,"title":{},"body":{"modules/SportsModule.html":{},"overview.html":{}}}],["cluster_sportsmodule_providers",{"_index":571,"title":{},"body":{"modules/SportsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":665,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":667,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":666,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collect",{"_index":536,"title":{},"body":{"classes/Sport.html":{}}}],["collection",{"_index":215,"title":{},"body":{"classes/CreateSportDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{}}}],["collects",{"_index":278,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{}}}],["commentary",{"_index":202,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["connected",{"_index":305,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["const",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(pronostic.name",{"_index":522,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":268,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(myfavoritemodel",{"_index":347,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["constructor(mysportmodel",{"_index":419,"title":{},"body":{"injectables/MySportsService.html":{}}}],["constructor(private",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["constructor(pronosticmodel",{"_index":511,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["constructor(sportmodel",{"_index":577,"title":{},"body":{"injectables/SportsService.html":{}}}],["constructor(usermodel",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('myfavorites",{"_index":320,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["controller('mysports",{"_index":397,"title":{},"body":{"controllers/MySportsController.html":{}}}],["controller('pronostics",{"_index":477,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["controller('sports",{"_index":560,"title":{},"body":{"controllers/SportsController.html":{}}}],["controller('users",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["corresponds",{"_index":285,"title":{},"body":{"classes/MyFavorite.html":{}}}],["coverage",{"_index":745,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":176,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@request",{"_index":480,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["create(createuserdto",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(req",{"_index":457,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["create(userid",{"_index":513,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createdpronostic",{"_index":523,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createdpronostic.save",{"_index":526,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createduser",{"_index":713,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":715,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmyfavoritedto",{"_index":169,"title":{"classes/CreateMyFavoriteDto.html":{}},"body":{"classes/CreateMyFavoriteDto.html":{},"injectables/MyFavoritesService.html":{},"coverage.html":{}}}],["createmysportdto",{"_index":193,"title":{"classes/CreateMySportDto.html":{}},"body":{"classes/CreateMySportDto.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{},"coverage.html":{}}}],["createpronosticdto",{"_index":199,"title":{"classes/CreatePronosticDto.html":{}},"body":{"classes/CreatePronosticDto.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"coverage.html":{}}}],["createpronosticdto.commentary",{"_index":525,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createpronosticdto.matchid",{"_index":482,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["createpronosticdto.type",{"_index":484,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["createpronosticdto.winnerid",{"_index":483,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["createsportdto",{"_index":213,"title":{"classes/CreateSportDto.html":{}},"body":{"classes/CreateSportDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":221,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.firstname",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.isadmin",{"_index":741,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.lastname",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.phone",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["current",{"_index":315,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["data",{"_index":180,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{}}}],["database",{"_index":468,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["datas",{"_index":432,"title":{},"body":{"injectables/MySportsService.html":{}}}],["days",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["declarations",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":310,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":496,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["delete(@param('id",{"_index":497,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["delete(@request",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(id",{"_index":463,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["delete(req",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete,post,request",{"_index":557,"title":{},"body":{"controllers/SportsController.html":{}}}],["deleted",{"_index":370,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["deleteone",{"_index":508,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["deleteone(id",{"_index":515,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["deleteuser",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(id",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["delmyfavorite",{"_index":297,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["delmyfavorite(@request",{"_index":331,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["delmyfavorite(id",{"_index":353,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["delmyfavorite(req",{"_index":307,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["delmysport",{"_index":383,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["delmysport(@request",{"_index":403,"title":{},"body":{"controllers/MySportsController.html":{}}}],["delmysport(req",{"_index":387,"title":{},"body":{"controllers/MySportsController.html":{}}}],["delmysport(sportid",{"_index":425,"title":{},"body":{"injectables/MySportsService.html":{}}}],["delsport",{"_index":545,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["delsport(@request",{"_index":568,"title":{},"body":{"controllers/SportsController.html":{}}}],["delsport(req",{"_index":550,"title":{},"body":{"controllers/SportsController.html":{}}}],["delsport(sportid",{"_index":582,"title":{},"body":{"injectables/SportsService.html":{}}}],["dependencies",{"_index":46,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":173,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"index.html":{}}}],["details",{"_index":555,"title":{},"body":{"controllers/SportsController.html":{}}}],["development",{"_index":829,"title":{},"body":{"index.html":{}}}],["display",{"_index":216,"title":{},"body":{"classes/CreateSportDto.html":{},"controllers/SportsController.html":{}}}],["document",{"_index":281,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["documentation",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":460,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["dotenv",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":174,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{}}}],["dto/create",{"_index":358,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":840,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":814,"title":{},"body":{"index.html":{}}}],["elements",{"_index":412,"title":{},"body":{"modules/MySportsModule.html":{}}}],["email",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":329,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/SportsService.html":{}}}],["exec",{"_index":527,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["exist",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["expiresin",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":242,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["extractjwt",{"_index":249,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":257,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":259,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["favorite",{"_index":303,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{}}}],["favoriteid",{"_index":351,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["favorites",{"_index":314,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":455,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@request",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(req",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone",{"_index":456,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('matchid",{"_index":494,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["findone(@request",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(email",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(matchid",{"_index":469,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["findone(req",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{}}}],["findpronosticforonematchid",{"_index":509,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["findpronosticforonematchid(matchid",{"_index":518,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["finduserbyid",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyid(id",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["followed",{"_index":372,"title":{},"body":{"classes/MySport.html":{}}}],["framework",{"_index":812,"title":{},"body":{"index.html":{}}}],["fs",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["function",{"_index":764,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":806,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":561,"title":{},"body":{"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["get(':matchid",{"_index":493,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["get('profile",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["getmyfavorite",{"_index":298,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorite(@request",{"_index":322,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorite(req",{"_index":311,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorites",{"_index":346,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmyfavorites(userid",{"_index":355,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmyfavorites(userid:string",{"_index":361,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmysports",{"_index":384,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["getmysports(@request",{"_index":398,"title":{},"body":{"controllers/MySportsController.html":{}}}],["getmysports(req",{"_index":389,"title":{},"body":{"controllers/MySportsController.html":{}}}],["getmysports(userid",{"_index":428,"title":{},"body":{"injectables/MySportsService.html":{}}}],["getprofile",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["getsport",{"_index":546,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getsport(@param('id",{"_index":562,"title":{},"body":{"controllers/SportsController.html":{}}}],["getsport(id",{"_index":552,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getsports",{"_index":547,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getting",{"_index":808,"title":{"index.html":{}},"body":{}}],["give",{"_index":467,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["given",{"_index":185,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"controllers/SportsController.html":{}}}],["google",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["grow",{"_index":847,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":710,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword},{new:true,usefindandmodify:false",{"_index":735,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":819,"title":{},"body":{"index.html":{}}}],["here",{"_index":858,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":396,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpexception",{"_index":394,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["https://nestjs.com",{"_index":865,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":395,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":406,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.unauthorized",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["id",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"injectables/JwtStrategy.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id,{\"email",{"_index":730,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"firstname",{"_index":724,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"isadmin",{"_index":743,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"lastname",{"_index":727,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"password",{"_index":734,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"phone",{"_index":737,"title":{},"body":{"injectables/UsersService.html":{}}}],["identifier",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["if(!isadmin",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["if(await",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["if(isnull(user",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(result.deletedcount",{"_index":719,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(updated",{"_index":739,"title":{},"body":{"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":258,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PronosticsModule.html":{},"modules/UsersModule.html":{}}}],["imports:[mongoosemodule.forfeature",{"_index":339,"title":{},"body":{"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/SportsModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":82,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":357,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(myfavorite.name",{"_index":360,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(mysport.name",{"_index":431,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(pronostic.name",{"_index":479,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["injectmodel(sport.name",{"_index":586,"title":{},"body":{"injectables/SportsService.html":{}}}],["inspired",{"_index":820,"title":{},"body":{"index.html":{}}}],["installation",{"_index":826,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":828,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":590,"title":{},"body":{"injectables/SportsService.html":{}}}],["isadmin",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isadmin(id",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["isemail",{"_index":188,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["iserror",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["isnull",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["isnull(user",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{}}}],["isoptional",{"_index":191,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{}}}],["join",{"_index":854,"title":{},"body":{"index.html":{}}}],["json",{"_index":528,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["jwt",{"_index":252,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":26,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":256,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":107,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":862,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":868,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":844,"title":{},"body":{"index.html":{}}}],["list",{"_index":323,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["local",{"_index":272,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":108,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["manage",{"_index":411,"title":{},"body":{"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{}}}],["managing",{"_index":343,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/SportsService.html":{}}}],["mandatory",{"_index":330,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{}}}],["match",{"_index":446,"title":{},"body":{"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["matches",{"_index":189,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(passwordregex",{"_index":229,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(passwordregex)@validateif(undefined",{"_index":598,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matchesuseridmatchid",{"_index":485,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["matchesuseridmatchid.length",{"_index":487,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["matchid",{"_index":203,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["matching",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matchs",{"_index":461,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["message",{"_index":369,"title":{},"body":{"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":190,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(1",{"_index":224,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(10",{"_index":231,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["miscellaneous",{"_index":805,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":843,"title":{},"body":{"index.html":{}}}],["mode",{"_index":833,"title":{},"body":{"index.html":{}}}],["model",{"_index":186,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":43,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":45,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":290,"title":{},"body":{"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"injectables/SportsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":504,"title":{},"body":{"modules/PronosticsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost/funsport",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":857,"title":{},"body":{"index.html":{}}}],["myfavorite",{"_index":178,"title":{"classes/MyFavorite.html":{}},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["myfavorite.dto",{"_index":359,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["myfavorite.dto.ts",{"_index":172,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"coverage.html":{}}}],["myfavorite.dto.ts:14",{"_index":184,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.dto.ts:19",{"_index":183,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.dto.ts:9",{"_index":187,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.name",{"_index":340,"title":{},"body":{"modules/MyFavoritesModule.html":{},"modules/UsersModule.html":{}}}],["myfavoritemodel",{"_index":349,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/UsersService.html":{}}}],["myfavorites",{"_index":294,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["myfavorites.controller",{"_index":337,"title":{},"body":{"modules/MyFavoritesModule.html":{}}}],["myfavorites.service",{"_index":319,"title":{},"body":{"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{}}}],["myfavorites/myfavorites.controller",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["myfavorites/myfavorites.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["myfavoriteschema",{"_index":291,"title":{},"body":{"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["myfavoritescontroller",{"_index":66,"title":{"controllers/MyFavoritesController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"coverage.html":{}}}],["myfavoritesmodule",{"_index":56,"title":{"modules/MyFavoritesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MyFavoritesModule.html":{},"modules.html":{},"overview.html":{}}}],["myfavoritesservice",{"_index":318,"title":{"injectables/MyFavoritesService.html":{}},"body":{"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"coverage.html":{},"overview.html":{}}}],["mypronostics/pronostics.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["mysport",{"_index":195,"title":{"classes/MySport.html":{}},"body":{"classes/CreateMySportDto.html":{},"classes/MySport.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["mysport.dto",{"_index":430,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["mysport.dto.ts",{"_index":194,"title":{},"body":{"classes/CreateMySportDto.html":{},"coverage.html":{}}}],["mysport.dto.ts:14",{"_index":197,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.dto.ts:19",{"_index":196,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.dto.ts:9",{"_index":198,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.name",{"_index":417,"title":{},"body":{"modules/MySportsModule.html":{},"modules/UsersModule.html":{}}}],["mysportmodel",{"_index":421,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/UsersService.html":{}}}],["mysports",{"_index":381,"title":{},"body":{"controllers/MySportsController.html":{}}}],["mysports.controller",{"_index":415,"title":{},"body":{"modules/MySportsModule.html":{}}}],["mysports.service",{"_index":393,"title":{},"body":{"controllers/MySportsController.html":{},"modules/MySportsModule.html":{}}}],["mysports/mysports.controller",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["mysports/mysports.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["mysportschema",{"_index":378,"title":{},"body":{"classes/MySport.html":{},"modules/MySportsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mysportscontroller",{"_index":65,"title":{"controllers/MySportsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"coverage.html":{}}}],["mysportsmodule",{"_index":57,"title":{"modules/MySportsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MySportsModule.html":{},"modules.html":{},"overview.html":{}}}],["mysportsservice",{"_index":392,"title":{"injectables/MySportsService.html":{}},"body":{"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"coverage.html":{},"overview.html":{}}}],["myśliwiec",{"_index":863,"title":{},"body":{"index.html":{}}}],["name",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["necessary",{"_index":413,"title":{},"body":{"modules/MySportsModule.html":{}}}],["need",{"_index":304,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["nest",{"_index":822,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":867,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":177,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newfavorite",{"_index":364,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["newfavorite.save",{"_index":367,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["newmysport",{"_index":434,"title":{},"body":{"injectables/MySportsService.html":{}}}],["newmysport.save",{"_index":437,"title":{},"body":{"injectables/MySportsService.html":{}}}],["newpronostic",{"_index":530,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.commentary",{"_index":533,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.save",{"_index":534,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.winnerid",{"_index":532,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newsport",{"_index":592,"title":{},"body":{"injectables/SportsService.html":{}}}],["newsport.save",{"_index":594,"title":{},"body":{"injectables/SportsService.html":{}}}],["node.js",{"_index":811,"title":{},"body":{"index.html":{}}}],["nothing",{"_index":740,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":827,"title":{},"body":{"index.html":{}}}],["null",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["oauth20",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ok",{"_index":439,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["one",{"_index":472,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["open",{"_index":845,"title":{},"body":{"index.html":{}}}],["optional",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":872,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":601,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["p.password",{"_index":602,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["package",{"_index":770,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":321,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":251,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":253,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":254,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passverify",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["passwordregex",{"_index":233,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('admin/updateuser",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":262,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.firstname",{"_index":263,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":261,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.isadmin",{"_index":266,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.lastname",{"_index":264,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.phone",{"_index":265,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["phone",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["please",{"_index":855,"title":{},"body":{"index.html":{}}}],["post",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["post('admin/createuser",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["presents",{"_index":427,"title":{},"body":{"injectables/MySportsService.html":{}}}],["private",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":835,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":810,"title":{},"body":{"index.html":{}}}],["project",{"_index":846,"title":{},"body":{"index.html":{}}}],["promise",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pronostic",{"_index":201,"title":{"classes/Pronostic.html":{}},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"coverage.html":{}}}],["pronostic.dto",{"_index":475,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostic.dto.ts",{"_index":200,"title":{},"body":{"classes/CreatePronosticDto.html":{},"coverage.html":{}}}],["pronostic.dto.ts:10",{"_index":210,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:15",{"_index":206,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:20",{"_index":208,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:25",{"_index":211,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:31",{"_index":205,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.name",{"_index":505,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["pronosticmodel",{"_index":478,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostics",{"_index":454,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostics.controller",{"_index":503,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["pronostics.service",{"_index":474,"title":{},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{}}}],["pronosticschema",{"_index":450,"title":{},"body":{"classes/Pronostic.html":{},"modules/PronosticsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pronosticscontroller",{"_index":452,"title":{"controllers/PronosticsController.html":{}},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"coverage.html":{}}}],["pronosticsmodule",{"_index":58,"title":{"modules/PronosticsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PronosticsModule.html":{},"modules.html":{},"overview.html":{}}}],["pronosticsservice",{"_index":473,"title":{"injectables/PronosticsService.html":{}},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"coverage.html":{},"overview.html":{}}}],["pronotic",{"_index":491,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronotics",{"_index":441,"title":{},"body":{"classes/Pronostic.html":{}}}],["prop",{"_index":282,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["properties",{"_index":179,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["propery",{"_index":373,"title":{},"body":{"classes/MySport.html":{}}}],["providers",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":317,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/UsersController.html":{}}}],["read",{"_index":856,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["regexp('^(((?=.*[a",{"_index":234,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":825,"title":{},"body":{"index.html":{}}}],["req",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["req,@body",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.body.data",{"_index":327,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["req.body.id",{"_index":404,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["req.body.name",{"_index":566,"title":{},"body":{"controllers/SportsController.html":{}}}],["req.body.sportfavoriteid",{"_index":326,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["req.body.sportid",{"_index":401,"title":{},"body":{"controllers/MySportsController.html":{}}}],["req.user",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user.id",{"_index":481,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":295,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{}}}],["routes",{"_index":543,"title":{},"body":{"controllers/SportsController.html":{}}}],["run",{"_index":830,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":815,"title":{},"body":{"index.html":{}}}],["schema",{"_index":288,"title":{},"body":{"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"classes/MySport.html":{},"modules/MySportsModule.html":{},"classes/Pronostic.html":{},"modules/PronosticsModule.html":{},"classes/Sport.html":{},"modules/SportsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":289,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(myfavorite",{"_index":292,"title":{},"body":{"classes/MyFavorite.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(mysport",{"_index":379,"title":{},"body":{"classes/MySport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(pronostic",{"_index":451,"title":{},"body":{"classes/Pronostic.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(sport",{"_index":540,"title":{},"body":{"classes/Sport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":611,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/myfavorite.schema",{"_index":338,"title":{},"body":{"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/mysport.schema",{"_index":416,"title":{},"body":{"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/pronostic.schema",{"_index":476,"title":{},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{}}}],["schemas/sport.schema",{"_index":574,"title":{},"body":{"modules/SportsModule.html":{},"injectables/SportsService.html":{}}}],["schemas/user.schema",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":260,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["send",{"_index":444,"title":{},"body":{"classes/Pronostic.html":{}}}],["server",{"_index":816,"title":{},"body":{"index.html":{}}}],["service",{"_index":342,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{}}}],["side",{"_index":817,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specific",{"_index":286,"title":{},"body":{"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["sponsors",{"_index":849,"title":{},"body":{"index.html":{}}}],["sport",{"_index":209,"title":{"classes/Sport.html":{}},"body":{"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"coverage.html":{}}}],["sport.dto.ts",{"_index":214,"title":{},"body":{"classes/CreateSportDto.html":{},"coverage.html":{}}}],["sport.dto.ts:9",{"_index":219,"title":{},"body":{"classes/CreateSportDto.html":{}}}],["sport.name",{"_index":575,"title":{},"body":{"modules/SportsModule.html":{}}}],["sportfavoriteid",{"_index":181,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{}}}],["sportfavoriteid:favoriteid,data:data",{"_index":366,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["sportid",{"_index":374,"title":{},"body":{"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["sportid:sportid",{"_index":436,"title":{},"body":{"injectables/MySportsService.html":{}}}],["sportmodel",{"_index":579,"title":{},"body":{"injectables/SportsService.html":{}}}],["sports",{"_index":217,"title":{},"body":{"classes/CreateSportDto.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["sports.controller",{"_index":573,"title":{},"body":{"modules/SportsModule.html":{}}}],["sports.service",{"_index":559,"title":{},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{}}}],["sports/sports.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["sportschema",{"_index":539,"title":{},"body":{"classes/Sport.html":{},"modules/SportsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sportscontroller",{"_index":541,"title":{"controllers/SportsController.html":{}},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{},"coverage.html":{}}}],["sportsmodule",{"_index":59,"title":{"modules/SportsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SportsModule.html":{},"modules.html":{},"overview.html":{}}}],["sportsservice",{"_index":558,"title":{"injectables/SportsService.html":{}},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"coverage.html":{},"overview.html":{}}}],["src/.../constants.ts",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":807,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../myfavorite.schema.ts",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mysport.schema.ts",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pronostic.schema.ts",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sport.schema.ts",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../update",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":756,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":240,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":244,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":267,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":271,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":269,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/dto/create",{"_index":171,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/dto/update",{"_index":597,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":763,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/myfavorites/myfavorites.controller.ts",{"_index":293,"title":{},"body":{"controllers/MyFavoritesController.html":{},"coverage.html":{}}}],["src/myfavorites/myfavorites.controller.ts:24",{"_index":313,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.controller.ts:37",{"_index":301,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.controller.ts:55",{"_index":309,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.module.ts",{"_index":336,"title":{},"body":{"modules/MyFavoritesModule.html":{}}}],["src/myfavorites/myfavorites.service.ts",{"_index":341,"title":{},"body":{"injectables/MyFavoritesService.html":{},"coverage.html":{}}}],["src/myfavorites/myfavorites.service.ts:13",{"_index":348,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:25",{"_index":356,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:37",{"_index":352,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:48",{"_index":354,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/mypronostics/pronostics.controller.ts",{"_index":453,"title":{},"body":{"controllers/PronosticsController.html":{},"coverage.html":{}}}],["src/mypronostics/pronostics.controller.ts:36",{"_index":458,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:60",{"_index":466,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:72",{"_index":471,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:84",{"_index":465,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.module.ts",{"_index":502,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["src/mypronostics/pronostics.service.ts",{"_index":506,"title":{},"body":{"injectables/PronosticsService.html":{},"coverage.html":{}}}],["src/mypronostics/pronostics.service.ts:13",{"_index":512,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:28",{"_index":514,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:43",{"_index":517,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:53",{"_index":519,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:64",{"_index":516,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:82",{"_index":521,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mysports/mysports.controller.ts",{"_index":380,"title":{},"body":{"controllers/MySportsController.html":{},"coverage.html":{}}}],["src/mysports/mysports.controller.ts:21",{"_index":390,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.controller.ts:34",{"_index":386,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.controller.ts:54",{"_index":388,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.module.ts",{"_index":410,"title":{},"body":{"modules/MySportsModule.html":{}}}],["src/mysports/mysports.service.ts",{"_index":418,"title":{},"body":{"injectables/MySportsService.html":{},"coverage.html":{}}}],["src/mysports/mysports.service.ts:11",{"_index":420,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:23",{"_index":429,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:34",{"_index":423,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:45",{"_index":426,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/schemas/myfavorite.schema.ts",{"_index":277,"title":{},"body":{"classes/MyFavorite.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/myfavorite.schema.ts:13",{"_index":287,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/myfavorite.schema.ts:19",{"_index":284,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/myfavorite.schema.ts:25",{"_index":283,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/mysport.schema.ts",{"_index":371,"title":{},"body":{"classes/MySport.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/mysport.schema.ts:13",{"_index":377,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/mysport.schema.ts:20",{"_index":376,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/mysport.schema.ts:26",{"_index":375,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/pronostic.schema.ts",{"_index":440,"title":{},"body":{"classes/Pronostic.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/pronostic.schema.ts:13",{"_index":448,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:19",{"_index":445,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:25",{"_index":447,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:31",{"_index":449,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:37",{"_index":443,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/sport.schema.ts",{"_index":535,"title":{},"body":{"classes/Sport.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/sport.schema.ts:14",{"_index":538,"title":{},"body":{"classes/Sport.html":{}}}],["src/schemas/user.schema.ts",{"_index":603,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/user.schema.ts:10",{"_index":607,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:13",{"_index":604,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:16",{"_index":608,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:19",{"_index":609,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:22",{"_index":606,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:7",{"_index":605,"title":{},"body":{"classes/User.html":{}}}],["src/sports/sports.controller.ts",{"_index":542,"title":{},"body":{"controllers/SportsController.html":{},"coverage.html":{}}}],["src/sports/sports.controller.ts:25",{"_index":554,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:35",{"_index":556,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:47",{"_index":549,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:67",{"_index":551,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.module.ts",{"_index":572,"title":{},"body":{"modules/SportsModule.html":{}}}],["src/sports/sports.service.ts",{"_index":576,"title":{},"body":{"injectables/SportsService.html":{},"coverage.html":{}}}],["src/sports/sports.service.ts:13",{"_index":578,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:25",{"_index":584,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:40",{"_index":585,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:51",{"_index":581,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:62",{"_index":583,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/users/users.controller.ts",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:26",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:40",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:94",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":668,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:114",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:125",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:55",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:60",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:65",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:78",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":831,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":834,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":836,"title":{},"body":{"index.html":{}}}],["started",{"_index":809,"title":{"index.html":{}},"body":{}}],["starter",{"_index":824,"title":{},"body":{"index.html":{}}}],["statements",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":859,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":250,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":255,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":850,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":870,"title":{},"body":{"modules.html":{}}}],["tab",{"_index":220,"title":{},"body":{"classes/CreateSportDto.html":{}}}],["table",{"_index":769,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":768,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":839,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":842,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":841,"title":{},"body":{"index.html":{}}}],["tests",{"_index":838,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":848,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":275,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.jwtservice.sign(payload",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.myfavoritemodel.create({'userid':userid",{"_index":365,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritemodel.find({'userid':userid}).exec",{"_index":362,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritemodel.findbyidanddelete(id",{"_index":368,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritesservice.addmyfavorite(req.user.id",{"_index":328,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.myfavoritesservice.delmyfavorite(req.body.sportfavoriteid",{"_index":332,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.myfavoritesservice.getmyfavorites(req.user.id",{"_index":324,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.mysportmodel.create({userid:userid",{"_index":435,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportmodel.find({userid:userid}).exec",{"_index":433,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportmodel.findbyidanddelete(sportid",{"_index":438,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportsservice.addmysport(req.user.id",{"_index":402,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.mysportsservice.delmysport(req.body.id",{"_index":405,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.mysportsservice.getmysports(req.user.id",{"_index":399,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.pronosticmodel",{"_index":524,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.find",{"_index":486,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.findbyidanddelete(id",{"_index":529,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.findone",{"_index":531,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticsservice.create(user",{"_index":489,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.deleteone(id",{"_index":498,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.findall",{"_index":492,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.findpronosticforonematchid(matchid",{"_index":495,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.updateone(user",{"_index":488,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.sportmodel.create({name",{"_index":593,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.find",{"_index":591,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.findbyid(id).orfail",{"_index":588,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.findbyidanddelete(sportid",{"_index":595,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportsservice.addsport(req.body.name",{"_index":567,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.delsport(req.body.id",{"_index":569,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.getsport(id",{"_index":563,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.getsports",{"_index":564,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.usermodel",{"_index":714,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.deleteone({'_id':id}).exec",{"_index":718,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":716,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find({'email':email}).exec",{"_index":717,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate",{"_index":723,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.admincreate(createuserdto",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.adminupdate(body.id",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(createuserdto",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(id",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(email",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyid(id",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.isadmin(req.user.id",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.userexists(createuserdto",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":276,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["touch",{"_index":860,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{}}}],["try",{"_index":587,"title":{},"body":{"injectables/SportsService.html":{}}}],["twitter",{"_index":866,"title":{},"body":{"index.html":{}}}],["type",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":823,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":273,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unit",{"_index":837,"title":{},"body":{"index.html":{}}}],["update",{"_index":462,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@request",{"_index":656,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(req",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":721,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateone",{"_index":510,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["updateone(userid",{"_index":520,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["updateuserdto",{"_index":596,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["use",{"_index":414,"title":{},"body":{"modules/MySportsModule.html":{}}}],["used",{"_index":175,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["useguards",{"_index":316,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@delete",{"_index":308,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["useguards(jwtauthguard)@delete(':id",{"_index":464,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":312,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get(':id",{"_index":553,"title":{},"body":{"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get(':matchid",{"_index":470,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@patch",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@patch('admin/updateuser",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@post",{"_index":300,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{}}}],["useguards(jwtauthguard)@post('admin/createuser",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(undefined)@post('login",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards,get",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards,put",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/SportsController.html":{}}}],["user",{"_index":135,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreatePronosticDto.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":424,"title":{},"body":{"injectables/MySportsService.html":{}}}],["user.dto",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:11",{"_index":228,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:14",{"_index":223,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:17",{"_index":232,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:20",{"_index":230,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":599,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:23",{"_index":227,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":225,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.isadmin",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.length",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":670,"title":{},"body":{"modules/UsersModule.html":{}}}],["user[0]._id",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].email",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].firstname",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].isadmin",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].lastname",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].password",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].phone",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["userexists(createuserdto",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":182,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["usermodel",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":274,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":280,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":669,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":610,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":612,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":60,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":129,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdated",{"_index":720,"title":{},"body":{"injectables/UsersService.html":{}}}],["util",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":245,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":270,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":600,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["validateuser",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":192,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":875,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":832,"title":{},"body":{"index.html":{}}}],["website",{"_index":864,"title":{},"body":{"index.html":{}}}],["widgets",{"_index":279,"title":{},"body":{"classes/MyFavorite.html":{}}}],["winner",{"_index":212,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{}}}],["winnerid",{"_index":204,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["you'd",{"_index":853,"title":{},"body":{"index.html":{}}}],["z])(?=.*[0",{"_index":237,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":235,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z]))|((?=.*[a",{"_index":236,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards,Put } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nAppModule -->\n\nMyFavoritesModule->AppModule\n\n\n\n\n\nMySportsModule\n\nMySportsModule\n\nAppModule -->\n\nMySportsModule->AppModule\n\n\n\n\n\nPronosticsModule\n\nPronosticsModule\n\nAppModule -->\n\nPronosticsModule->AppModule\n\n\n\n\n\nSportsModule\n\nSportsModule\n\nAppModule -->\n\nSportsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            MySportsController\n                        \n                        \n                            MyFavoritesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MyFavoritesModule\n                        \n                        \n                            MySportsModule\n                        \n                        \n                            PronosticsModule\n                        \n                        \n                            SportsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { PronosticsModule } from './MyPronostics/pronostics.module';\n\nimport { AuthModule } from './auth/auth.module';\nimport { MySportsController } from './MySports/MySports.controller';\nimport { MySportsModule } from './MySports/MySports.module';\nimport { MyFavoritesController } from './MyFavorites/MyFavorites.controller';\nimport { MyFavoritesModule } from './MyFavorites/MyFavorites.module';\nimport { SportsModule } from './sports/sports.module';\n@Module({\n  imports: [MongooseModule.forRoot('mongodb://localhost/funsport'), UsersModule, AuthModule,MySportsModule, MyFavoritesModule, SportsModule, PronosticsModule],\n  controllers: [AppController,MySportsController,MyFavoritesController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards,Get} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\nconstructor(private authService: AuthService) {}\n\n  @UseGuards(AuthGuard('local'))\n  @Post('login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '2 days' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n    ) {}\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.findOne(email);\n    const passVerify = await bcrypt.compare(pass, user[0].password);\n    if (user.length > 0 && passVerify) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    const payload = { \n                      email: user[0].email,\n                      id: user[0]._id ,\n                      firstName: user[0].firstName,\n                      lastName: user[0].lastName ,\n                      isAdmin: user[0].isAdmin,\n                      phone: user[0].phone,\n                    };\n    const access_token = this.jwtService.sign(payload)\n    return {\n      access_token: access_token,\n    };\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMyFavoriteDto.html":{"url":"classes/CreateMyFavoriteDto.html","title":"class - CreateMyFavoriteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMyFavoriteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-myFavorite.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a new MyFavorite.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:19\n                            \n                        \n\n                \n                    \n                        data \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:14\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:9\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n/**\n * This Dto is used to create a new MyFavorite.\n */\nexport class CreateMyFavoriteDto {\n  /**\n   * Id given in the Model\n   */\n  userId: string;\n\n  /**\n   * Id given in the Model\n   */\n  sportFavoriteId: string;\n\n  /**\n   * data \n   */\n  data: string[];\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMySportDto.html":{"url":"classes/CreateMySportDto.html","title":"class - CreateMySportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMySportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-mySport.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a new MySport.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:19\n                            \n                        \n\n                \n                    \n                        data \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:14\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:9\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n/**\n * This Dto is used to create a new MySport.\n */\nexport class CreateMySportDto {\n  /**\n   * Id given in the Model\n   */\n  userId: string;\n\n  /**\n   * Id given in the Model\n   */\n  sportFavoriteId: string;\n\n  /**\n   * data \n   */\n  data: string[]];\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePronosticDto.html":{"url":"classes/CreatePronosticDto.html","title":"class - CreatePronosticDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePronosticDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-pronostic.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a new pronostic.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentary\n                            \n                            \n                                matchId\n                            \n                            \n                                type\n                            \n                            \n                                userId\n                            \n                            \n                                winnerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:31\n                            \n                        \n\n                \n                    \n                        User commentary for this pronostic\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            matchId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:15\n                            \n                        \n\n                \n                    \n                        Id given by the API\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:20\n                            \n                        \n\n                \n                    \n                        Name of the sport\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:10\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            winnerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:25\n                            \n                        \n\n                \n                    \n                        Name of the pronostic winner\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\n/**\n * This Dto is used to create a new pronostic.\n */\nexport class CreatePronosticDto {\n  /**\n   * Id given in the Model\n   */\n  userId: string;\n\n  /**\n   * Id given by the API\n   */\n  matchId: string;\n\n  /**\n   * Name of the sport\n   */\n  type: string;\n\n  /**\n   * Name of the pronostic winner\n   */\n  winnerId: string;\n\n  /**\n   * User commentary for this pronostic\n   */\n  @IsOptional()\n  commentary: string;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSportDto.html":{"url":"classes/CreateSportDto.html","title":"class - CreateSportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-sport.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a new Sport.\nThis collection is used to display the sports in the app\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-sport.dto.ts:9\n                            \n                        \n\n                \n                    \n                        Name of the sport. This name is display in the tab\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSportDto {\n    /**\n     * Name of the sport. This name is display in the tab\n     */\n    name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Matches(passwordRegex)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(10)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\nconst passwordRegex = new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})');\n\nexport class CreateUserDto {\n\n  @MinLength(1)\n  firstName: string;\n\n  @MinLength(1)\n  lastName: string;\n\n  @IsEmail()\n  email: string;\n\n  @MinLength(10)\n  phone: string;\n\n  @Matches(passwordRegex)\n  password: string;\n\n  @IsOptional()\n  isAdmin: boolean;\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { id: payload.id, email: payload.email, firstName: payload.firstName, lastName: payload.lastName, phone: payload.phone , isAdmin: payload.isAdmin};\n  }\n  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MyFavorite.html":{"url":"classes/MyFavorite.html","title":"class - MyFavorite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MyFavorite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/myFavorite.schema.ts\n        \n\n            \n                Description\n            \n            \n                This collection collects all widgets for all users.\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:25\n                            \n                        \n\n                \n                    \n                        data\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:19\n                            \n                        \n\n                \n                    \n                        sportFavoriteId corresponds to a specific id sport\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:13\n                            \n                        \n\n                \n                    \n                        id user given in Model\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * This collection collects all widgets for all users.\n */\n@Schema()\nexport class MyFavorite extends Document {\n  /**\n   * id user given in Model\n   */\n  @Prop()\n  userId: string;\n\n  /**\n   * sportFavoriteId corresponds to a specific id sport\n   */\n  @Prop()\n  sportFavoriteId: string;\n\n  /**\n   * data\n   */\n  @Prop()\n  data: [string];\n\n}\n\n/**\n * SchemaFactory for the class \n */\nexport const MyFavoriteSchema = SchemaFactory.createForClass(MyFavorite);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MyFavoritesController.html":{"url":"controllers/MyFavoritesController.html","title":"controller - MyFavoritesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MyFavoritesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                myfavorites\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'myfavorites'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMyFavorite\n                            \n                            \n                                    Async\n                                delMyFavorite\n                            \n                            \n                                    Async\n                                getMyFavorite\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:37\n                \n            \n\n\n            \n                \n                    Controller to add a favorite\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:55\n                \n            \n\n\n            \n                \n                    Controller to delete a favorite\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:24\n                \n            \n\n\n            \n                \n                    Controller to get all favorites for the current user\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete, Post, Request, UseGuards, Put } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { MyFavoritesService } from './MyFavorites.service';\n\n/**\n * Controller used for the route 'myfavorites'\n */\n@Controller('myfavorites')\nexport class MyFavoritesController {\n  /**\n   * Constructor for MyFavorites controller\n   * @param {MyFavoritesService} myFavoritesService\n   */\n  constructor(private readonly myFavoritesService: MyFavoritesService) { }\n\n  /**\n   * Controller to get all favorites for the current user\n   * You need to be connected to access to this route\n   * @param req\n   * @return {Model}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async getMyFavorite(@Request() req) {\n    const list = await this.myFavoritesService.getMyFavorites(req.user.id)\n    return list;\n  }\n\n  /**\n   * Controller to add a favorite\n   * You need to be connected to access to this route\n   * @param req\n   * @return {Model}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async addMyFavorite(@Request() req) {\n    let list\n    if (req.body.sportFavoriteId, req.body.data) {\n      list = await this.myFavoritesService.addMyFavorite(req.user.id, req.body.sportFavoriteId, req.body.data)\n    } else {\n      list = { error: \"sportFavoriteId and data are mandatory\" }\n    }\n    return list;\n  }\n\n  /**\n   * Controller to delete a favorite\n   * You need to be connected to access to this route\n   * @param req\n   * @return {}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  async delMyFavorite(@Request() req) {\n    if (req.body.sportFavoriteId) {\n      return await this.myFavoritesService.delMyFavorite(req.body.sportFavoriteId)\n    } else {\n      return {\n        error: \"sportFavoriteId is mandatory\"\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MyFavoritesModule.html":{"url":"modules/MyFavoritesModule.html","title":"module - MyFavoritesModule","body":"\n                   \n\n\n\n\n    Modules\n    MyFavoritesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MyFavoritesModule\n\n\n\ncluster_MyFavoritesModule_exports\n\n\n\ncluster_MyFavoritesModule_providers\n\n\n\n\nMyFavoritesService \n\nMyFavoritesService \n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nMyFavoritesService  -->\n\nMyFavoritesModule->MyFavoritesService \n\n\n\n\n\nMyFavoritesService\n\nMyFavoritesService\n\nMyFavoritesModule -->\n\nMyFavoritesService->MyFavoritesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module for Model\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MyFavoritesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MyFavoritesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MyFavoritesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MyFavoritesService } from './MyFavorites.service';\nimport { MyFavoritesController } from './MyFavorites.controller';\nimport { MyFavorite, MyFavoriteSchema } from '../schemas/myFavorite.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n/**\n * Module for Model\n */\n@Module({\n  imports:[MongooseModule.forFeature([{ name: MyFavorite.name, schema: MyFavoriteSchema }])],\n  providers: [MyFavoritesService],\n  controllers: [MyFavoritesController],\n  exports: [MyFavoritesService],\n})\nexport class MyFavoritesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MyFavoritesService.html":{"url":"injectables/MyFavoritesService.html","title":"injectable - MyFavoritesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MyFavoritesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used for managing the actions available in Model\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMyFavorite\n                            \n                            \n                                    Async\n                                delMyFavorite\n                            \n                            \n                                    Async\n                                getMyFavorites\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(myFavoriteModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MyFavorites/MyFavorites.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor of MyFavoritesService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        myFavoriteModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMyFavorite(userId, favoriteId, data)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:37\n                \n            \n\n\n            \n                \n                    Service used to add a favorite for the current user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    favoriteId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMyFavorite(id)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:48\n                \n            \n\n\n            \n                \n                    Service used to delete a specific favorite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyFavorites\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyFavorites(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:25\n                \n            \n\n\n            \n                \n                    Service used to get all favorites for the current user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MyFavorite } from '../schemas/myFavorite.schema';\nimport { CreateMyFavoriteDto } from '../dto/create-myFavorite.dto';\n\n\n/**\n * Service used for managing the actions available in Model\n */\n\n@Injectable()\nexport class MyFavoritesService {\n    /**\n     * Constructor of MyFavoritesService\n     * @param {Model} myFavoriteModel\n     */\n    constructor( @InjectModel(MyFavorite.name) private myFavoriteModel: Model){}\n\n    /**\n     * Service used to get all favorites for the current user\n     * @param {string} userId\n     * @return {Model}\n     */\n    async getMyFavorites(userId:string){\n        const favorites = await this.myFavoriteModel.find({'userId':userId}).exec();\n        return favorites;\n    }\n\n    /**\n     * Service used to add a favorite for the current user\n     * @param {string} userId\n     * @param {string} favoriteId\n     * @param {string[]} data\n     * @return {Model}\n     */\n    async addMyFavorite(userId,favoriteId, data){\n        const newFavorite = await this.myFavoriteModel.create({'userId':userId, sportFavoriteId:favoriteId,data:data})\n        newFavorite.save()\n        return newFavorite\n    }\n\n    /**\n     * Service used to delete a specific favorite\n     * @param {string} id\n     * @return {}\n     */\n    async delMyFavorite(id){\n        await this.myFavoriteModel.findByIdAndDelete(id);\n        return {\n            message: \"Deleted\"\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MySport.html":{"url":"classes/MySport.html","title":"class - MySport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MySport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/mySport.schema.ts\n        \n\n            \n                Description\n            \n            \n                This collection collects all sports followed for all users. The propery data is not used\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:26\n                            \n                        \n\n                \n                    \n                        data\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:20\n                            \n                        \n\n                \n                    \n                        id sport given in the Model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:13\n                            \n                        \n\n                \n                    \n                        id user given in the Model \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * This collection collects all sports followed for all users. The propery data is not used\n */\n@Schema()\nexport class MySport extends Document {\n  /**\n   * id user given in the Model \n   */\n  @Prop()\n  userId: string;\n\n\n  /**\n   * id sport given in the Model\n   */\n  @Prop()\n  sportId: string;\n\n  /**\n   *  data\n   */\n  @Prop()\n  data: [string];\n}\n\n/**\n * SchemaFactory for the class \n */\nexport const MySportSchema = SchemaFactory.createForClass(MySport);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MySportsController.html":{"url":"controllers/MySportsController.html","title":"controller - MySportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MySportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MySports/MySports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mysports\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'mysports'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMySport\n                            \n                            \n                                    Async\n                                delMySport\n                            \n                            \n                                    Async\n                                getMySports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMySport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:34\n                \n            \n\n\n            \n                \n                    Controller to add a sport in the model MySports\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMySport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:54\n                \n            \n\n\n            \n                \n                    Controller to delete a sport to the model MySports\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMySports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMySports(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:21\n                \n            \n\n\n            \n                \n                    Controller to get all MySports for a specific user\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete, Post, Request, UseGuards, Put, Body } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { MySportsService } from './MySports.service';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n/**\n * Controller used for the route 'mysports'\n */\n@Controller('mysports')\nexport class MySportsController {\n  constructor(private readonly mySportsService: MySportsService) { }\n\n  /**\n   * Controller to get all MySports for a specific user\n   * You need to be connected to access to this route\n   * @param req\n   * @return {Model[]}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async getMySports(@Request() req) {\n    const list = await this.mySportsService.getMySports(req.user.id)\n    return list;\n  }\n\n  /**\n   * Controller to add a sport in the model MySports\n   * You need to be connected to access to this route\n   * @param req\n   * @return {Model}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async addMySport(@Request() req) {\n    let list\n    if (req.body.sportId) {\n      list = await this.mySportsService.addMySport(req.user.id, req.body.sportId)\n    }\n    else {\n      list = {\n        error: \"sportId is mandatory\"\n      }\n    }\n    return list;\n  }\n\n  /**\n   * Controller to delete a sport to the model MySports\n   * @param req\n   * @return {}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  async delMySport(@Request() req) {\n    if (req.body.id) {\n      return await this.mySportsService.delMySport(req.body.id)\n    } else {\n      throw new HttpException({\n        message: 'Id is Mandatory',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MySportsModule.html":{"url":"modules/MySportsModule.html","title":"module - MySportsModule","body":"\n                   \n\n\n\n\n    Modules\n    MySportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MySportsModule\n\n\n\ncluster_MySportsModule_providers\n\n\n\ncluster_MySportsModule_exports\n\n\n\n\nMySportsService \n\nMySportsService \n\n\n\nMySportsModule\n\nMySportsModule\n\nMySportsService  -->\n\nMySportsModule->MySportsService \n\n\n\n\n\nMySportsService\n\nMySportsService\n\nMySportsModule -->\n\nMySportsService->MySportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MySports/MySports.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module used for manage all elements necessary to use Model\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MySportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MySportsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MySportsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MySportsService } from './MySports.service';\nimport { MySportsController } from './MySports.controller';\nimport { MySport, MySportSchema } from '../schemas/mySport.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n/**\n * Module used for manage all elements necessary to use Model\n */\n\n@Module({\n  imports:[MongooseModule.forFeature([{ name: MySport.name, schema: MySportSchema }])],\n  providers: [MySportsService],\n  controllers: [MySportsController],\n  exports: [MySportsService],\n})\nexport class MySportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MySportsService.html":{"url":"injectables/MySportsService.html","title":"injectable - MySportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MySportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MySports/MySports.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used for manage the actions in the Model\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMySport\n                            \n                            \n                                    Async\n                                delMySport\n                            \n                            \n                                    Async\n                                getMySports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mySportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MySports/MySports.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor for MySPortsService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mySportModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMySport(userId, sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:34\n                \n            \n\n\n            \n                \n                    Service used to add a sport in the user's favorite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMySport(sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:45\n                \n            \n\n\n            \n                \n                    Service used to delete a sport in the user's favorite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id presents in the Model\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMySports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMySports(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:23\n                \n            \n\n\n            \n                \n                    Service used to get all sports for a specific user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MySport } from '../schemas/mySport.schema';\nimport { CreateMySportDto } from '../dto/create-mySport.dto';\n\n/**\n * Service used for manage the actions in the Model\n */\n@Injectable()\nexport class MySportsService {\n    /**\n     * Constructor for MySPortsService\n     * @param {Model} mySportModel\n     */\n    constructor( @InjectModel(MySport.name) private mySportModel: Model){}\n\n    /**\n     * Service used to get all sports for a specific user\n     * @param {string} userId\n     * @return {Model[]}\n     */\n    async getMySports(userId){\n        const datas = await this.mySportModel.find({userId:userId}).exec();\n        return datas;\n    }\n\n    /**\n     * Service used to add a sport in the user's favorite\n     * @param {string} userId\n     * @param {string} sportId\n     * @return {Model}\n     */\n    async addMySport(userId, sportId){\n        const newMySport = await this.mySportModel.create({userId:userId, sportId:sportId, data:[]});\n        newMySport.save()\n        return newMySport\n    }\n\n    /**\n     * Service used to delete a sport in the user's favorite\n     * @param {string} sportId Id presents in the Model\n     * @return {}\n     */\n    async delMySport(sportId){\n        await this.mySportModel.findByIdAndDelete(sportId);\n        return {\n            message: \"Deleted ok\"\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pronostic.html":{"url":"classes/Pronostic.html","title":"class - Pronostic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pronostic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/pronostic.schema.ts\n        \n\n            \n                Description\n            \n            \n                This collection collects all pronotics and the commentary associated\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentary\n                            \n                            \n                                matchId\n                            \n                            \n                                type\n                            \n                            \n                                userId\n                            \n                            \n                                winnerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:37\n                            \n                        \n\n                \n                    \n                        commentary optional given when a pronostic is send\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            matchId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:19\n                            \n                        \n\n                \n                    \n                        id match given in the API used\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:25\n                            \n                        \n\n                \n                    \n                        name of the sport \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:13\n                            \n                        \n\n                \n                    \n                        id user given in Model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            winnerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:31\n                            \n                        \n\n                \n                    \n                        name of the winner\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * This collection collects all pronotics and the commentary associated\n */\n@Schema()\nexport class Pronostic extends Document {\n  /** \n   * id user given in Model\n   */\n  @Prop()\n  userId: string;\n\n  /**\n   * id match given in the API used\n   */\n  @Prop()\n  matchId: string;\n\n  /**\n   * name of the sport \n   */\n  @Prop()\n  type: string;\n\n  /**\n   * name of the winner\n   */\n  @Prop()\n  winnerId: string;\n\n  /**\n   * commentary optional given when a pronostic is send\n   */\n  @Prop()\n  commentary: string;\n}\n\n/**\n * SchemaFactory for the class \n */\nexport const PronosticSchema = SchemaFactory.createForClass(Pronostic);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PronosticsController.html":{"url":"controllers/PronosticsController.html","title":"controller - PronosticsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PronosticsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyPronostics/pronostics.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                pronostics\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'pronostics'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req, createPronosticDto: CreatePronosticDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:36\n                \n            \n\n\n            \n                \n                    Controller check if the matchId userId doesn't matchs in the pronostics:\n\nif match : update the matchId userId\nif not : create a new pronostic\nYou need to be connected to access to this route\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPronosticDto\n                                    \n                                                CreatePronosticDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:84\n                \n            \n\n\n            \n                \n                    Controller delete a specific pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:60\n                \n            \n\n\n            \n                \n                    Controller give all pronostics in the database\nYou need to be connected to access to this route\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(matchId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':matchId')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:72\n                \n            \n\n\n            \n                \n                    Controller give all pronostics for one match id\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matchId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Param, Delete, UseGuards, Request } from '@nestjs/common';\nimport { PronosticsService } from './pronostics.service';\nimport { CreatePronosticDto } from '../dto/create-pronostic.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\nimport { Pronostic } from '../schemas/pronostic.schema';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n/**\n * Controller used for the route 'pronostics'\n */\n@Controller('pronostics')\nexport class PronosticsController {\n  /**\n   * Constructor for Pronostics controller\n   * @param pronosticsService\n   * @param {Model} pronosticModel\n   */\n  constructor(private readonly pronosticsService: PronosticsService,\n    @InjectModel(Pronostic.name) private pronosticModel: Model) { }\n\n\n   /**\n  * Controller check if the matchId userId doesn't matchs in the pronostics:\n  * - if match : update the matchId userId\n  * - if not : create a new pronostic\n  * You need to be connected to access to this route\n  * @param {Request}\n  * @param {Body} createPronosticDto\n  * @return {Pronostic}\n  */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(@Request() req, @Body() createPronosticDto: CreatePronosticDto) {\n    const user = req.user.id\n    if (createPronosticDto.matchId && createPronosticDto.winnerId && createPronosticDto.type) {\n      const matchesUserIdMatchId = await this.pronosticModel.find({ userId: user, matchId: createPronosticDto.matchId });\n      if (matchesUserIdMatchId.length != 0) {\n        return await this.pronosticsService.updateOne(user, createPronosticDto);\n      } else {\n        return await this.pronosticsService.create(user, createPronosticDto);\n      }\n    } else {\n      throw new HttpException({\n        error: 404,\n        message: \"userId, matchId, winnerId and type are mandatory. Only commentary is optional\"\n      }, HttpStatus.BAD_REQUEST)\n    }\n  }\n\n  /**\n   * Controller give all pronostics in the database\n   * You need to be connected to access to this route\n   * @return {Pronotic[]}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(): Promise {\n    return this.pronosticsService.findAll();\n  }\n\n  /**\n  * Controller give all pronostics for one match id\n  * You need to be connected to access to this route\n  * @param {string} matchId\n  * @return {Pronostic[]}\n  */\n  @UseGuards(JwtAuthGuard)\n  @Get(':matchId')\n  async findOne(@Param('matchId') matchId: string): Promise {\n    return this.pronosticsService.findPronosticForOneMatchId(matchId);\n  }\n\n  /**\n   * Controller delete a specific pronostic\n   * You need to be connected to access to this route\n   * @param {string} pronostic id\n   * @return  {}\n  */\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async delete(@Param('id') id: string): Promise {\n    if (id) {\n      return this.pronosticsService.deleteOne(id);\n\n    }\n    throw new HttpException({\n      error: 404,\n      message: \"id is mandatory\"\n    }, HttpStatus.BAD_REQUEST)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PronosticsModule.html":{"url":"modules/PronosticsModule.html","title":"module - PronosticsModule","body":"\n                   \n\n\n\n\n    Modules\n    PronosticsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PronosticsModule\n\n\n\ncluster_PronosticsModule_providers\n\n\n\ncluster_PronosticsModule_exports\n\n\n\n\nPronosticsService \n\nPronosticsService \n\n\n\nPronosticsModule\n\nPronosticsModule\n\nPronosticsService  -->\n\nPronosticsModule->PronosticsService \n\n\n\n\n\nPronosticsService\n\nPronosticsService\n\nPronosticsModule -->\n\nPronosticsService->PronosticsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MyPronostics/pronostics.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PronosticsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PronosticsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PronosticsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PronosticsController } from './pronostics.controller';\nimport { PronosticsService } from './pronostics.service';;\nimport { Pronostic, PronosticSchema } from '../schemas/pronostic.schema';\n\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Pronostic.name, schema: PronosticSchema }]),\n  ],\n  controllers: [PronosticsController],\n  providers: [PronosticsService],\n  exports: [PronosticsService],\n})\nexport class PronosticsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PronosticsService.html":{"url":"injectables/PronosticsService.html","title":"injectable - PronosticsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PronosticsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyPronostics/pronostics.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used to manage all action available in PronosticsService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteOne\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findPronosticForOneMatchId\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pronosticModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MyPronostics/pronostics.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for PronosticsService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pronosticModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, createPronosticDto: CreatePronosticDto)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:28\n                \n            \n\n\n            \n                \n                    Service used to create a pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPronosticDto\n                                    \n                                                CreatePronosticDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(id)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:64\n                \n            \n\n\n            \n                \n                    Service used to delete a specific pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        pronostic id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:43\n                \n            \n\n\n            \n                \n                    Service used to give all pronostics in the database\nYou need to be connected to access to this route\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPronosticForOneMatchId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPronosticForOneMatchId(matchId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:53\n                \n            \n\n\n            \n                \n                    Service used to give all pronostics for a specific match\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matchId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(userId, createPronosticDto)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:82\n                \n            \n\n\n            \n                \n                    Service used to update a specific pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the user\n\n                                    \n                                \n                                \n                                    createPronosticDto\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Pronostic } from '../schemas/pronostic.schema';\nimport { HttpException, HttpStatus } from '@nestjs/common'\n\nimport { CreatePronosticDto } from '../dto/create-pronostic.dto';\n\n/**\n * Service used to manage all action available in PronosticsService\n */\n@Injectable()\nexport class PronosticsService {\n  /**\n   * Constructor for PronosticsService\n   */\n  constructor(@InjectModel(Pronostic.name) private pronosticModel: Model\n             ) {\n             }\n\n             /**\n              * Service used to create a pronostic\n              * You need to be connected to access to this route\n              * @param {string} userId\n              * @param {CreatePronosticDto} createPronosticDto\n              * @return {Pronostic}\n              */\n             async create(userId: string, createPronosticDto: CreatePronosticDto): Promise {\n               const createdPronostic = await new this.pronosticModel({\n                 userId: userId,\n                 matchId: createPronosticDto.matchId,\n                 winnerId: createPronosticDto.winnerId,\n                 commentary: (createPronosticDto.commentary ? createPronosticDto.commentary : \"\")\n               })\n               return createdPronostic.save();\n             }\n\n             /**\n              * Service used to give all pronostics in the database\n              * You need to be connected to access to this route\n              * @return {Pronotic[]}\n              */\n             async findAll(): Promise {\n               return this.pronosticModel.find({});\n             }\n\n             /**\n              * Service used to give all pronostics for a specific match\n              * You need to be connected to access to this route\n              * @param {string} matchId\n              * @returns {Pronostic[]}\n              */\n             async findPronosticForOneMatchId(matchId: string): Promise {\n               const pronostic = await this.pronosticModel.find({ 'matchId': matchId }).exec();\n               return pronostic;\n             }\n\n             /**\n              * Service used to delete a specific pronostic\n              * You need to be connected to access to this route\n              * @param {string} id pronostic id\n              * @returns  {JSON}\n              */\n             async deleteOne(id): Promise {\n               const result = await this.pronosticModel.findByIdAndDelete(id);\n               if (!result) {\n                 throw new HttpException({\n                   message: 'No pronostic deleted',\n                 }, HttpStatus.BAD_REQUEST);\n               }\n               else return {\n                 message: \"Pronostic Deleted !\",\n               }\n             }\n\n             /**\n              * Service used to update a specific pronostic\n              * You need to be connected to access to this route\n              * @param {String} userId id of the user\n              * @return  {Pronostic}\n              */\n             async updateOne(userId, createPronosticDto): Promise {\n               const newPronostic = await this.pronosticModel.findOne({ userId: userId, matchId: createPronosticDto.matchId });\n               newPronostic.winnerId = createPronosticDto.winnerId\n               newPronostic.commentary = (createPronosticDto.commentary ? createPronosticDto.commentary : \"\")\n               return newPronostic.save();\n             }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sport.html":{"url":"classes/Sport.html","title":"class - Sport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/sport.schema.ts\n        \n\n            \n                Description\n            \n            \n                Schema used to collect all sports available in the application\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/sport.schema.ts:14\n                            \n                        \n\n                \n                    \n                        name of the sport. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * Schema used to collect all sports available in the application\n */\n@Schema()\nexport class Sport extends Document {\n\n  /**\n   * name of the sport. \n   */\n  @Prop()\n  name: string;\n\n}\n\n/**\n * SchemaFactory for the class \n */\nexport const SportSchema = SchemaFactory.createForClass(Sport);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SportsController.html":{"url":"controllers/SportsController.html","title":"controller - SportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports/sports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sports\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'sports'\nThis routes are used to add or delete a sport to display\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSport\n                            \n                            \n                                    Async\n                                delSport\n                            \n                            \n                                    Async\n                                getSport\n                            \n                            \n                                    Async\n                                getSports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:47\n                \n            \n\n\n            \n                \n                    Controller used to add a sport in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delSport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:67\n                \n            \n\n\n            \n                \n                    Controller used to delete a specific sport in the Model\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSport(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:25\n                \n            \n\n\n            \n                \n                    Controller used to have all details for a specific sport\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id given in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSports()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:35\n                \n            \n\n\n            \n                \n                    Controller used to have all sports in the database\n\n\n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete,Post,Request, UseGuards,Put, Param } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { SportsService } from './sports.service';\n\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n/**\n * Controller used for the route 'sports'\n * This routes are used to add or delete a sport to display\n */\n@Controller('sports')\nexport class SportsController {\n    /**\n     * Constructor for SportsController\n     */\n    constructor(private readonly SportsService: SportsService) {}\n\n    /**\n     * Controller used to have all details for a specific sport\n     * @param {string} id The id given in the database\n     * @return {Model}\n     */\n    @UseGuards(JwtAuthGuard)\n    @Get(':id')\n    async getSport(@Param('id') id: string) {\n        const sport = await this.SportsService.getSport(id)\n        return sport;\n    }\n\n    /**\n     * Controller used to have all sports in the database\n     * @return {Model[]}\n     */\n    @Get()\n    async getSports() {\n        const sports = await this.SportsService.getSports()\n        return sports;\n    }\n\n    /**\n     * Controller used to add a sport in the database\n     * @param {Request} req\n     * @return {Model}\n     */\n    @UseGuards(JwtAuthGuard)\n    @Post()\n    async addSport(@Request() req) {\n        let list\n        if (req.body.name){\n            list = await this.SportsService.addSport(req.body.name)\n        }\n        else {\n            throw new HttpException({\n                message: 'Name is Mandatory',\n            }, HttpStatus.BAD_REQUEST);\n        }\n        return list;\n    }\n\n    /**\n     * Controller used to delete a specific sport in the Model\n     * @param {Request} req\n     * @return {}\n     */\n    @UseGuards(JwtAuthGuard)\n    @Delete()\n    async delSport(@Request() req) {\n        if (req.body.id){\n            return await this.SportsService.delSport(req.body.id)\n        } else {\n            throw new HttpException({\n                message: 'Id is Mandatory',\n            }, HttpStatus.BAD_REQUEST);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SportsModule.html":{"url":"modules/SportsModule.html","title":"module - SportsModule","body":"\n                   \n\n\n\n\n    Modules\n    SportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SportsModule\n\n\n\ncluster_SportsModule_providers\n\n\n\n\nSportsService\n\nSportsService\n\n\n\nSportsModule\n\nSportsModule\n\nSportsModule -->\n\nSportsService->SportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sports/sports.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module for Model\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SportsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SportsController } from './sports.controller';\nimport { SportsService } from './sports.service';\nimport { Sport, SportSchema } from '../schemas/sport.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n/**\n * Module for Model\n */\n@Module({\n  imports:[MongooseModule.forFeature([{ name: Sport.name, schema: SportSchema }])],\n  controllers: [SportsController],\n  providers: [SportsService]\n})\nexport class SportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SportsService.html":{"url":"injectables/SportsService.html","title":"injectable - SportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports/sports.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used for managing the actions available in Model\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSport\n                            \n                            \n                                    Async\n                                delSport\n                            \n                            \n                                    Async\n                                getSport\n                            \n                            \n                                    Async\n                                getSports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/sports/sports.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor of SportsService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SportModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSport(name)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:51\n                \n            \n\n\n            \n                \n                    Service used to add a sport\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delSport(sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:62\n                \n            \n\n\n            \n                \n                    Service used to delete a specific sport\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSport(id)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:25\n                \n            \n\n\n            \n                \n                    Service used to get a specific sport\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSports()\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:40\n                \n            \n\n\n            \n                \n                    Service used to get all sports available in the database\n\n\n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Sport } from '../schemas/sport.schema';\nimport { CreateMySportDto } from '../dto/create-mySport.dto';\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n\n/**\n * Service used for managing the actions available in Model\n */\n@Injectable()\nexport class SportsService {\n    /**\n     * Constructor of SportsService\n     * @param {Model} SportModel\n     */\n    constructor( @InjectModel(Sport.name) private SportModel: Model){}\n\n    /**\n     * Service used to get a specific sport\n     * @param {string} id\n     * @return {Model}\n     */\n    async getSport(id){\n        try {\n            const sport = await this.SportModel.findById(id).orFail();\n            return sport;\n        } catch (error) {\n            throw new HttpException({\n                message: 'Invalid Sport ID',\n              }, HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    /**\n     * Service used to get all sports available in the database\n     * @return {Model[]}\n     */\n    async getSports(){\n            const sport = await this.SportModel.find({});\n            return sport;\n\n    }\n\n    /**\n     * Service used to add a sport\n     * @param {string} name\n     * @return {Model}\n     */\n    async addSport(name){\n        const newSport = await this.SportModel.create({name: name});\n        newSport.save()\n        return newSport\n    }\n\n    /**\n     * Service used to delete a specific sport\n     * @param {string} id\n     * @return {}\n     */\n    async delSport(sportId){\n        await this.SportModel.findByIdAndDelete(sportId);\n        return {\n            message: \"Deleted ok\"\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Matches(passwordRegex)@ValidateIf(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(10)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, ValidateIf} from 'class-validator';\n\nconst passwordRegex = new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})');\n\nexport class UpdateUserDto {\n\n  @MinLength(1)\n  firstName: string;\n\n  @MinLength(1)\n  lastName: string;\n\n  @IsEmail()\n  email: string;\n\n  @MinLength(10)\n  phone: string;\n\n  @Matches(passwordRegex)\n  @ValidateIf( p => p.password !== \"\")\n  password: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/user.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class User extends Document {\n  @Prop()\n  firstName: string;\n\n  @Prop()\n  lastName: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  phone: string;\n\n  @Prop()\n  isAdmin: boolean;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminCreate\n                            \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminCreate(req, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('admin/createUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminUpdate(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('admin/updateUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, Post, Param, Delete, Patch, UseGuards, Request} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\n\nimport { User } from '../schemas/user.schema';\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n@Controller('users')\nexport class UsersController {\nconstructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto) {\n    if(await this.usersService.userExists(createUserDto)){\n      throw new HttpException({\n        message: 'User already Exist',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    return await this.usersService.create(createUserDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(@Request() req): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.findAll();\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async findOne(@Request() req, @Param('id') id: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.findUserById(id);\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async delete(@Request() req, @Param('id') id: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.deleteUser(id);\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch()\n  async update(@Request() req, @Body() body) {\n    const id = req.user.id\n    return this.usersService.update(id, body);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('admin/createUser')\n  async adminCreate(@Request() req,@Body() createUserDto: CreateUserDto) {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      if(await this.usersService.userExists(createUserDto)){\n        throw new HttpException({\n          message: 'User already Exist',\n        }, HttpStatus.BAD_REQUEST);\n      }\n      return await this.usersService.adminCreate(createUserDto);\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch('admin/updateUser')\n  async adminUpdate(@Request() req, @Body() body) {\n    const id = req.user.id\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.adminUpdate(body.id, body);\n    }\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';;\nimport { User, UserSchema } from '../schemas/user.schema';\nimport { MySport, MySportSchema } from '../schemas/mySport.schema';\nimport { MyFavorite, MyFavoriteSchema } from '../schemas/myFavorite.schema';\n\n\n@Module({\n    imports: [\n      MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n      MongooseModule.forFeature([{ name: MySport.name, schema: MySportSchema }]),\n      MongooseModule.forFeature([{ name: MyFavorite.name, schema: MyFavoriteSchema }])\n\n    ],\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n  })\n  export class UsersModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminCreate\n                            \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                isAdmin\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                userExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, mySportModel: Model, myFavoriteModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mySportModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        myFavoriteModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminCreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminUpdate(id, body)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            isAdmin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isAdmin(id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id, body)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            userExists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    userExists(createUserDTO: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../schemas/user.schema';\nimport { MySport } from '../schemas/mySport.schema';\nimport { MyFavorite } from '../schemas/myFavorite.schema';\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\n\nimport { isNull, isError } from 'util';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model,\n  @InjectModel(MySport.name) private mySportModel: Model,\n  @InjectModel(MyFavorite.name) private myFavoriteModel: Model,\n  ) {\n  }\n\n  async isAdmin(id) : Promise {\n    const user = await this.userModel.findById(id);\n    if (!isNull(user)){\n      return user.isAdmin\n    }\n    return false;\n  }\n\n\n  async userExists(createUserDTO: CreateUserDto): Promise {\n    const user = await this.userModel.findOne({ email: createUserDTO.email });\n    if(isNull(user)){\n      return false;\n    }\n    return true;\n  }\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const email = createUserDto.email;\n    const firstName = createUserDto.firstName;\n    const lastName = createUserDto.lastName;\n    const phone = createUserDto.phone;\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n    const createdUser = await new this.userModel({ firstName: firstName, lastName: lastName, phone: phone, email: email, password: hashedPassword ,isAdmin: false });\n    return createdUser.save();\n  }\n\n\n  async findAll(): Promise  {\n    return this.userModel.find().exec();\n  }\n\n  async findOne(email: string): Promise {\n   const user = await this.userModel.find({'email':email}).exec();\n   return user;\n  }\n\n  async findUserById(id: string): Promise {\n    const user = await this.userModel.findById(id);\n    return user;\n  }\n\n  async deleteUser(id) : Promise{\n    const result = await this.userModel.deleteOne({'_id':id}).exec();\n    if(result.deletedCount === 0){\n      throw new HttpException({\n        message: 'No user deleted',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    else return {\n      message : \"User Deleted !\",\n    }\n  }\n\n \n  async update(id, body): Promise{\n    const user = await this.userModel.findById(id);\n    let userUpdated = user;\n    let updated = true;\n    \n    if (body.hasOwnProperty(\"firstName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"firstName\": body.firstName},{new:true,useFindAndModify:false}); \n      updated = true;\n    }\n    if (body.hasOwnProperty(\"lastName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"lastName\": body.lastName},{new:true,useFindAndModify:false});\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"email\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"email\": body.email},{new:true,useFindAndModify:false}); \n      updated = true;\n    } \n    if (body.hasOwnProperty(\"password\")){\n      const hashedPassword = await bcrypt.hash(body.password, 10);\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"password\": hashedPassword},{new:true,useFindAndModify:false}); \n      updated = true;\n    } \n    if (body.hasOwnProperty(\"phone\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"phone\": body.phone},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if(updated){\n      return userUpdated;\n    }\n    else{\n      throw new HttpException({\n        message: 'Nothing Updated',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  async adminCreate(createUserDto: CreateUserDto): Promise {\n    const email = createUserDto.email;\n    const firstName = createUserDto.firstName;\n    const lastName = createUserDto.lastName;\n    const phone = createUserDto.phone;\n    const isAdmin = createUserDto.isAdmin;\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n    const createdUser = await new this.userModel({ firstName: firstName, lastName: lastName, phone: phone, email: email, password: hashedPassword ,isAdmin: isAdmin });\n    return createdUser.save();\n  }\n\n  async adminUpdate(id, body): Promise{\n    const user = await this.userModel.findById(id);\n    let userUpdated = user;\n    let updated = false;\n    if (body.hasOwnProperty(\"firstName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"firstName\": body.firstName},{new:true,useFindAndModify:false});\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"lastName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"lastName\": body.lastName},{new:true,useFindAndModify:false});\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"email\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"email\": body.email},{new:true,useFindAndModify:false}); \n      updated = true;\n    } \n    if (body.hasOwnProperty(\"password\")){\n      const hashedPassword = await bcrypt.hash(body.password, 10);\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"password\": hashedPassword},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if (body.hasOwnProperty(\"phone\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"phone\": body.phone},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if (body.hasOwnProperty(\"isAdmin\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"isAdmin\": body.isAdmin},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if(updated){\n      return userUpdated;\n    }\n    else{\n      throw new HttpException({\n        message: 'Nothing Updated',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/MyFavorites/MyFavorites.controller.ts\n            \n            controller\n            MyFavoritesController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/MyFavorites/MyFavorites.service.ts\n            \n            injectable\n            MyFavoritesService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/MyPronostics/pronostics.controller.ts\n            \n            controller\n            PronosticsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/MyPronostics/pronostics.service.ts\n            \n            injectable\n            PronosticsService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/MySports/MySports.controller.ts\n            \n            controller\n            MySportsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/MySports/MySports.service.ts\n            \n            injectable\n            MySportsService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/create-myFavorite.dto.ts\n            \n            class\n            CreateMyFavoriteDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/dto/create-mySport.dto.ts\n            \n            class\n            CreateMySportDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/dto/create-pronostic.dto.ts\n            \n            class\n            CreatePronosticDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/dto/create-sport.dto.ts\n            \n            class\n            CreateSportDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/dto/create-user.dto.ts\n            \n            variable\n            passwordRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/dto/update-user.dto.ts\n            \n            variable\n            passwordRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/myFavorite.schema.ts\n            \n            class\n            MyFavorite\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/schemas/myFavorite.schema.ts\n            \n            variable\n            MyFavoriteSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/mySport.schema.ts\n            \n            class\n            MySport\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/schemas/mySport.schema.ts\n            \n            variable\n            MySportSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/pronostic.schema.ts\n            \n            class\n            Pronostic\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/schemas/pronostic.schema.ts\n            \n            variable\n            PronosticSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/sport.schema.ts\n            \n            class\n            Sport\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/schemas/sport.schema.ts\n            \n            variable\n            SportSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sports/sports.controller.ts\n            \n            controller\n            SportsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/sports/sports.service.ts\n            \n            injectable\n            SportsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/mongoose : ^7.0.2\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @types/bcrypt : ^3.0.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cookie-parser : ^1.4.5\n        \n            dotenv : ^8.2.0\n        \n            fs : 0.0.1-security\n        \n            mongoose : ^5.10.3\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MyFavoritesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MySportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PronosticsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MyFavoritesModule\n\n\n\ncluster_MyFavoritesModule_exports\n\n\n\ncluster_MyFavoritesModule_providers\n\n\n\ncluster_MySportsModule\n\n\n\ncluster_MySportsModule_exports\n\n\n\ncluster_MySportsModule_providers\n\n\n\ncluster_PronosticsModule\n\n\n\ncluster_PronosticsModule_exports\n\n\n\ncluster_PronosticsModule_providers\n\n\n\ncluster_SportsModule\n\n\n\ncluster_SportsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nAppModule -->\n\nMyFavoritesModule->AppModule\n\n\n\n\n\nMyFavoritesService \n\nMyFavoritesService \n\nMyFavoritesService  -->\n\nMyFavoritesModule->MyFavoritesService \n\n\n\n\n\nMySportsModule\n\nMySportsModule\n\nAppModule -->\n\nMySportsModule->AppModule\n\n\n\n\n\nMySportsService \n\nMySportsService \n\nMySportsService  -->\n\nMySportsModule->MySportsService \n\n\n\n\n\nPronosticsModule\n\nPronosticsModule\n\nAppModule -->\n\nPronosticsModule->AppModule\n\n\n\n\n\nPronosticsService \n\nPronosticsService \n\nPronosticsService  -->\n\nPronosticsModule->PronosticsService \n\n\n\n\n\nSportsModule\n\nSportsModule\n\nAppModule -->\n\nSportsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nMyFavoritesService\n\nMyFavoritesService\n\nMyFavoritesModule -->\n\nMyFavoritesService->MyFavoritesModule\n\n\n\n\n\nMySportsService\n\nMySportsService\n\nMySportsModule -->\n\nMySportsService->MySportsModule\n\n\n\n\n\nPronosticsService\n\nPronosticsService\n\nPronosticsModule -->\n\nPronosticsService->PronosticsModule\n\n\n\n\n\nSportsService\n\nSportsService\n\nSportsModule -->\n\nSportsService->SportsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            MyFavoriteSchema   (src/.../myFavorite.schema.ts)\n                        \n                        \n                            MySportSchema   (src/.../mySport.schema.ts)\n                        \n                        \n                            passwordRegex   (src/.../create-user.dto.ts)\n                        \n                        \n                            passwordRegex   (src/.../update-user.dto.ts)\n                        \n                        \n                            PronosticSchema   (src/.../pronostic.schema.ts)\n                        \n                        \n                            SportSchema   (src/.../sport.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    secret: 'secretKey',\n  }\n                        \n                    \n\n\n            \n        \n\n    src/schemas/myFavorite.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MyFavoriteSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(MyFavorite)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n    src/schemas/mySport.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MySportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(MySport)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n    src/dto/create-user.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRegex\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})')\n                        \n                    \n\n\n            \n        \n\n    src/dto/update-user.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRegex\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})')\n                        \n                    \n\n\n            \n        \n\n    src/schemas/pronostic.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PronosticSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Pronostic)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n    src/schemas/sport.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Sport)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n    src/schemas/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
