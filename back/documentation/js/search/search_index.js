var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.04,1,2.3]],["body/controllers/AppController.html",[0,1.644,1,3.638,2,1.297,3,0.244,4,0.208,5,0.208,6,3.617,7,0.479,8,1.644,9,5.408,10,4.267,11,1.297,12,0.025,13,4.267,14,0.615,15,4.267,16,1.297,17,0.824,18,1.297,19,2.814,20,1.297,21,0.39,22,2.402,23,2.22,24,3.617,25,0.664,26,1.92,27,2.402,28,2.402,29,3.343,30,3.617,31,0.244,32,0.137,33,2.061,34,2.402,35,2.402,36,4.267,37,4.267,38,1.297,39,4.267,40,0.015,41,0.019,42,0.015]],["title/modules/AppModule.html",[43,1.04,44,2.3]],["body/modules/AppModule.html",[1,2.998,2,1.355,3,0.182,4,0.156,5,0.156,12,0.025,21,0.437,25,0.497,29,3.411,30,2.707,31,0.182,32,0.102,40,0.011,41,0.016,42,0.011,43,1.562,44,4.628,45,1.341,46,1.341,47,1.542,48,1.542,49,1.341,50,2.481,51,1.542,52,2.707,53,2.707,54,2.707,55,3.584,56,3.712,57,3.584,58,3.712,59,3.712,60,3.411,61,2.154,62,1.542,63,1.542,64,3.193,65,2.732,66,2.732,67,2.998,68,3.193,69,1.798,70,0.802,71,2.707,72,3.193,73,3.193,74,3.193,75,3.193,76,3.193,77,3.193,78,3.193,79,3.193,80,3.193,81,3.193]],["title/injectables/AppService.html",[29,1.925,82,0.706]],["body/injectables/AppService.html",[3,0.292,4,0.249,5,0.249,12,0.024,21,0.335,25,0.795,29,3.399,31,0.292,32,0.163,40,0.018,41,0.021,42,0.018,82,1.247,83,2.007,84,4.33]],["title/controllers/AuthController.html",[0,1.04,85,2.3]],["body/controllers/AuthController.html",[0,1.283,2,1.283,3,0.241,4,0.206,5,0.206,7,0.474,8,1.633,11,1.283,12,0.025,14,0.609,16,1.283,17,0.815,18,1.283,19,2.795,20,1.283,21,0.388,22,2.376,23,2.196,25,0.657,31,0.241,32,0.135,33,2.039,38,1.283,40,0.015,41,0.019,42,0.015,85,3.612,86,3.578,87,2.376,88,4.221,89,1.914,90,4.553,91,4.221,92,4.221,93,4.221,94,4.221,95,3.578,96,2.376,97,3.074,98,3.155,99,4.221,100,4.221,101,4.221,102,4.221,103,4.221]],["title/modules/AuthModule.html",[43,1.04,55,2.095]],["body/modules/AuthModule.html",[2,1.432,3,0.197,4,0.169,5,0.169,12,0.025,21,0.43,25,0.538,31,0.197,32,0.111,40,0.012,41,0.016,42,0.012,43,1.629,45,1.453,46,1.453,47,1.67,48,1.67,49,1.453,50,2.587,51,1.67,55,4.133,60,3.495,61,2.275,62,1.67,63,1.67,67,3.168,71,2.931,85,3.603,96,1.947,97,3.231,98,2.585,104,2.931,105,2.931,106,3.458,107,3.804,108,3.804,109,3.458,110,4.71,111,3.458,112,3.458,113,3.458,114,3.458,115,2.585,116,2.326,117,2.931,118,3.458,119,2.931,120,2.931,121,3.458,122,3.458,123,3.458,124,3.458]],["title/injectables/AuthService.html",[82,0.706,97,1.779]],["body/injectables/AuthService.html",[3,0.177,4,0.151,5,0.151,7,0.347,8,1.325,12,0.025,14,0.728,16,1.535,17,0.974,18,1.535,20,1.325,21,0.36,25,0.481,31,0.177,32,0.099,38,1.535,40,0.018,41,0.015,42,0.011,82,0.9,83,1.215,89,1.942,90,3.695,97,2.268,115,2.311,125,2.621,126,4.358,127,2.105,128,3.091,129,3.12,130,6.161,131,3.091,132,0.846,133,4.358,134,3.091,135,1.984,136,4.358,137,1.507,138,5.047,139,3.091,140,2.268,141,2.454,142,3.091,143,3.258,144,2.268,145,1.362,146,1.604,147,3.091,148,4.358,149,3.091,150,3.091,151,3.091,152,1.894,153,1.741,154,3.091,155,2.621,156,3.091,157,1.215,158,3.091,159,1.741,160,3.091,161,1.741,162,3.091,163,1.741,164,3.091,165,1.741,166,3.091,167,5.047,168,3.091]],["title/classes/CreateMyFavoriteDto.html",[32,0.109,169,2.3]],["body/classes/CreateMyFavoriteDto.html",[3,0.251,4,0.215,5,0.215,7,0.494,12,0.024,14,0.868,21,0.288,31,0.251,32,0.176,40,0.015,41,0.019,42,0.015,132,1.009,137,1.667,169,3.706,170,1.618,171,3.284,172,3.726,173,2.166,174,3.132,175,3.689,176,2.529,177,4.396,178,4.396,179,4.396,180,2.694,181,2.694,182,2.694,183,2.956,184,2.475]],["title/classes/CreateMySportDto.html",[32,0.109,185,2.095]],["body/classes/CreateMySportDto.html",[3,0.251,4,0.215,5,0.215,7,0.494,12,0.024,14,0.868,21,0.288,31,0.251,32,0.176,40,0.015,41,0.019,42,0.015,132,1.009,137,1.667,170,1.618,171,3.284,173,2.166,174,3.132,175,3.689,176,2.529,180,2.694,181,2.694,182,2.694,183,2.956,184,2.475,185,3.377,186,3.726,187,4.396,188,4.396,189,4.396]],["title/classes/CreatePronosticDto.html",[32,0.109,190,2.095]],["body/classes/CreatePronosticDto.html",[3,0.23,4,0.197,5,0.197,7,0.453,11,1.226,12,0.024,14,0.913,21,0.265,31,0.23,32,0.167,40,0.014,41,0.018,42,0.014,132,1.121,137,1.713,170,1.484,171,3.374,173,2.049,176,2.429,180,2.47,181,2.47,182,2.47,183,3.888,184,2.27,190,3.196,191,3.417,192,3.888,193,3.888,194,3.888,195,4.031,196,4.031,197,4.031,198,4.031,199,4.031]],["title/classes/CreateSportDto.html",[32,0.109,200,2.556]],["body/classes/CreateSportDto.html",[3,0.282,4,0.241,5,0.241,7,0.554,12,0.023,14,0.712,17,1.223,31,0.282,32,0.158,40,0.017,41,0.021,42,0.017,132,0.827,137,1.487,170,1.817,171,3.078,173,2.325,200,4.422,201,4.183,202,4.935]],["title/classes/CreateUserDto.html",[32,0.109,203,2.095]],["body/classes/CreateUserDto.html",[3,0.202,4,0.172,5,0.172,7,0.396,11,1.899,12,0.024,14,0.901,21,0.232,31,0.202,32,0.153,40,0.012,41,0.017,42,0.012,132,1.047,137,1.673,140,2.817,145,0.832,153,3.048,159,3.048,161,3.048,163,3.048,165,3.048,170,1.3,171,3.324,173,1.877,180,3.318,181,2.164,182,2.164,183,3.642,184,1.988,203,2.928,204,2.375,205,2.994,206,4.918,207,2.994,208,4.05,209,3.531,210,2.994,211,4.05,212,3.531,213,4.05,214,2.994,215,2.375,216,1.3,217,2.639,218,2.639,219,2.639,220,3.571,221,2.639,222,2.639]],["title/injectables/JwtAuthGuard.html",[26,1.539,82,0.706]],["body/injectables/JwtAuthGuard.html",[3,0.283,4,0.242,5,0.242,12,0.024,21,0.389,25,0.772,26,2.668,31,0.283,32,0.159,40,0.017,41,0.021,42,0.017,82,1.225,83,1.948,95,4.201,96,2.79,223,4.201,224,4.201,225,2.394,226,4.955]],["title/injectables/JwtStrategy.html",[82,0.706,107,2.095]],["body/injectables/JwtStrategy.html",[3,0.222,4,0.19,5,0.19,7,0.436,8,1.548,12,0.025,14,0.734,16,1.181,17,0.75,18,1.181,20,1.181,21,0.395,25,0.605,31,0.222,32,0.124,38,1.181,40,0.014,41,0.018,42,0.014,82,1.051,83,1.526,89,1.839,96,2.187,107,3.119,116,2.612,117,3.292,120,3.292,127,2.743,132,0.651,140,2.021,155,3.292,157,1.526,159,2.187,161,2.187,163,2.187,165,2.187,225,1.876,227,3.292,228,4.315,229,3.884,230,5.09,231,3.884,232,3.884,233,3.292,234,2.903,235,3.292,236,3.292,237,3.292,238,3.292,239,3.884,240,3.884,241,3.884,242,3.292,243,3.884,244,3.884,245,3.884,246,3.884,247,3.884,248,3.884,249,3.884]],["title/injectables/LocalStrategy.html",[82,0.706,108,2.095]],["body/injectables/LocalStrategy.html",[3,0.211,4,0.181,5,0.181,7,0.415,8,1.499,12,0.025,14,0.711,16,1.499,17,0.951,18,1.499,20,1.125,21,0.388,25,0.576,31,0.211,32,0.118,33,1.787,38,1.125,40,0.013,41,0.017,42,0.013,82,1.018,83,1.454,89,1.795,96,2.083,97,3.295,98,2.765,108,3.02,127,1.787,132,0.826,135,2.178,137,1.591,140,2.565,141,2.775,145,0.872,146,1.362,153,3.328,216,1.362,225,1.787,228,4.178,233,3.136,234,2.765,236,3.136,237,3.136,238,3.136,250,3.136,251,3.699,252,3.699,253,4.928,254,3.699,255,3.136,256,4.928,257,3.699,258,3.699,259,1.787]],["title/classes/MyFavorite.html",[32,0.109,260,1.652]],["body/classes/MyFavorite.html",[3,0.233,4,0.199,5,0.199,7,0.457,11,1.766,12,0.024,14,0.838,21,0.345,31,0.3,32,0.13,40,0.014,41,0.018,42,0.014,70,1.024,132,0.974,137,1.634,145,0.96,170,1.5,173,2.063,174,3.023,175,3.56,176,2.441,225,2.536,260,2.536,261,3.045,262,3.56,263,4.054,264,4.073,265,4.073,266,4.073,267,2.206,268,2.496,269,1.5,270,2.496,271,3.453]],["title/controllers/MyFavoritesController.html",[0,1.04,66,2.095]],["body/controllers/MyFavoritesController.html",[0,0.754,2,0.754,3,0.142,4,0.121,5,0.121,7,0.279,8,1.129,11,1.353,12,0.025,14,0.642,16,1.353,17,0.859,18,1.353,19,2.89,20,1.353,21,0.292,22,1.397,23,1.932,25,0.386,26,1.116,27,1.397,28,1.397,31,0.142,32,0.079,33,1.198,34,1.397,35,2.506,38,1.751,40,0.009,41,0.013,42,0.009,66,2.275,87,1.397,89,1.961,135,1.459,145,0.584,146,1.639,174,1.291,175,3.403,260,2.387,272,2.103,273,2.48,274,3.148,275,3.148,276,3.713,277,2.48,278,1.668,279,2.48,280,3.148,281,3.403,282,3.148,283,4.941,284,1.794,285,4.608,286,4.151,287,3.735,288,4.151,289,3.694,290,2.48,291,1.854,292,2.48,293,3.028,294,3.694,295,2.776,296,2.48,297,1.668,298,2.48,299,3.148,300,1.668,301,1.854,302,2.506,303,2.103,304,2.48,305,2.48,306,4.151,307,2.48,308,2.48,309,4.451,310,3.713,311,2.48,312,2.498,313,2.498,314,2.48,315,2.48]],["title/modules/MyFavoritesModule.html",[43,1.04,56,2.095]],["body/modules/MyFavoritesModule.html",[2,1.565,3,0.226,4,0.193,5,0.193,12,0.024,17,0.762,21,0.413,25,0.615,31,0.226,32,0.126,40,0.014,41,0.018,42,0.014,43,1.74,45,1.659,46,1.659,47,1.908,48,1.908,49,1.659,50,2.765,51,2.765,56,4.024,61,2.486,62,1.908,63,1.908,66,3.508,69,2.224,70,0.993,260,1.908,267,1.659,270,3.153,302,3.876,303,3.348,316,3.348,317,3.348,318,3.348,319,3.949,320,3.949,321,2.656,322,2.952,323,3.348]],["title/injectables/MyFavoritesService.html",[82,0.706,302,1.925]],["body/injectables/MyFavoritesService.html",[3,0.189,4,0.161,5,0.161,7,0.371,8,1.387,12,0.025,14,0.813,16,1.715,17,1.088,18,1.715,20,1.59,21,0.388,25,0.514,31,0.189,32,0.106,38,1.59,40,0.012,41,0.016,42,0.012,70,0.83,82,0.942,83,1.297,89,2.103,127,2.204,132,0.553,144,1.718,145,1.075,146,1.925,157,1.297,169,2.22,174,2.721,176,1.917,260,1.595,269,1.68,274,3.868,275,3.868,284,2.859,299,3.868,302,2.569,321,2.22,324,2.799,325,4.562,326,3.301,327,3.301,328,3.868,329,3.301,330,4.562,331,3.301,332,4.562,333,3.301,334,4.562,335,3.301,336,1.859,337,1.718,338,3.301,339,2.799,340,3.301,341,3.301,342,4.562,343,3.301,344,3.301,345,3.301,346,3.301,347,1.485,348,2.023]],["title/classes/MySport.html",[32,0.109,349,1.652]],["body/classes/MySport.html",[3,0.223,4,0.191,5,0.191,7,0.439,11,1.732,12,0.024,14,0.822,21,0.336,31,0.292,32,0.125,40,0.014,41,0.018,42,0.014,70,0.983,132,0.955,137,1.616,145,0.921,170,1.439,173,2.009,174,2.964,176,2.393,225,2.47,262,3.491,263,4.015,267,2.148,268,2.396,269,1.439,349,2.47,350,2.922,351,3.831,352,3.91,353,3.91,354,3.91,355,5.112,356,5.112,357,3.821,358,5.112,359,4.334,360,2.396,361,3.314]],["title/controllers/MySportsController.html",[0,1.04,65,2.095]],["body/controllers/MySportsController.html",[0,0.811,2,0.811,3,0.152,4,0.13,5,0.13,7,0.3,8,1.192,11,1.412,12,0.025,14,0.67,16,1.412,17,0.897,18,1.412,19,2.968,20,1.412,21,0.336,22,1.502,23,2.039,25,0.61,26,1.2,27,1.502,28,1.502,31,0.152,32,0.085,33,1.289,34,1.502,35,2.616,38,1.734,40,0.009,41,0.014,42,0.009,65,2.402,87,1.502,89,1.999,135,1.048,145,0.629,146,1.71,157,1.048,175,1.635,216,0.982,259,1.289,278,1.794,280,2.261,281,3.138,282,2.261,284,1.289,285,4.077,286,3.472,287,3.125,288,3.472,289,2.929,291,1.994,293,2.847,294,2.929,297,1.794,300,1.794,301,1.994,306,4.263,312,1.794,313,2.636,347,1.2,349,2.244,351,2.636,362,2.261,363,3.827,364,3.322,365,3.322,366,3.322,367,2.667,368,2.667,369,2.667,370,2.667,371,2.667,372,2.667,373,2.616,374,2.261,375,2.039,376,1.388,377,1.502,378,2.667,379,2.667,380,2.667,381,2.667,382,3.919,383,2.667,384,2.667,385,2.261,386,2.667,387,1.388]],["title/modules/MySportsModule.html",[43,1.04,57,2.095]],["body/modules/MySportsModule.html",[2,1.565,3,0.226,4,0.193,5,0.193,12,0.024,17,0.762,21,0.413,25,0.615,31,0.226,32,0.126,40,0.014,41,0.018,42,0.014,43,1.74,45,1.659,46,1.659,47,1.908,48,1.908,49,1.659,50,2.765,51,2.765,57,4.024,61,2.486,62,1.908,63,1.908,65,3.508,69,2.224,70,0.993,267,1.659,322,2.952,349,1.908,360,3.153,373,3.876,374,3.348,388,3.348,389,3.348,390,3.348,391,3.949,392,3.949,393,2.656,394,3.348]],["title/injectables/MySportsService.html",[82,0.706,373,1.925]],["body/injectables/MySportsService.html",[3,0.176,4,0.151,5,0.151,7,0.346,8,1.323,12,0.025,14,0.79,16,1.665,17,1.057,18,1.665,20,1.532,21,0.379,25,0.48,31,0.176,32,0.099,38,1.665,40,0.011,41,0.015,42,0.011,70,0.775,82,0.898,83,1.212,89,2.037,127,2.101,132,0.517,144,1.604,145,1.025,146,1.856,152,1.889,157,1.212,174,2.264,176,2.3,185,1.889,269,1.601,284,2.894,295,2.305,336,1.736,337,1.604,347,1.387,348,1.889,349,1.489,351,3.682,357,2.305,363,2.305,364,3.688,365,3.688,366,3.688,373,2.449,393,2.074,395,2.614,396,3.083,397,3.083,398,3.688,399,3.083,400,3.083,401,4.35,402,3.083,403,4.35,404,3.083,405,2.614,406,2.614,407,3.083,408,3.083,409,3.688,410,3.083,411,3.083,412,3.083,413,3.083,414,4.35,415,3.083,416,3.083,417,3.083,418,2.614,419,1.604,420,2.305,421,2.614,422,3.083,423,2.614]],["title/classes/Pronostic.html",[32,0.109,424,1.925]],["body/classes/Pronostic.html",[3,0.213,4,0.182,5,0.182,7,0.419,11,1.878,12,0.024,14,0.891,21,0.326,31,0.283,32,0.12,40,0.013,41,0.017,42,0.013,70,0.939,132,1.103,137,1.69,145,0.88,170,1.375,173,1.949,176,2.34,192,3.746,193,3.746,194,3.746,225,2.396,262,3.413,263,4.155,267,2.084,268,2.289,269,1.375,424,2.793,425,2.791,426,3.734,427,3.734,428,3.734,429,3.734,430,3.734,431,2.512,432,3.166]],["title/controllers/PronosticsController.html",[0,1.04,433,2.3]],["body/controllers/PronosticsController.html",[0,0.589,2,0.589,3,0.111,4,0.095,5,0.095,7,0.217,8,0.933,11,1.318,12,0.025,14,0.625,16,1.159,17,0.736,18,1.318,19,1.597,20,1.318,21,0.359,22,1.091,23,1.597,25,0.478,26,0.872,27,1.091,28,1.091,31,0.111,32,0.062,33,0.936,34,1.091,35,2.441,38,1.71,40,0.007,41,0.011,42,0.007,70,0.487,87,1.091,89,1.938,132,0.727,135,1.206,137,1.373,141,2.83,144,1.008,145,0.723,146,1.403,152,1.187,157,2.07,176,2.112,190,3.447,192,1.303,193,3.784,194,1.303,216,1.13,259,1.482,269,0.713,278,1.303,281,1.881,284,1.482,285,4.083,286,4.083,287,3.674,288,4.083,293,2.896,294,3.241,297,1.303,300,1.303,312,2.064,313,2.064,336,1.091,337,1.008,347,1.381,375,1.983,376,1.008,377,1.091,387,1.597,420,3.241,424,3.462,433,2.064,434,1.642,435,4.725,436,2.916,437,2.916,438,2.294,439,1.937,440,1.937,441,3.069,442,4.335,443,2.294,444,3.069,445,1.937,446,1.642,447,1.937,448,1.937,449,4.335,450,3.069,451,3.069,452,1.937,453,1.937,454,1.937,455,3.069,456,1.448,457,2.146,458,1.642,459,1.642,460,1.448,461,1.937,462,1.937,463,1.642,464,1.937,465,1.642,466,2.602,467,1.642,468,1.937,469,1.937,470,1.642,471,1.937,472,1.937,473,1.937,474,3.069,475,1.937,476,1.937,477,1.937,478,1.937,479,1.937,480,1.642,481,1.937,482,1.937]],["title/modules/PronosticsModule.html",[43,1.04,58,2.095]],["body/modules/PronosticsModule.html",[2,1.551,3,0.223,4,0.19,5,0.19,12,0.025,17,0.752,21,0.411,25,0.607,31,0.223,32,0.125,40,0.014,41,0.018,42,0.014,43,1.729,45,1.637,46,1.637,47,1.882,48,1.882,49,1.637,50,2.747,51,2.747,58,4.011,61,2.464,62,1.882,63,1.882,67,2.621,69,2.194,70,0.979,267,1.637,424,2.194,431,3.431,433,3.825,457,3.868,458,3.303,460,2.913,483,3.303,484,3.303,485,3.303,486,3.897,487,3.897,488,3.303,489,3.897]],["title/injectables/PronosticsService.html",[82,0.706,457,1.925]],["body/injectables/PronosticsService.html",[3,0.142,4,0.122,5,0.122,7,0.28,8,1.133,12,0.025,14,0.802,16,1.612,17,1.023,18,1.612,20,1.612,21,0.365,25,0.58,31,0.142,32,0.08,38,1.612,40,0.016,41,0.013,42,0.009,70,0.626,82,0.769,83,0.979,89,2.115,127,1.203,132,0.748,137,1.121,141,3.474,144,1.296,145,1.167,146,1.823,157,0.979,176,2.337,190,3.782,192,1.675,193,3.565,194,1.675,216,1.371,259,1.203,269,1.371,284,2.561,336,1.402,337,1.296,347,1.676,348,2.283,375,1.938,376,1.296,387,1.296,424,2.984,436,2.505,437,3.331,457,2.097,459,2.112,460,1.862,463,3.158,466,3.158,467,3.158,470,3.158,490,2.112,491,3.725,492,3.725,493,3.725,494,2.491,495,2.491,496,2.491,497,3.725,498,2.491,499,3.725,500,2.491,501,2.491,502,3.725,503,2.491,504,3.725,505,2.491,506,2.491,507,2.491,508,2.491,509,2.491,510,4.952,511,2.491,512,2.491,513,2.491,514,2.491,515,2.491,516,2.491,517,2.491,518,2.491]],["title/classes/Sport.html",[32,0.109,419,1.779]],["body/classes/Sport.html",[3,0.256,4,0.219,5,0.219,7,0.503,11,1.362,12,0.024,14,0.646,17,1.172,21,0.366,31,0.318,32,0.143,40,0.016,41,0.019,42,0.016,70,1.126,132,0.751,137,1.401,145,1.056,170,1.649,173,2.191,225,2.694,262,3.721,263,3.721,267,2.343,268,2.745,269,1.649,419,2.902,519,3.349,520,4.48,521,3.013,522,3.798]],["title/controllers/SportsController.html",[0,1.04,523,2.3]],["body/controllers/SportsController.html",[0,0.882,2,0.882,3,0.166,4,0.142,5,0.142,7,0.326,8,1.266,11,1.619,12,0.025,14,0.768,16,1.481,17,1.028,18,1.481,19,2.771,20,1.619,21,0.349,23,1.509,24,2.458,25,0.648,26,1.305,27,1.632,28,1.632,31,0.166,32,0.093,33,1.401,34,1.632,35,2.743,38,1.619,40,0.01,41,0.015,42,0.01,87,1.632,89,2.119,132,0.486,137,1.224,145,0.981,146,1.96,157,1.915,216,1.533,259,2.011,278,1.95,291,2.167,293,1.777,306,3.642,313,2.8,347,1.873,357,3.642,375,2.535,376,1.509,377,1.632,385,2.458,387,2.167,419,2.167,456,2.167,523,2.8,524,2.458,525,3.53,526,3.53,527,3.53,528,4.514,529,2.899,530,2.899,531,2.899,532,2.899,533,2.458,534,2.458,535,2.899,536,2.899,537,2.899,538,2.743,539,2.458,540,2.899,541,2.458,542,2.899,543,2.899,544,2.899,545,2.899,546,2.899,547,2.899,548,2.899,549,2.899]],["title/modules/SportsModule.html",[43,1.04,59,2.095]],["body/modules/SportsModule.html",[2,1.604,3,0.234,4,0.2,5,0.2,12,0.025,17,0.792,21,0.418,25,0.639,31,0.234,32,0.131,40,0.014,41,0.018,42,0.014,43,1.772,45,1.723,46,1.723,47,1.982,48,1.982,49,1.723,50,2.816,51,1.982,59,3.992,61,2.548,62,1.982,63,1.982,69,2.31,70,1.031,267,1.723,322,3.066,419,2.135,521,3.547,523,3.92,538,3.668,539,3.478,550,3.478,551,3.478,552,4.102,553,4.102,554,3.478,555,4.102]],["title/injectables/SportsService.html",[82,0.706,538,1.925]],["body/injectables/SportsService.html",[3,0.164,4,0.14,5,0.14,7,0.322,8,1.257,12,0.025,14,0.81,16,1.612,17,1.129,18,1.612,20,1.612,21,0.384,25,0.644,31,0.164,32,0.092,38,1.708,40,0.01,41,0.014,42,0.01,70,0.722,82,0.854,83,1.128,89,2.115,127,1.997,132,0.481,144,1.494,145,1.142,146,1.951,157,1.904,185,1.759,216,1.057,259,1.387,269,1.522,284,2.714,295,2.146,312,1.931,336,1.616,337,1.494,347,1.86,348,1.759,351,2.781,363,2.146,375,2.151,376,1.494,377,1.616,387,1.494,405,2.434,409,2.434,418,2.434,419,3.137,420,2.146,421,2.434,423,2.434,525,3.505,526,3.505,527,3.505,528,4.493,533,3.505,538,2.328,554,2.434,556,2.434,557,2.871,558,2.871,559,4.134,560,4.134,561,2.871,562,4.134,563,2.871,564,2.871,565,2.871,566,2.871,567,2.871,568,2.871,569,2.871,570,2.871,571,2.871,572,4.134,573,2.871,574,2.871,575,2.871]],["title/classes/UpdateUserDto.html",[32,0.109,576,2.095]],["body/classes/UpdateUserDto.html",[3,0.207,4,0.177,5,0.177,7,0.406,11,1.858,12,0.024,14,0.882,21,0.237,31,0.207,32,0.155,40,0.013,41,0.017,42,0.013,132,1.024,137,1.681,140,2.853,145,0.853,153,3.086,159,3.086,161,3.086,165,3.086,170,1.332,173,1.909,180,3.359,181,2.218,182,2.218,184,2.037,204,2.434,205,3.068,206,4.967,207,3.068,210,3.068,211,3.068,213,4.117,214,3.068,215,2.434,216,1.332,217,2.705,218,2.705,219,2.705,220,3.63,221,2.705,222,2.705,576,2.976,577,4.703,578,3.619,579,3.619,580,4.857,581,3.619,582,3.619]],["title/classes/User.html",[32,0.109,135,1.344]],["body/classes/User.html",[3,0.205,4,0.175,5,0.175,7,0.403,11,1.908,12,0.024,14,0.905,21,0.317,31,0.276,32,0.115,40,0.012,41,0.017,42,0.012,70,0.901,132,1.052,135,1.897,137,1.678,140,2.839,145,0.845,153,3.072,159,3.072,161,3.072,163,3.072,165,3.072,170,1.32,173,1.897,208,4.092,225,2.332,262,3.344,263,4.183,267,2.028,268,2.197,269,1.32,583,2.68,584,3.585,585,3.585,586,3.585,587,3.585,588,3.585,589,3.585,590,2.411,591,3.039]],["title/controllers/UsersController.html",[0,1.04,592,2.3]],["body/controllers/UsersController.html",[0,0.571,2,0.571,3,0.107,4,0.092,5,0.092,7,0.211,8,0.91,11,1.582,12,0.025,14,0.751,16,1.582,17,1.004,18,1.582,19,3.033,20,1.582,21,0.342,22,1.057,23,1.943,25,0.466,26,0.845,27,1.057,28,1.057,31,0.107,32,0.06,33,0.907,34,1.057,35,2.792,38,1.582,40,0.007,41,0.01,42,0.007,87,1.057,89,2.099,129,1.943,132,0.714,135,1.467,137,1.246,141,2.792,145,1.226,146,1.916,157,2.123,163,2.62,203,3.636,216,1.916,259,2.514,281,3.572,287,3.13,293,2.288,297,1.263,300,1.263,301,1.404,337,0.977,347,2.341,359,1.592,375,2.812,376,0.977,377,1.057,387,1.558,436,2.014,437,2.014,438,2.238,443,2.238,446,1.592,456,1.404,465,2.538,480,1.592,534,1.592,541,1.592,576,1.151,592,2.014,593,1.592,594,2.538,595,2.538,596,1.878,597,1.878,598,1.878,599,1.878,600,1.878,601,1.878,602,1.592,603,1.878,604,1.878,605,1.878,606,1.878,607,1.878,608,1.878,609,1.878,610,1.878,611,1.878,612,1.878,613,2.994,614,1.592,615,2.538,616,1.592,617,1.404,618,1.878,619,1.878,620,2.994,621,2.994,622,2.994,623,2.994,624,1.878,625,1.878,626,4.654,627,4.654,628,4.654,629,4.654,630,1.878,631,1.878,632,2.994,633,1.878,634,1.878,635,1.878,636,1.878,637,1.878,638,1.878,639,1.878,640,1.878,641,1.878,642,1.878,643,1.878,644,1.878]],["title/modules/UsersModule.html",[43,1.04,60,1.925]],["body/modules/UsersModule.html",[2,1.477,3,0.207,4,0.177,5,0.177,12,0.025,17,1.058,21,0.422,25,0.563,31,0.207,32,0.116,40,0.013,41,0.017,42,0.013,43,1.667,45,1.52,46,1.52,47,1.748,48,1.748,49,1.52,50,2.648,51,2.648,60,3.619,61,2.346,62,1.748,63,1.748,67,2.434,69,2.037,70,0.909,129,3.535,135,1.422,260,1.748,267,2.303,270,2.976,321,2.434,323,3.068,349,1.748,360,2.976,393,2.434,394,3.068,488,4.647,590,3.267,592,3.687,614,3.068,617,2.705,645,3.068,646,3.068,647,3.068,648,3.619,649,3.619,650,3.619]],["title/injectables/UsersService.html",[82,0.706,129,1.779]],["body/injectables/UsersService.html",[3,0.076,4,0.065,5,0.065,7,0.149,8,0.684,12,0.025,14,0.753,16,1.541,17,0.978,18,1.541,20,1.541,21,0.342,25,0.35,31,0.076,32,0.042,38,1.626,40,0.008,41,0.008,42,0.005,70,0.333,82,0.465,83,0.521,89,2.076,127,0.641,129,1.171,132,0.703,135,2.148,137,1.054,140,2.446,141,3.384,143,1.681,144,1.524,145,1.441,146,2.284,152,0.813,153,1.267,157,1.517,159,2.361,161,2.361,163,2.361,165,2.361,203,3.349,216,1.421,242,2.923,259,1.415,260,0.641,269,0.828,281,2.57,284,2.521,321,0.892,328,2.482,336,0.747,337,0.69,339,1.125,347,1.552,348,1.378,349,0.641,375,1.794,376,0.69,377,0.747,387,1.524,393,0.892,398,2.482,406,1.125,436,1.513,437,2.319,438,1.681,443,1.681,576,0.813,594,1.907,595,1.907,602,1.907,615,1.907,616,1.125,617,0.992,651,1.125,652,2.249,653,2.249,654,2.249,655,1.327,656,1.327,657,2.249,658,2.249,659,1.327,660,2.249,661,1.327,662,1.327,663,2.249,664,1.327,665,1.327,666,2.249,667,1.327,668,2.249,669,1.327,670,2.249,671,1.327,672,2.249,673,1.327,674,2.249,675,1.327,676,1.327,677,1.327,678,1.327,679,1.327,680,3.448,681,1.327,682,1.327,683,1.327,684,2.928,685,1.327,686,5.464,687,2.249,688,2.249,689,2.249,690,4.193,691,2.249,692,2.923,693,2.249,694,2.249,695,2.249,696,1.327,697,1.327,698,1.327,699,1.327,700,5.66,701,5.66,702,2.249,703,5.218,704,2.249,705,2.249,706,2.249,707,2.249,708,2.249,709,2.249,710,2.249,711,2.249,712,2.249,713,2.249,714,2.249,715,2.249,716,2.249,717,2.249,718,2.249,719,2.249,720,2.249,721,1.327,722,1.327,723,1.327,724,1.327]],["title/coverage.html",[725,3.494]],["body/coverage.html",[0,1.774,1,1.739,5,0.126,6,2.191,12,0.025,26,1.163,29,1.455,32,0.202,40,0.009,41,0.013,42,0.009,49,1.086,65,1.584,66,1.584,82,1.286,84,2.191,85,1.739,86,2.191,97,1.345,107,1.584,108,1.584,116,1.739,125,2.191,129,1.345,132,0.433,135,1.016,152,4.29,169,1.739,171,2.934,172,2.191,185,1.584,186,2.191,190,1.584,191,2.191,200,1.932,201,2.191,203,1.584,204,3.392,215,2.575,216,0.952,223,2.191,224,2.191,227,2.191,250,2.191,260,1.249,261,2.862,270,1.584,272,2.191,289,4.479,302,1.455,324,2.191,349,1.249,350,2.862,360,1.584,362,2.191,373,1.455,395,2.191,419,1.345,424,1.455,425,2.862,431,1.739,433,1.739,434,2.191,457,1.455,490,2.191,519,2.862,521,1.739,523,1.739,524,2.191,538,1.455,556,2.191,576,1.584,577,2.862,583,2.862,590,1.739,592,1.739,593,2.191,651,2.191,725,1.932,726,2.585,727,2.585,728,2.585,729,2.585,730,2.585,731,4.561,732,2.585,733,2.585,734,4.561,735,5.384,736,5.043,737,6.317,738,2.191,739,3.829,740,5.043,741,2.191,742,2.585,743,2.585,744,2.585,745,2.585,746,2.585,747,2.585,748,2.585]],["title/dependencies.html",[46,1.729,749,2.852]],["body/dependencies.html",[12,0.025,25,0.636,32,0.168,40,0.014,41,0.018,42,0.014,46,1.717,70,1.027,96,2.301,115,3.055,143,3.055,184,2.301,234,4.593,235,3.465,255,3.465,269,1.505,750,5.819,751,4.088,752,5.262,753,4.088,754,4.088,755,4.088,756,4.088,757,4.088,758,4.088,759,4.088,760,4.088,761,4.088,762,4.088,763,4.088,764,4.088,765,4.088,766,4.088,767,4.088,768,4.088,769,4.088,770,4.088,771,4.088,772,4.088,773,4.088,774,4.088,775,4.088,776,4.088,777,4.088,778,4.088,779,4.088,780,4.088,781,4.088,782,4.088,783,4.088]],["title/miscellaneous/functions.html",[784,1.918,785,3.488]],["body/miscellaneous/functions.html",[7,0.597,12,0.022,40,0.019,41,0.022,42,0.019,49,2.746,741,4.507,784,3.576,785,4.507,786,5.317]],["title/index.html",[7,0.32,787,2.852,788,2.852]],["body/index.html",[4,0.186,12,0.024,40,0.013,41,0.018,42,0.013,725,2.846,789,3.808,790,3.808,791,5.024,792,3.808,793,3.808,794,3.808,795,3.808,796,3.808,797,3.808,798,3.808,799,3.808,800,3.808,801,3.808,802,5.623,803,3.808,804,3.808,805,3.808,806,3.808,807,6.509,808,3.808,809,3.808,810,3.808,811,6.384,812,3.808,813,3.808,814,5.024,815,3.808,816,3.808,817,3.808,818,3.808,819,5.024,820,5.024,821,3.808,822,3.808,823,3.808,824,5.024,825,5.024,826,3.808,827,3.808,828,3.808,829,3.808,830,3.808,831,3.228,832,3.808,833,3.808,834,3.808,835,3.808,836,3.808,837,3.808,838,3.808,839,3.808,840,3.808,841,3.808,842,3.808,843,3.808,844,3.808,845,3.808,846,3.808,847,3.808,848,3.808,849,3.808]],["title/modules.html",[45,1.964]],["body/modules.html",[12,0.02,40,0.016,41,0.02,42,0.016,44,3.172,45,1.981,55,2.89,56,2.89,57,2.89,58,2.89,59,2.89,60,2.655,831,5.791,850,6.831,851,6.831,852,6.831]],["title/overview.html",[853,3.962]],["body/overview.html",[2,0.958,12,0.024,29,2.871,40,0.011,41,0.015,42,0.011,43,0.958,44,4.581,45,1.323,46,1.323,47,1.522,48,1.522,49,1.323,50,1.522,51,1.522,52,2.67,53,2.67,54,2.67,55,4.032,56,3.696,57,3.696,58,3.696,59,3.566,60,3.487,61,2.133,62,1.522,63,1.522,83,1.238,97,2.653,104,2.67,105,2.67,107,3.125,108,3.125,129,3.223,170,1.16,302,3.487,316,2.67,317,2.67,318,2.67,373,3.487,388,2.67,389,2.67,390,2.67,457,3.487,483,2.67,484,2.67,485,2.67,538,2.871,550,2.67,551,2.67,645,2.67,646,2.67,647,2.67,692,2.67,853,2.67,854,4.416,855,3.15]],["title/miscellaneous/variables.html",[784,1.918,856,3.488]],["body/miscellaneous/variables.html",[7,0.433,12,0.024,40,0.013,41,0.018,42,0.013,116,3.409,119,3.271,132,0.647,171,2.008,204,4.042,215,4.042,216,1.866,217,3.788,218,3.788,219,3.788,220,4.492,221,3.788,222,3.788,261,2.884,270,3.106,271,3.271,350,2.884,360,3.106,361,3.271,425,2.884,431,3.409,432,3.271,519,2.884,521,3.409,522,3.271,577,2.884,583,2.884,590,3.409,591,3.271,738,3.271,784,2.595,856,3.271,857,3.858,858,3.858,859,3.858,860,3.858,861,3.858,862,3.858,863,3.858,864,3.858,865,3.858,866,6.626,867,6.626,868,3.858]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["1/4",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{}}}],["11",{"_index":855,"title":{},"body":{"overview.html":{}}}],["2",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["2.0.0",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["25",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["3.0.0",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["4/5",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":474,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["5.0.0",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["5.10.3",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":854,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["8.2.0",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["9])))(?=.{6",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["9]))|((?=.*[a",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["access",{"_index":287,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["access_token",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":280,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{}}}],["addmyfavorite",{"_index":274,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["addmyfavorite(@request",{"_index":308,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["addmyfavorite(req",{"_index":277,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["addmyfavorite(userid",{"_index":329,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["addmyfavorite(userid,favoriteid",{"_index":341,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["addmysport",{"_index":364,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["addmysport(@request",{"_index":381,"title":{},"body":{"controllers/MySportsController.html":{}}}],["addmysport(req",{"_index":367,"title":{},"body":{"controllers/MySportsController.html":{}}}],["addmysport(userid",{"_index":399,"title":{},"body":{"injectables/MySportsService.html":{}}}],["addsport",{"_index":525,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["addsport(@request",{"_index":545,"title":{},"body":{"controllers/SportsController.html":{}}}],["addsport(name",{"_index":560,"title":{},"body":{"injectables/SportsService.html":{}}}],["addsport(req",{"_index":529,"title":{},"body":{"controllers/SportsController.html":{}}}],["admincreate",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admincreate(@request",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreate(createuserdto",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["admincreate(req",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminupdate",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["adminupdate(@request",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminupdate(id",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdate(req",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["already",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{}}}],["amazing",{"_index":832,"title":{},"body":{"index.html":{}}}],["angular",{"_index":800,"title":{},"body":{"index.html":{}}}],["api",{"_index":409,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["app",{"_index":809,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appcontroller,mysportscontroller,myfavoritescontroller",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":797,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":44,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":29,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":420,"title":{},"body":{"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/SportsService.html":{}}}],["association",{"_index":444,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["async",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":224,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":85,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":226,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":55,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule,mysportsmodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["author",{"_index":842,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":97,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":833,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(body.password",{"_index":713,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["body",{"_index":281,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["body.email},{new:true,usefindandmodify:false",{"_index":711,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.firstname},{new:true,usefindandmodify:false",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"email",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"firstname",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"isadmin",{"_index":722,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"lastname",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"password",{"_index":712,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"phone",{"_index":716,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.isadmin},{new:true,usefindandmodify:false",{"_index":724,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.lastname},{new:true,usefindandmodify:false",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.phone},{new:true,usefindandmodify:false",{"_index":718,"title":{},"body":{"injectables/UsersService.html":{}}}],["boolean",{"_index":208,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":852,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":850,"title":{},"body":{"modules.html":{}}}],["building",{"_index":792,"title":{},"body":{"index.html":{}}}],["catch",{"_index":569,"title":{},"body":{"injectables/SportsService.html":{}}}],["class",{"_index":32,"title":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":170,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule",{"_index":316,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule_exports",{"_index":317,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule_providers",{"_index":318,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule",{"_index":388,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule_exports",{"_index":389,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule_providers",{"_index":390,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule",{"_index":483,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule_exports",{"_index":484,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule_providers",{"_index":485,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_sportsmodule",{"_index":550,"title":{},"body":{"modules/SportsModule.html":{},"overview.html":{}}}],["cluster_sportsmodule_providers",{"_index":551,"title":{},"body":{"modules/SportsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":645,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":646,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":647,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collect",{"_index":356,"title":{},"body":{"classes/MySport.html":{}}}],["collection",{"_index":355,"title":{},"body":{"classes/MySport.html":{}}}],["commentary",{"_index":192,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["connected",{"_index":286,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{}}}],["const",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(pronostic.name",{"_index":506,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":251,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(myfavoritemodel",{"_index":326,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["constructor(mysportmodel",{"_index":396,"title":{},"body":{"injectables/MySportsService.html":{}}}],["constructor(private",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["constructor(pronosticmodel",{"_index":494,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["constructor(sportmodel",{"_index":557,"title":{},"body":{"injectables/SportsService.html":{}}}],["constructor(usermodel",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('myfavorites",{"_index":304,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["controller('mysports",{"_index":378,"title":{},"body":{"controllers/MySportsController.html":{}}}],["controller('pronostics",{"_index":461,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["controller('sports",{"_index":540,"title":{},"body":{"controllers/SportsController.html":{}}}],["controller('users",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["coverage",{"_index":725,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":436,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@request",{"_index":464,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["create(createuserdto",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(req",{"_index":439,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["create(userid",{"_index":496,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["create(userid:number",{"_index":507,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createdpronostic",{"_index":508,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createdpronostic.save",{"_index":511,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createduser",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmyfavoritedto",{"_index":169,"title":{"classes/CreateMyFavoriteDto.html":{}},"body":{"classes/CreateMyFavoriteDto.html":{},"injectables/MyFavoritesService.html":{},"coverage.html":{}}}],["createmysportdto",{"_index":185,"title":{"classes/CreateMySportDto.html":{}},"body":{"classes/CreateMySportDto.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{},"coverage.html":{}}}],["createpronosticdto",{"_index":190,"title":{"classes/CreatePronosticDto.html":{}},"body":{"classes/CreatePronosticDto.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"coverage.html":{}}}],["createpronosticdto.commentary",{"_index":510,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createpronosticdto.matchid",{"_index":466,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["createpronosticdto.type",{"_index":468,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["createpronosticdto.winnerid",{"_index":467,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["createsportdto",{"_index":200,"title":{"classes/CreateSportDto.html":{}},"body":{"classes/CreateSportDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":203,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.firstname",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.isadmin",{"_index":721,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.lastname",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.phone",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["data",{"_index":174,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{}}}],["database",{"_index":450,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["datas",{"_index":411,"title":{},"body":{"injectables/MySportsService.html":{}}}],["days",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["declarations",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["del",{"_index":418,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["delete",{"_index":293,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":480,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["delete(@param('id",{"_index":481,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["delete(@request",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(id",{"_index":445,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["delete(req",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete,post,request",{"_index":537,"title":{},"body":{"controllers/SportsController.html":{}}}],["deleted",{"_index":348,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["deleteone",{"_index":491,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["deleteone(id",{"_index":499,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["deleteuser",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(id",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["delmyfavorite",{"_index":275,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["delmyfavorite(@request",{"_index":314,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["delmyfavorite(id",{"_index":332,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["delmyfavorite(req",{"_index":290,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["delmysport",{"_index":365,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["delmysport(@request",{"_index":384,"title":{},"body":{"controllers/MySportsController.html":{}}}],["delmysport(req",{"_index":369,"title":{},"body":{"controllers/MySportsController.html":{}}}],["delmysport(sportid",{"_index":401,"title":{},"body":{"injectables/MySportsService.html":{}}}],["delsport",{"_index":526,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["delsport(@request",{"_index":548,"title":{},"body":{"controllers/SportsController.html":{}}}],["delsport(req",{"_index":531,"title":{},"body":{"controllers/SportsController.html":{}}}],["delsport(sportid",{"_index":562,"title":{},"body":{"injectables/SportsService.html":{}}}],["dependencies",{"_index":46,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":801,"title":{},"body":{"index.html":{}}}],["development",{"_index":810,"title":{},"body":{"index.html":{}}}],["document",{"_index":262,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["documentation",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":441,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["dotenv",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["dto/create",{"_index":337,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":821,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":793,"title":{},"body":{"index.html":{}}}],["email",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":312,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/SportsService.html":{}}}],["exec",{"_index":512,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["exist",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{}}}],["exists",{"_index":442,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["expiresin",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":225,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["extract",{"_index":421,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["extractjwt",{"_index":232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":240,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":242,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["favorite",{"_index":283,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["favoriteid",{"_index":330,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["favorites",{"_index":299,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":437,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@request",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(req",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone",{"_index":438,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('matchid",{"_index":477,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["findone(@request",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(email",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(matchid",{"_index":452,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["findone(req",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["findpronosticforonematchid",{"_index":492,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["findpronosticforonematchid(matchid",{"_index":502,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["finduserbyid",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyid(id",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["followed",{"_index":358,"title":{},"body":{"classes/MySport.html":{}}}],["for(let",{"_index":413,"title":{},"body":{"injectables/MySportsService.html":{}}}],["framework",{"_index":791,"title":{},"body":{"index.html":{}}}],["fs",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["function",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":785,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":541,"title":{},"body":{"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["get(':matchid",{"_index":476,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["get('profile",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["getmyfavorite",{"_index":276,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorite(@request",{"_index":305,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorite(req",{"_index":296,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorites",{"_index":325,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmyfavorites(userid",{"_index":334,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmysports",{"_index":366,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["getmysports(@request",{"_index":379,"title":{},"body":{"controllers/MySportsController.html":{}}}],["getmysports(req",{"_index":371,"title":{},"body":{"controllers/MySportsController.html":{}}}],["getmysports(userid",{"_index":403,"title":{},"body":{"injectables/MySportsService.html":{}}}],["getprofile",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["getsport",{"_index":527,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getsport(@param('id",{"_index":542,"title":{},"body":{"controllers/SportsController.html":{}}}],["getsport(id",{"_index":533,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getsports",{"_index":528,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getting",{"_index":787,"title":{"index.html":{}},"body":{}}],["give",{"_index":449,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["google",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["grow",{"_index":828,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword},{new:true,usefindandmodify:false",{"_index":715,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":798,"title":{},"body":{"index.html":{}}}],["here",{"_index":839,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":377,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpexception",{"_index":375,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["https://nestjs.com",{"_index":846,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":376,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":387,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.unauthorized",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{}}}],["id",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id,{\"email",{"_index":710,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"firstname",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"isadmin",{"_index":723,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"lastname",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"password",{"_index":714,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"phone",{"_index":717,"title":{},"body":{"injectables/UsersService.html":{}}}],["identifier",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["if(!isadmin",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["if(await",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["if(isnull(user",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(result.deletedcount",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(updated",{"_index":719,"title":{},"body":{"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":241,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PronosticsModule.html":{},"modules/UsersModule.html":{}}}],["imports:[mongoosemodule.forfeature",{"_index":322,"title":{},"body":{"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/SportsModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":82,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":336,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(myfavorite.name",{"_index":339,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(mysport.name",{"_index":406,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(pronostic.name",{"_index":462,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["injectmodel(sport.name",{"_index":566,"title":{},"body":{"injectables/SportsService.html":{}}}],["inspired",{"_index":799,"title":{},"body":{"index.html":{}}}],["installation",{"_index":806,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":808,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":570,"title":{},"body":{"injectables/SportsService.html":{}}}],["isadmin",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isadmin(id",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["isemail",{"_index":180,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["iserror",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["isnull",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["isnull(user",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["isoptional",{"_index":183,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{}}}],["join",{"_index":835,"title":{},"body":{"index.html":{}}}],["json",{"_index":295,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["jwt",{"_index":235,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":26,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":239,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":107,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":843,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":849,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":825,"title":{},"body":{"index.html":{}}}],["list",{"_index":306,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["local",{"_index":255,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":108,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["mandatory",{"_index":313,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{}}}],["match",{"_index":455,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["matches",{"_index":181,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(passwordregex",{"_index":211,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(passwordregex)@validateif(undefined",{"_index":578,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matchesuseridmatchid",{"_index":469,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["matchesuseridmatchid.length",{"_index":471,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["matchid",{"_index":193,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["matching",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":347,"title":{},"body":{"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":182,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(1",{"_index":206,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(10",{"_index":213,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["miscellaneous",{"_index":784,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":824,"title":{},"body":{"index.html":{}}}],["mode",{"_index":814,"title":{},"body":{"index.html":{}}}],["model",{"_index":284,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":43,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":45,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":269,"title":{},"body":{"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"injectables/SportsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":488,"title":{},"body":{"modules/PronosticsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost/funsport",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":838,"title":{},"body":{"index.html":{}}}],["myfavorite",{"_index":260,"title":{"classes/MyFavorite.html":{}},"body":{"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["myfavorite.dto",{"_index":338,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["myfavorite.dto.ts",{"_index":172,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"coverage.html":{}}}],["myfavorite.dto.ts:5",{"_index":179,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.dto.ts:7",{"_index":178,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.dto.ts:9",{"_index":177,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.name",{"_index":323,"title":{},"body":{"modules/MyFavoritesModule.html":{},"modules/UsersModule.html":{}}}],["myfavoritemodel",{"_index":328,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/UsersService.html":{}}}],["myfavorites",{"_index":273,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["myfavorites.controller",{"_index":320,"title":{},"body":{"modules/MyFavoritesModule.html":{}}}],["myfavorites.service",{"_index":303,"title":{},"body":{"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{}}}],["myfavorites/myfavorites.controller",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["myfavorites/myfavorites.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["myfavoriteschema",{"_index":270,"title":{},"body":{"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["myfavoritescontroller",{"_index":66,"title":{"controllers/MyFavoritesController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"coverage.html":{}}}],["myfavoritesmodule",{"_index":56,"title":{"modules/MyFavoritesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MyFavoritesModule.html":{},"modules.html":{},"overview.html":{}}}],["myfavoritesservice",{"_index":302,"title":{"injectables/MyFavoritesService.html":{}},"body":{"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"coverage.html":{},"overview.html":{}}}],["mypronostics/pronostics.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["mysport",{"_index":349,"title":{"classes/MySport.html":{}},"body":{"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["mysport.dto",{"_index":405,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["mysport.dto.ts",{"_index":186,"title":{},"body":{"classes/CreateMySportDto.html":{},"coverage.html":{}}}],["mysport.dto.ts:5",{"_index":189,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.dto.ts:7",{"_index":188,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.dto.ts:9",{"_index":187,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.name",{"_index":394,"title":{},"body":{"modules/MySportsModule.html":{},"modules/UsersModule.html":{}}}],["mysportmodel",{"_index":398,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/UsersService.html":{}}}],["mysports",{"_index":363,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["mysports.controller",{"_index":392,"title":{},"body":{"modules/MySportsModule.html":{}}}],["mysports.service",{"_index":374,"title":{},"body":{"controllers/MySportsController.html":{},"modules/MySportsModule.html":{}}}],["mysports/mysports.controller",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["mysports/mysports.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["mysportschema",{"_index":360,"title":{},"body":{"classes/MySport.html":{},"modules/MySportsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mysportscontroller",{"_index":65,"title":{"controllers/MySportsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"coverage.html":{}}}],["mysportsmodule",{"_index":57,"title":{"modules/MySportsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MySportsModule.html":{},"modules.html":{},"overview.html":{}}}],["mysportsservice",{"_index":373,"title":{"injectables/MySportsService.html":{}},"body":{"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"coverage.html":{},"overview.html":{}}}],["myśliwiec",{"_index":844,"title":{},"body":{"index.html":{}}}],["name",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateSportDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":285,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{}}}],["nest",{"_index":802,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":848,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newfavorite",{"_index":342,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["newfavorite.save",{"_index":345,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["newmysport",{"_index":414,"title":{},"body":{"injectables/MySportsService.html":{}}}],["newmysport.save",{"_index":417,"title":{},"body":{"injectables/MySportsService.html":{}}}],["newpronostic",{"_index":514,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.commentary",{"_index":517,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.save",{"_index":518,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.winnerid",{"_index":516,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newsport",{"_index":572,"title":{},"body":{"injectables/SportsService.html":{}}}],["newsport.save",{"_index":574,"title":{},"body":{"injectables/SportsService.html":{}}}],["node.js",{"_index":790,"title":{},"body":{"index.html":{}}}],["nothing",{"_index":720,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":807,"title":{},"body":{"index.html":{}}}],["null",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":497,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["oauth20",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ok",{"_index":423,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["one",{"_index":294,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{}}}],["open",{"_index":826,"title":{},"body":{"index.html":{}}}],["optional",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":853,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":581,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["p.password",{"_index":582,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["package",{"_index":749,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":456,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":234,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":236,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":237,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passverify",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["passwordregex",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('admin/updateuser",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":245,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.firstname",{"_index":246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":244,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.isadmin",{"_index":249,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.lastname",{"_index":247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.phone",{"_index":248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["phone",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["please",{"_index":836,"title":{},"body":{"index.html":{}}}],["populate",{"_index":408,"title":{},"body":{"injectables/MySportsService.html":{}}}],["post",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["post('admin/createuser",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":816,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":789,"title":{},"body":{"index.html":{}}}],["project",{"_index":827,"title":{},"body":{"index.html":{}}}],["promise",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pronostic",{"_index":424,"title":{"classes/Pronostic.html":{}},"body":{"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"coverage.html":{}}}],["pronostic.dto",{"_index":459,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostic.dto.ts",{"_index":191,"title":{},"body":{"classes/CreatePronosticDto.html":{},"coverage.html":{}}}],["pronostic.dto.ts:10",{"_index":197,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:12",{"_index":199,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:15",{"_index":195,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:6",{"_index":198,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:8",{"_index":196,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.name",{"_index":489,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["pronosticmodel",{"_index":463,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostics",{"_index":435,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["pronostics.controller",{"_index":487,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["pronostics.service",{"_index":458,"title":{},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{}}}],["pronosticschema",{"_index":431,"title":{},"body":{"classes/Pronostic.html":{},"modules/PronosticsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pronosticscontroller",{"_index":433,"title":{"controllers/PronosticsController.html":{}},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"coverage.html":{}}}],["pronosticsmodule",{"_index":58,"title":{"modules/PronosticsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PronosticsModule.html":{},"modules.html":{},"overview.html":{}}}],["pronosticsservice",{"_index":457,"title":{"injectables/PronosticsService.html":{}},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"coverage.html":{},"overview.html":{}}}],["pronotic",{"_index":451,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["prop",{"_index":263,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["properties",{"_index":173,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["property",{"_index":479,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["providers",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":301,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/UsersController.html":{}}}],["read",{"_index":837,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["regexp('^(((?=.*[a",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":805,"title":{},"body":{"index.html":{}}}],["req",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["req,@body",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.body.data",{"_index":310,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["req.body.id",{"_index":385,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["req.body.name",{"_index":546,"title":{},"body":{"controllers/SportsController.html":{}}}],["req.body.sportfavoriteid",{"_index":309,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["req.body.sportid",{"_index":382,"title":{},"body":{"controllers/MySportsController.html":{}}}],["req.user",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user.id",{"_index":465,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":288,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{}}}],["run",{"_index":811,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":794,"title":{},"body":{"index.html":{}}}],["schema",{"_index":267,"title":{},"body":{"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"classes/MySport.html":{},"modules/MySportsModule.html":{},"classes/Pronostic.html":{},"modules/PronosticsModule.html":{},"classes/Sport.html":{},"modules/SportsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":268,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(myfavorite",{"_index":271,"title":{},"body":{"classes/MyFavorite.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(mysport",{"_index":361,"title":{},"body":{"classes/MySport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(pronostic",{"_index":432,"title":{},"body":{"classes/Pronostic.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(sport",{"_index":522,"title":{},"body":{"classes/Sport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":591,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/myfavorite.schema",{"_index":321,"title":{},"body":{"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/mysport.schema",{"_index":393,"title":{},"body":{"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/pronostic.schema",{"_index":460,"title":{},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{}}}],["schemas/sport.schema",{"_index":554,"title":{},"body":{"modules/SportsModule.html":{},"injectables/SportsService.html":{}}}],["schemas/user.schema",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":243,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["server",{"_index":795,"title":{},"body":{"index.html":{}}}],["side",{"_index":796,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specific",{"_index":407,"title":{},"body":{"injectables/MySportsService.html":{}}}],["sponsors",{"_index":830,"title":{},"body":{"index.html":{}}}],["sport",{"_index":419,"title":{"classes/Sport.html":{}},"body":{"injectables/MySportsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"coverage.html":{}}}],["sport.dto.ts",{"_index":201,"title":{},"body":{"classes/CreateSportDto.html":{},"coverage.html":{}}}],["sport.dto.ts:2",{"_index":202,"title":{},"body":{"classes/CreateSportDto.html":{}}}],["sport.name",{"_index":555,"title":{},"body":{"modules/SportsModule.html":{}}}],["sportfavoriteid",{"_index":175,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{}}}],["sportfavoriteid:favoriteid,data:data",{"_index":344,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["sportid",{"_index":351,"title":{},"body":{"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["sportid:sportid",{"_index":416,"title":{},"body":{"injectables/MySportsService.html":{}}}],["sportmodel",{"_index":559,"title":{},"body":{"injectables/SportsService.html":{}}}],["sports",{"_index":357,"title":{},"body":{"classes/MySport.html":{},"injectables/MySportsService.html":{},"controllers/SportsController.html":{}}}],["sports.controller",{"_index":553,"title":{},"body":{"modules/SportsModule.html":{}}}],["sports.service",{"_index":539,"title":{},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{}}}],["sports/sports.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["sportschema",{"_index":521,"title":{},"body":{"classes/Sport.html":{},"modules/SportsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sportscontroller",{"_index":523,"title":{"controllers/SportsController.html":{}},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{},"coverage.html":{}}}],["sportsmodule",{"_index":59,"title":{"modules/SportsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SportsModule.html":{},"modules.html":{},"overview.html":{}}}],["sportsservice",{"_index":538,"title":{"injectables/SportsService.html":{}},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"coverage.html":{},"overview.html":{}}}],["src/.../constants.ts",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":786,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../myfavorite.schema.ts",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mysport.schema.ts",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pronostic.schema.ts",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sport.schema.ts",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../update",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":738,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":223,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":250,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":254,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":252,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/dto/create",{"_index":171,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/dto/update",{"_index":577,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":741,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/myfavorites/myfavorites.controller.ts",{"_index":272,"title":{},"body":{"controllers/MyFavoritesController.html":{},"coverage.html":{}}}],["src/myfavorites/myfavorites.controller.ts:15",{"_index":298,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.controller.ts:27",{"_index":279,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.controller.ts:44",{"_index":292,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.module.ts",{"_index":319,"title":{},"body":{"modules/MyFavoritesModule.html":{}}}],["src/myfavorites/myfavorites.service.ts",{"_index":324,"title":{},"body":{"injectables/MyFavoritesService.html":{},"coverage.html":{}}}],["src/myfavorites/myfavorites.service.ts:10",{"_index":327,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:13",{"_index":335,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:18",{"_index":331,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:24",{"_index":333,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/mypronostics/pronostics.controller.ts",{"_index":434,"title":{},"body":{"controllers/PronosticsController.html":{},"coverage.html":{}}}],["src/mypronostics/pronostics.controller.ts:25",{"_index":440,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:48",{"_index":448,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:60",{"_index":454,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:71",{"_index":447,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.module.ts",{"_index":486,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["src/mypronostics/pronostics.service.ts",{"_index":490,"title":{},"body":{"injectables/PronosticsService.html":{},"coverage.html":{}}}],["src/mypronostics/pronostics.service.ts:10",{"_index":495,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:14",{"_index":498,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:24",{"_index":501,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:28",{"_index":503,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:33",{"_index":500,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:45",{"_index":505,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mysports/mysports.controller.ts",{"_index":362,"title":{},"body":{"controllers/MySportsController.html":{},"coverage.html":{}}}],["src/mysports/mysports.controller.ts:16",{"_index":372,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.controller.ts:28",{"_index":368,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.controller.ts:48",{"_index":370,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.module.ts",{"_index":391,"title":{},"body":{"modules/MySportsModule.html":{}}}],["src/mysports/mysports.service.ts",{"_index":395,"title":{},"body":{"injectables/MySportsService.html":{},"coverage.html":{}}}],["src/mysports/mysports.service.ts:12",{"_index":404,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:24",{"_index":400,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:34",{"_index":402,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:9",{"_index":397,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/schemas/myfavorite.schema.ts",{"_index":261,"title":{},"body":{"classes/MyFavorite.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/myfavorite.schema.ts:10",{"_index":265,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/myfavorite.schema.ts:13",{"_index":264,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/myfavorite.schema.ts:7",{"_index":266,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/mysport.schema.ts",{"_index":350,"title":{},"body":{"classes/MySport.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/mysport.schema.ts:12",{"_index":353,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/mysport.schema.ts:15",{"_index":352,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/mysport.schema.ts:9",{"_index":354,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/pronostic.schema.ts",{"_index":425,"title":{},"body":{"classes/Pronostic.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/pronostic.schema.ts:10",{"_index":427,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:13",{"_index":428,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:16",{"_index":430,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:19",{"_index":426,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:7",{"_index":429,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/sport.schema.ts",{"_index":519,"title":{},"body":{"classes/Sport.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/sport.schema.ts:7",{"_index":520,"title":{},"body":{"classes/Sport.html":{}}}],["src/schemas/user.schema.ts",{"_index":583,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/user.schema.ts:10",{"_index":587,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:13",{"_index":584,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:16",{"_index":588,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:19",{"_index":589,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:22",{"_index":586,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:7",{"_index":585,"title":{},"body":{"classes/User.html":{}}}],["src/sports/sports.controller.ts",{"_index":524,"title":{},"body":{"controllers/SportsController.html":{},"coverage.html":{}}}],["src/sports/sports.controller.ts:12",{"_index":535,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:18",{"_index":536,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:25",{"_index":530,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:40",{"_index":532,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.module.ts",{"_index":552,"title":{},"body":{"modules/SportsModule.html":{}}}],["src/sports/sports.service.ts",{"_index":556,"title":{},"body":{"injectables/SportsService.html":{},"coverage.html":{}}}],["src/sports/sports.service.ts:10",{"_index":558,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:13",{"_index":564,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:24",{"_index":565,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:30",{"_index":561,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:36",{"_index":563,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/users/users.controller.ts",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:26",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:40",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:94",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":648,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:114",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:125",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:55",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:60",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:65",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:78",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":812,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":815,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":817,"title":{},"body":{"index.html":{}}}],["started",{"_index":788,"title":{"index.html":{}},"body":{}}],["starter",{"_index":804,"title":{},"body":{"index.html":{}}}],["statements",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":840,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["structure",{"_index":282,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{}}}],["super",{"_index":238,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":831,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":851,"title":{},"body":{"modules.html":{}}}],["table",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":747,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":820,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":823,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":822,"title":{},"body":{"index.html":{}}}],["tests",{"_index":819,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":829,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":258,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.jwtservice.sign(payload",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.myfavoritemodel.create({'userid':userid",{"_index":343,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritemodel.find({'userid':userid}).exec",{"_index":340,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritemodel.findbyidanddelete(id",{"_index":346,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritesservice.addmyfavorite(req.user.id",{"_index":311,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.myfavoritesservice.delmyfavorite(req.body.sportfavoriteid",{"_index":315,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.myfavoritesservice.getmyfavorites(req.user.id",{"_index":307,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.mysportmodel.create({userid:userid",{"_index":415,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportmodel.find({userid:userid}).exec",{"_index":412,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportmodel.findbyidanddelete(sportid",{"_index":422,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportsservice.addmysport(req.user.id",{"_index":383,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.mysportsservice.delmysport(req.body.id",{"_index":386,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.mysportsservice.getmysports(req.user.id",{"_index":380,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.pronosticmodel",{"_index":509,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.find",{"_index":470,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.findbyidanddelete(id",{"_index":513,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.findone",{"_index":515,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticsservice.create(user",{"_index":473,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.deleteone(id",{"_index":482,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.findall",{"_index":475,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.findpronosticforonematchid(matchid",{"_index":478,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.updateone(user",{"_index":472,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.sportmodel.create({name",{"_index":573,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.find",{"_index":571,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.findbyid(id).orfail",{"_index":568,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.findbyidanddelete(sportid",{"_index":575,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportsservice.addsport(req.body.name",{"_index":547,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.delsport(req.body.id",{"_index":549,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.getsport(id",{"_index":543,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.getsports",{"_index":544,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.usermodel",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.deleteone({'_id':id}).exec",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find({'email':email}).exec",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.admincreate(createuserdto",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.adminupdate(body.id",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(createuserdto",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(id",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(email",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyid(id",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.isadmin(req.user.id",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.userexists(createuserdto",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":259,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["todo",{"_index":410,"title":{},"body":{"injectables/MySportsService.html":{}}}],["touch",{"_index":841,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["try",{"_index":567,"title":{},"body":{"injectables/SportsService.html":{}}}],["twitter",{"_index":847,"title":{},"body":{"index.html":{}}}],["type",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":803,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":256,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unit",{"_index":818,"title":{},"body":{"index.html":{}}}],["update",{"_index":443,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@request",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(req",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateone",{"_index":493,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["updateone(userid",{"_index":504,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["updateuserdto",{"_index":576,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["useguards",{"_index":300,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@delete",{"_index":291,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["useguards(jwtauthguard)@delete(':id",{"_index":446,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":297,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get(':id",{"_index":534,"title":{},"body":{"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get(':matchid",{"_index":453,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@patch",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@patch('admin/updateuser",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@post",{"_index":278,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{}}}],["useguards(jwtauthguard)@post('admin/createuser",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(undefined)@post('login",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards,get",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards,put",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/SportsController.html":{}}}],["user",{"_index":135,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.dto",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:11",{"_index":210,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:14",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:17",{"_index":214,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:20",{"_index":212,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":579,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:23",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":207,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.isadmin",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.length",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":650,"title":{},"body":{"modules/UsersModule.html":{}}}],["user[0]._id",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].email",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].firstname",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].isadmin",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].lastname",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].password",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].phone",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["userexists(createuserdto",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":176,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["usermodel",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":257,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":359,"title":{},"body":{"classes/MySport.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":649,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":590,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":592,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":60,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":129,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdated",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["util",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":253,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":580,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["validateuser",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":184,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":289,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"coverage.html":{}}}],["variables",{"_index":856,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":813,"title":{},"body":{"index.html":{}}}],["website",{"_index":845,"title":{},"body":{"index.html":{}}}],["winnerid",{"_index":194,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["you'd",{"_index":834,"title":{},"body":{"index.html":{}}}],["z])(?=.*[0",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z]))|((?=.*[a",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards,Put } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nAppModule -->\n\nMyFavoritesModule->AppModule\n\n\n\n\n\nMySportsModule\n\nMySportsModule\n\nAppModule -->\n\nMySportsModule->AppModule\n\n\n\n\n\nPronosticsModule\n\nPronosticsModule\n\nAppModule -->\n\nPronosticsModule->AppModule\n\n\n\n\n\nSportsModule\n\nSportsModule\n\nAppModule -->\n\nSportsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            MySportsController\n                        \n                        \n                            MyFavoritesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MyFavoritesModule\n                        \n                        \n                            MySportsModule\n                        \n                        \n                            PronosticsModule\n                        \n                        \n                            SportsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { PronosticsModule } from './MyPronostics/pronostics.module';\n\nimport { AuthModule } from './auth/auth.module';\nimport { MySportsController } from './MySports/MySports.controller';\nimport { MySportsModule } from './MySports/MySports.module';\nimport { MyFavoritesController } from './MyFavorites/MyFavorites.controller';\nimport { MyFavoritesModule } from './MyFavorites/MyFavorites.module';\nimport { SportsModule } from './sports/sports.module';\n@Module({\n  imports: [MongooseModule.forRoot('mongodb://localhost/funsport'), UsersModule, AuthModule,MySportsModule, MyFavoritesModule, SportsModule, PronosticsModule],\n  controllers: [AppController,MySportsController,MyFavoritesController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards,Get} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\nconstructor(private authService: AuthService) {}\n\n  @UseGuards(AuthGuard('local'))\n  @Post('login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '2 days' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n    ) {}\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.findOne(email);\n    const passVerify = await bcrypt.compare(pass, user[0].password);\n    if (user.length > 0 && passVerify) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    const payload = { \n                      email: user[0].email,\n                      id: user[0]._id ,\n                      firstName: user[0].firstName,\n                      lastName: user[0].lastName ,\n                      isAdmin: user[0].isAdmin,\n                      phone: user[0].phone,\n                    };\n    const access_token = this.jwtService.sign(payload)\n    return {\n      access_token: access_token,\n    };\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMyFavoriteDto.html":{"url":"classes/CreateMyFavoriteDto.html","title":"class - CreateMyFavoriteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMyFavoriteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-myFavorite.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\nexport class CreateMyFavoriteDto {\n\n  userId: string;\n\n  sportFavoriteId: string;\n\n  data: string[];\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMySportDto.html":{"url":"classes/CreateMySportDto.html","title":"class - CreateMySportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMySportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-mySport.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\nexport class CreateMySportDto {\n\n  userId: string;\n\n  sportFavoriteId: string;\n\n  data: [string];\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePronosticDto.html":{"url":"classes/CreatePronosticDto.html","title":"class - CreatePronosticDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePronosticDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-pronostic.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentary\n                            \n                            \n                                matchId\n                            \n                            \n                                type\n                            \n                            \n                                userId\n                            \n                            \n                                winnerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            matchId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            winnerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\n\nexport class CreatePronosticDto {\n\n  userId: string;\n\n  matchId: string;\n\n  type: string;\n\n  winnerId: string;\n\n  @IsOptional()\n  commentary: string;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSportDto.html":{"url":"classes/CreateSportDto.html","title":"class - CreateSportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-sport.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-sport.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSportDto {\n    name: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Matches(passwordRegex)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(10)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\nconst passwordRegex = new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})');\n\nexport class CreateUserDto {\n\n  @MinLength(1)\n  firstName: string;\n\n  @MinLength(1)\n  lastName: string;\n\n  @IsEmail()\n  email: string;\n\n  @MinLength(10)\n  phone: string;\n\n  @Matches(passwordRegex)\n  password: string;\n\n  @IsOptional()\n  isAdmin: boolean;\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { id: payload.id, email: payload.email, firstName: payload.firstName, lastName: payload.lastName, phone: payload.phone , isAdmin: payload.isAdmin};\n  }\n  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MyFavorite.html":{"url":"classes/MyFavorite.html","title":"class - MyFavorite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MyFavorite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/myFavorite.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class MyFavorite extends Document {\n  @Prop()\n  userId: string;\n\n  @Prop()\n  sportFavoriteId: string;\n\n  @Prop()\n  data: [string];\n\n}\n\nexport const MyFavoriteSchema = SchemaFactory.createForClass(MyFavorite);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MyFavoritesController.html":{"url":"controllers/MyFavoritesController.html","title":"controller - MyFavoritesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MyFavoritesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                myfavorites\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMyFavorite\n                            \n                            \n                                    Async\n                                delMyFavorite\n                            \n                            \n                                    Async\n                                getMyFavorite\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:27\n                \n            \n\n\n            \n                \n                    Add the body structure in the favorite Model\nYou need to be connected to access to this route\nYour body need to have a variable sportFavoriteId\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        : {} myFavorite\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:44\n                \n            \n\n\n            \n                \n                    Delete one favorite\nYou need to be connected to access to this route\nYour body need to be a variable sportFavoriteId\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        : {} JSON\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:15\n                \n            \n\n\n            \n                \n                    Get all favorites for one user\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        : {} myFavorite\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete, Post, Request, UseGuards, Put } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { MyFavoritesService } from './MyFavorites.service';\n\n@Controller('myfavorites')\nexport class MyFavoritesController {\n  constructor(private readonly myFavoritesService: MyFavoritesService) { }\n\n  /** Get all favorites for one user\n  * You need to be connected to access to this route\n  * @return : {} myFavorite\n  */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async getMyFavorite(@Request() req) {\n    const list = await this.myFavoritesService.getMyFavorites(req.user.id)\n    return list;\n  }\n\n  /** Add the body structure in the favorite Model\n  * You need to be connected to access to this route\n  * Your body need to have a variable sportFavoriteId\n  * @return : {} myFavorite\n  */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async addMyFavorite(@Request() req) {\n    let list\n    if (req.body.sportFavoriteId, req.body.data) {\n      list = await this.myFavoritesService.addMyFavorite(req.user.id, req.body.sportFavoriteId, req.body.data)\n    } else {\n      list = { error: \"sportFavoriteId and data are mandatory\" }\n    }\n    return list;\n  }\n\n  /** Delete one favorite\n  * You need to be connected to access to this route\n  * Your body need to be a variable sportFavoriteId\n  * @return : {} JSON\n  */\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  async delMyFavorite(@Request() req) {\n    if (req.body.sportFavoriteId) {\n      return await this.myFavoritesService.delMyFavorite(req.body.sportFavoriteId)\n    } else {\n      return {\n        error: \"sportFavoriteId is mandatory\"\n      }\n\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MyFavoritesModule.html":{"url":"modules/MyFavoritesModule.html","title":"module - MyFavoritesModule","body":"\n                   \n\n\n\n\n    Modules\n    MyFavoritesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MyFavoritesModule\n\n\n\ncluster_MyFavoritesModule_exports\n\n\n\ncluster_MyFavoritesModule_providers\n\n\n\n\nMyFavoritesService \n\nMyFavoritesService \n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nMyFavoritesService  -->\n\nMyFavoritesModule->MyFavoritesService \n\n\n\n\n\nMyFavoritesService\n\nMyFavoritesService\n\nMyFavoritesModule -->\n\nMyFavoritesService->MyFavoritesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MyFavoritesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MyFavoritesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MyFavoritesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MyFavoritesService } from './MyFavorites.service';\nimport { MyFavoritesController } from './MyFavorites.controller';\nimport { MyFavorite, MyFavoriteSchema } from '../schemas/myFavorite.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports:[MongooseModule.forFeature([{ name: MyFavorite.name, schema: MyFavoriteSchema }])],\n  providers: [MyFavoritesService],\n  controllers: [MyFavoritesController],\n  exports: [MyFavoritesService],\n})\nexport class MyFavoritesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MyFavoritesService.html":{"url":"injectables/MyFavoritesService.html","title":"injectable - MyFavoritesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MyFavoritesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMyFavorite\n                            \n                            \n                                    Async\n                                delMyFavorite\n                            \n                            \n                                    Async\n                                getMyFavorites\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(myFavoriteModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MyFavorites/MyFavorites.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        myFavoriteModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMyFavorite(userId, favoriteId, data)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    favoriteId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMyFavorite(id)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyFavorites\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyFavorites(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MyFavorite } from '../schemas/myFavorite.schema';\nimport { CreateMyFavoriteDto } from '../dto/create-myFavorite.dto';\n\n\n\n@Injectable()\nexport class MyFavoritesService {\n    constructor( @InjectModel(MyFavorite.name) private myFavoriteModel: Model){}\n\n    async getMyFavorites(userId){\n        const favorites = await this.myFavoriteModel.find({'userId':userId}).exec();\n        return favorites;\n    }\n\n    async addMyFavorite(userId,favoriteId, data){\n        const newFavorite = await this.myFavoriteModel.create({'userId':userId, sportFavoriteId:favoriteId,data:data})\n        newFavorite.save()\n        return newFavorite\n    }\n\n    async delMyFavorite(id){\n        await this.myFavoriteModel.findByIdAndDelete(id);\n        return {\n            message: \"Deleted\"\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MySport.html":{"url":"classes/MySport.html","title":"class - MySport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MySport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/mySport.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:9\n                            \n                        \n\n                \n                    \n                        This collection collect all the sports followed for users\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class MySport extends Document {\n  /** This collection collect all the sports followed for users\n  */\n  @Prop()\n  userId: string;\n\n  @Prop()\n  sportId: string;\n\n  @Prop()\n  data: [string];\n}\n\nexport const MySportSchema = SchemaFactory.createForClass(MySport);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MySportsController.html":{"url":"controllers/MySportsController.html","title":"controller - MySportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MySportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MySports/MySports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mysports\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMySport\n                            \n                            \n                                    Async\n                                delMySport\n                            \n                            \n                                    Async\n                                getMySports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMySport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMySport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMySports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMySports(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete, Post, Request, UseGuards, Put, Body } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { MySportsService } from './MySports.service';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n@Controller('mysports')\nexport class MySportsController {\n  constructor(private readonly mySportsService: MySportsService) { }\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  /** Get all MySports for one user\n* You need to be connected to access to this route\n* @return : {} mySport\n*/\n  async getMySports(@Request() req) {\n    const list = await this.mySportsService.getMySports(req.user.id)\n    return list;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  /** Add the body structure in the mysports model\n* You need to be connected to access to this route\n* Your body need to have a variable sportId\n* @return : {} MySport\n*/\n  async addMySport(@Request() req) {\n    let list\n    if (req.body.sportId) {\n      list = await this.mySportsService.addMySport(req.user.id, req.body.sportId)\n    }\n    else {\n      list = {\n        error: \"sportId is mandatory\"\n      }\n    }\n    return list;\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  /** Delete one MySports\n  * You need to be connected to access to this route\n  * Your body need to be a variable sportFavoriteId\n  * @return : {} MySport\n  */\n  async delMySport(@Request() req) {\n    if (req.body.id) {\n      return await this.mySportsService.delMySport(req.body.id)\n    } else {\n      throw new HttpException({\n        message: 'Id is Mandatory',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MySportsModule.html":{"url":"modules/MySportsModule.html","title":"module - MySportsModule","body":"\n                   \n\n\n\n\n    Modules\n    MySportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MySportsModule\n\n\n\ncluster_MySportsModule_exports\n\n\n\ncluster_MySportsModule_providers\n\n\n\n\nMySportsService \n\nMySportsService \n\n\n\nMySportsModule\n\nMySportsModule\n\nMySportsService  -->\n\nMySportsModule->MySportsService \n\n\n\n\n\nMySportsService\n\nMySportsService\n\nMySportsModule -->\n\nMySportsService->MySportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MySports/MySports.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MySportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MySportsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MySportsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MySportsService } from './MySports.service';\nimport { MySportsController } from './MySports.controller';\nimport { MySport, MySportSchema } from '../schemas/mySport.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports:[MongooseModule.forFeature([{ name: MySport.name, schema: MySportSchema }])],\n  providers: [MySportsService],\n  controllers: [MySportsController],\n  exports: [MySportsService],\n})\nexport class MySportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MySportsService.html":{"url":"injectables/MySportsService.html","title":"injectable - MySportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MySportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MySports/MySports.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMySport\n                            \n                            \n                                    Async\n                                delMySport\n                            \n                            \n                                    Async\n                                getMySports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mySportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MySports/MySports.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mySportModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMySport(userId, sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMySport(sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMySports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMySports(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MySport } from '../schemas/mySport.schema';\nimport { CreateMySportDto } from '../dto/create-mySport.dto';\n\n\n@Injectable()\nexport class MySportsService {\n    constructor( @InjectModel(MySport.name) private mySportModel: Model){}\n\n    async getMySports(userId){\n        // get all sports for a specific userId.\n        // Populate the data with the API TODO\n        // :userId\n        // return Model\n        const datas = await this.mySportModel.find({userId:userId}).exec();\n        // for(let i =0; i\n        const newMySport = await this.mySportModel.create({userId:userId, sportId:sportId, data:[]});\n        newMySport.save()\n        return newMySport\n    }\n\n    async delMySport(sportId){\n        // del a sport in your mySports array.\n        // :sportId = id extract to the API\n        // return JSON\n        await this.mySportModel.findByIdAndDelete(sportId);\n        return {\n            message: \"Deleted ok\"\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pronostic.html":{"url":"classes/Pronostic.html","title":"class - Pronostic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pronostic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/pronostic.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentary\n                            \n                            \n                                matchId\n                            \n                            \n                                type\n                            \n                            \n                                userId\n                            \n                            \n                                winnerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            matchId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            winnerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class Pronostic extends Document {\n  @Prop()\n  userId: string;\n\n  @Prop()\n  matchId: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  winnerId: string;\n\n  @Prop()\n  commentary: string;\n\n}\n\nexport const PronosticSchema = SchemaFactory.createForClass(Pronostic);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PronosticsController.html":{"url":"controllers/PronosticsController.html","title":"controller - PronosticsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PronosticsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyPronostics/pronostics.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                pronostics\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req, createPronosticDto: CreatePronosticDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:25\n                \n            \n\n\n            \n                \n                    Create a pronostic if the matchId userId doesn't exists in the pronostic\nor Update the matchId userId if the association exists\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPronosticDto\n                                    \n                                                CreatePronosticDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        : Pronostic\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:71\n                \n            \n\n\n            \n                \n                    Delete one pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        : {} Pronostic\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:48\n                \n            \n\n\n            \n                \n                    Give all pronostics in the database\nYou need to be connected to access to this route\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        : Pronotic array\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(matchId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':matchId')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:60\n                \n            \n\n\n            \n                \n                    Give all pronostics for one match id\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matchId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        : Pronostic Array\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Param, Delete, UseGuards, Request } from '@nestjs/common';\nimport { PronosticsService } from './pronostics.service';\nimport { CreatePronosticDto } from '../dto/create-pronostic.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\nimport { Pronostic } from '../schemas/pronostic.schema';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n\n@Controller('pronostics')\nexport class PronosticsController {\n  constructor(private readonly pronosticsService: PronosticsService,\n    @InjectModel(Pronostic.name) private pronosticModel: Model) { }\n\n    /**\n   * Create a pronostic if the matchId userId doesn't exists in the pronostic\n   * or Update the matchId userId if the association exists\n   * You need to be connected to access to this route\n   * @return : Pronostic\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(@Request() req, @Body() createPronosticDto: CreatePronosticDto) {\n    const user = req.user.id\n    if (createPronosticDto.matchId && createPronosticDto.winnerId && createPronosticDto.type) {\n      const matchesUserIdMatchId = await this.pronosticModel.find({ userId: user, matchId: createPronosticDto.matchId });\n      if (matchesUserIdMatchId.length != 0) {\n        return await this.pronosticsService.updateOne(user, createPronosticDto);\n      } else {\n        return await this.pronosticsService.create(user, createPronosticDto);\n      }\n    } else {\n      throw new HttpException({\n        error: 404,\n        message: \"userId, matchId, winnerId and type are mandatory. Only commentary is optional\"\n      }, HttpStatus.BAD_REQUEST)\n    }\n  }\n\n  /** Give all pronostics in the database\n   *  You need to be connected to access to this route\n   * @return: Pronotic array\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(): Promise {\n    return this.pronosticsService.findAll();\n  }\n\n  /**\n  * Give all pronostics for one match id\n  * You need to be connected to access to this route\n  * @matchId: string\n  * @return : Pronostic Array\n  */\n  @UseGuards(JwtAuthGuard)\n  @Get(':matchId')\n  async findOne(@Param('matchId') matchId: string): Promise {\n    return this.pronosticsService.findPronosticForOneMatchId(matchId);\n  }\n\n  /** Delete one pronostic\n   * You need to be connected to access to this route\n  * @property {string} pronostic id\n  * @return : {} Pronostic\n  */\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async delete(@Param('id') id: string): Promise {\n    if (id) {\n      return this.pronosticsService.deleteOne(id);\n\n    }\n    throw new HttpException({\n      error: 404,\n      message: \"id is mandatory\"\n    }, HttpStatus.BAD_REQUEST)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PronosticsModule.html":{"url":"modules/PronosticsModule.html","title":"module - PronosticsModule","body":"\n                   \n\n\n\n\n    Modules\n    PronosticsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PronosticsModule\n\n\n\ncluster_PronosticsModule_exports\n\n\n\ncluster_PronosticsModule_providers\n\n\n\n\nPronosticsService \n\nPronosticsService \n\n\n\nPronosticsModule\n\nPronosticsModule\n\nPronosticsService  -->\n\nPronosticsModule->PronosticsService \n\n\n\n\n\nPronosticsService\n\nPronosticsService\n\nPronosticsModule -->\n\nPronosticsService->PronosticsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MyPronostics/pronostics.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PronosticsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PronosticsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PronosticsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PronosticsController } from './pronostics.controller';\nimport { PronosticsService } from './pronostics.service';;\nimport { Pronostic, PronosticSchema } from '../schemas/pronostic.schema';\n\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Pronostic.name, schema: PronosticSchema }]),\n\n  ],\n  controllers: [PronosticsController],\n  providers: [PronosticsService],\n  exports: [PronosticsService],\n})\nexport class PronosticsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PronosticsService.html":{"url":"injectables/PronosticsService.html","title":"injectable - PronosticsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PronosticsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyPronostics/pronostics.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteOne\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findPronosticForOneMatchId\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pronosticModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MyPronostics/pronostics.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pronosticModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: Number, createPronosticDto: CreatePronosticDto)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                Number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPronosticDto\n                                    \n                                                CreatePronosticDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(id)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPronosticForOneMatchId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPronosticForOneMatchId(matchId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matchId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(userId, createPronosticDto)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPronosticDto\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Pronostic } from '../schemas/pronostic.schema';\nimport { HttpException, HttpStatus } from '@nestjs/common'\n\nimport { CreatePronosticDto } from '../dto/create-pronostic.dto';\n\n@Injectable()\nexport class PronosticsService {\n  constructor(@InjectModel(Pronostic.name) private pronosticModel: Model\n  ) {\n  }\n  async create(userId:Number, createPronosticDto: CreatePronosticDto): Promise {\n    const createdPronostic = await new this.pronosticModel({\n      userId: userId,\n      matchId: createPronosticDto.matchId,\n      winnerId: createPronosticDto.winnerId,\n      commentary: (createPronosticDto.commentary ? createPronosticDto.commentary : \"\")\n    })\n    return createdPronostic.save();\n  }\n\n  async findAll(): Promise {\n    return this.pronosticModel.find({});\n  }\n\n  async findPronosticForOneMatchId(matchId: string): Promise {\n    const pronostic = await this.pronosticModel.find({ 'matchId': matchId }).exec();\n    return pronostic;\n  }\n\n  async deleteOne(id): Promise {\n    const result = await this.pronosticModel.findByIdAndDelete(id);\n    if (!result) {\n      throw new HttpException({\n        message: 'No pronostic deleted',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    else return {\n      message: \"Pronostic Deleted !\",\n    }\n  }\n\n  async updateOne(userId, createPronosticDto): Promise {\n    const newPronostic = await this.pronosticModel.findOne({ userId: userId, matchId: createPronosticDto.matchId });\n    newPronostic.winnerId = createPronosticDto.winnerId\n    newPronostic.commentary = (createPronosticDto.commentary ? createPronosticDto.commentary : \"\")\n    return newPronostic.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sport.html":{"url":"classes/Sport.html","title":"class - Sport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/sport.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/sport.schema.ts:7\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class Sport extends Document {\n  @Prop()\n  name: string;\n\n}\n\nexport const SportSchema = SchemaFactory.createForClass(Sport);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SportsController.html":{"url":"controllers/SportsController.html","title":"controller - SportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports/sports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sports\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSport\n                            \n                            \n                                    Async\n                                delSport\n                            \n                            \n                                    Async\n                                getSport\n                            \n                            \n                                    Async\n                                getSports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delSport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSport(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSports()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete,Post,Request, UseGuards,Put, Param } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { SportsService } from './sports.service';\n\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n@Controller('sports')\nexport class SportsController {\n    constructor(private readonly SportsService: SportsService) {}\n    @UseGuards(JwtAuthGuard)\n    @Get(':id')\n    async getSport(@Param('id') id: string) {\n      const sport = await this.SportsService.getSport(id)\n      return sport;\n    }\n\n    @Get()\n    async getSports() {\n      const sports = await this.SportsService.getSports()\n      return sports;\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Post()\n    async addSport(@Request() req) {\n      let list\n      if (req.body.name){\n        list = await this.SportsService.addSport(req.body.name)\n      }\n       else {\n        throw new HttpException({\n            message: 'Name is Mandatory',\n          }, HttpStatus.BAD_REQUEST);\n       }\n      return list;\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Delete()\n    async delSport(@Request() req) {\n      if (req.body.id){\n        return await this.SportsService.delSport(req.body.id)\n      } else {\n        throw new HttpException({\n            message: 'Id is Mandatory',\n          }, HttpStatus.BAD_REQUEST);\n      }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SportsModule.html":{"url":"modules/SportsModule.html","title":"module - SportsModule","body":"\n                   \n\n\n\n\n    Modules\n    SportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SportsModule\n\n\n\ncluster_SportsModule_providers\n\n\n\n\nSportsService\n\nSportsService\n\n\n\nSportsModule\n\nSportsModule\n\nSportsModule -->\n\nSportsService->SportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sports/sports.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SportsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SportsController } from './sports.controller';\nimport { SportsService } from './sports.service';\nimport { Sport, SportSchema } from '../schemas/sport.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports:[MongooseModule.forFeature([{ name: Sport.name, schema: SportSchema }])],\n  controllers: [SportsController],\n  providers: [SportsService]\n})\nexport class SportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SportsService.html":{"url":"injectables/SportsService.html","title":"injectable - SportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports/sports.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSport\n                            \n                            \n                                    Async\n                                delSport\n                            \n                            \n                                    Async\n                                getSport\n                            \n                            \n                                    Async\n                                getSports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/sports/sports.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SportModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSport(name)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delSport(sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSport(id)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSports()\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Sport } from '../schemas/sport.schema';\nimport { CreateMySportDto } from '../dto/create-mySport.dto';\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n\n@Injectable()\nexport class SportsService {\n    constructor( @InjectModel(Sport.name) private SportModel: Model){}\n\n    async getSport(id){\n        try {\n            const sport = await this.SportModel.findById(id).orFail();\n            return sport;\n        } catch (error) {\n            throw new HttpException({\n                message: 'Invalid Sport ID',\n              }, HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    async getSports(){\n            const sport = await this.SportModel.find({});\n            return sport;\n\n    }\n\n    async addSport(name){\n        const newSport = await this.SportModel.create({name: name});\n        newSport.save()\n        return newSport\n    }\n\n    async delSport(sportId){\n        // del a sport in your mySports array.\n        // :sportId = id extract to the API\n        // return JSON\n        await this.SportModel.findByIdAndDelete(sportId);\n        return {\n            message: \"Deleted ok\"\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Matches(passwordRegex)@ValidateIf(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(10)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, ValidateIf} from 'class-validator';\n\nconst passwordRegex = new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})');\n\nexport class UpdateUserDto {\n\n  @MinLength(1)\n  firstName: string;\n\n  @MinLength(1)\n  lastName: string;\n\n  @IsEmail()\n  email: string;\n\n  @MinLength(10)\n  phone: string;\n\n  @Matches(passwordRegex)\n  @ValidateIf( p => p.password !== \"\")\n  password: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/user.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class User extends Document {\n  @Prop()\n  firstName: string;\n\n  @Prop()\n  lastName: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  phone: string;\n\n  @Prop()\n  isAdmin: boolean;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminCreate\n                            \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminCreate(req, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('admin/createUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminUpdate(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('admin/updateUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, Post, Param, Delete, Patch, UseGuards, Request} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\n\nimport { User } from '../schemas/user.schema';\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n@Controller('users')\nexport class UsersController {\nconstructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto) {\n    if(await this.usersService.userExists(createUserDto)){\n      throw new HttpException({\n        message: 'User already Exist',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    return await this.usersService.create(createUserDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(@Request() req): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.findAll();\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async findOne(@Request() req, @Param('id') id: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.findUserById(id);\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async delete(@Request() req, @Param('id') id: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.deleteUser(id);\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch()\n  async update(@Request() req, @Body() body) {\n    const id = req.user.id\n    return this.usersService.update(id, body);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('admin/createUser')\n  async adminCreate(@Request() req,@Body() createUserDto: CreateUserDto) {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      if(await this.usersService.userExists(createUserDto)){\n        throw new HttpException({\n          message: 'User already Exist',\n        }, HttpStatus.BAD_REQUEST);\n      }\n      return await this.usersService.adminCreate(createUserDto);\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch('admin/updateUser')\n  async adminUpdate(@Request() req, @Body() body) {\n    const id = req.user.id\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.adminUpdate(body.id, body);\n    }\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';;\nimport { User, UserSchema } from '../schemas/user.schema';\nimport { MySport, MySportSchema } from '../schemas/mySport.schema';\nimport { MyFavorite, MyFavoriteSchema } from '../schemas/myFavorite.schema';\n\n\n@Module({\n    imports: [\n      MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n      MongooseModule.forFeature([{ name: MySport.name, schema: MySportSchema }]),\n      MongooseModule.forFeature([{ name: MyFavorite.name, schema: MyFavoriteSchema }])\n\n    ],\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n  })\n  export class UsersModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminCreate\n                            \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                isAdmin\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                userExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, mySportModel: Model, myFavoriteModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mySportModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        myFavoriteModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminCreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminUpdate(id, body)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            isAdmin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isAdmin(id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id, body)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            userExists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    userExists(createUserDTO: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../schemas/user.schema';\nimport { MySport } from '../schemas/mySport.schema';\nimport { MyFavorite } from '../schemas/myFavorite.schema';\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\n\nimport { isNull, isError } from 'util';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model,\n  @InjectModel(MySport.name) private mySportModel: Model,\n  @InjectModel(MyFavorite.name) private myFavoriteModel: Model,\n  ) {\n  }\n\n  async isAdmin(id) : Promise {\n    const user = await this.userModel.findById(id);\n    if (!isNull(user)){\n      return user.isAdmin\n    }\n    return false;\n  }\n\n\n  async userExists(createUserDTO: CreateUserDto): Promise {\n    const user = await this.userModel.findOne({ email: createUserDTO.email });\n    if(isNull(user)){\n      return false;\n    }\n    return true;\n  }\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const email = createUserDto.email;\n    const firstName = createUserDto.firstName;\n    const lastName = createUserDto.lastName;\n    const phone = createUserDto.phone;\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n    const createdUser = await new this.userModel({ firstName: firstName, lastName: lastName, phone: phone, email: email, password: hashedPassword ,isAdmin: false });\n    return createdUser.save();\n  }\n\n\n  async findAll(): Promise  {\n    return this.userModel.find().exec();\n  }\n\n  async findOne(email: string): Promise {\n   const user = await this.userModel.find({'email':email}).exec();\n   return user;\n  }\n\n  async findUserById(id: string): Promise {\n    const user = await this.userModel.findById(id);\n    return user;\n  }\n\n  async deleteUser(id) : Promise{\n    const result = await this.userModel.deleteOne({'_id':id}).exec();\n    if(result.deletedCount === 0){\n      throw new HttpException({\n        message: 'No user deleted',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    else return {\n      message : \"User Deleted !\",\n    }\n  }\n\n \n  async update(id, body): Promise{\n    const user = await this.userModel.findById(id);\n    let userUpdated = user;\n    let updated = true;\n    \n    if (body.hasOwnProperty(\"firstName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"firstName\": body.firstName},{new:true,useFindAndModify:false}); \n      updated = true;\n    }\n    if (body.hasOwnProperty(\"lastName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"lastName\": body.lastName},{new:true,useFindAndModify:false});\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"email\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"email\": body.email},{new:true,useFindAndModify:false}); \n      updated = true;\n    } \n    if (body.hasOwnProperty(\"password\")){\n      const hashedPassword = await bcrypt.hash(body.password, 10);\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"password\": hashedPassword},{new:true,useFindAndModify:false}); \n      updated = true;\n    } \n    if (body.hasOwnProperty(\"phone\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"phone\": body.phone},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if(updated){\n      return userUpdated;\n    }\n    else{\n      throw new HttpException({\n        message: 'Nothing Updated',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  async adminCreate(createUserDto: CreateUserDto): Promise {\n    const email = createUserDto.email;\n    const firstName = createUserDto.firstName;\n    const lastName = createUserDto.lastName;\n    const phone = createUserDto.phone;\n    const isAdmin = createUserDto.isAdmin;\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n    const createdUser = await new this.userModel({ firstName: firstName, lastName: lastName, phone: phone, email: email, password: hashedPassword ,isAdmin: isAdmin });\n    return createdUser.save();\n  }\n\n  async adminUpdate(id, body): Promise{\n    const user = await this.userModel.findById(id);\n    let userUpdated = user;\n    let updated = false;\n    if (body.hasOwnProperty(\"firstName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"firstName\": body.firstName},{new:true,useFindAndModify:false});\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"lastName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"lastName\": body.lastName},{new:true,useFindAndModify:false});\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"email\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"email\": body.email},{new:true,useFindAndModify:false}); \n      updated = true;\n    } \n    if (body.hasOwnProperty(\"password\")){\n      const hashedPassword = await bcrypt.hash(body.password, 10);\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"password\": hashedPassword},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if (body.hasOwnProperty(\"phone\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"phone\": body.phone},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if (body.hasOwnProperty(\"isAdmin\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"isAdmin\": body.isAdmin},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if(updated){\n      return userUpdated;\n    }\n    else{\n      throw new HttpException({\n        message: 'Nothing Updated',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/MyFavorites/MyFavorites.controller.ts\n            \n            controller\n            MyFavoritesController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/MyFavorites/MyFavorites.service.ts\n            \n            injectable\n            MyFavoritesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/MyPronostics/pronostics.controller.ts\n            \n            controller\n            PronosticsController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/MyPronostics/pronostics.service.ts\n            \n            injectable\n            PronosticsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/MySports/MySports.controller.ts\n            \n            controller\n            MySportsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/MySports/MySports.service.ts\n            \n            injectable\n            MySportsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/create-myFavorite.dto.ts\n            \n            class\n            CreateMyFavoriteDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dto/create-mySport.dto.ts\n            \n            class\n            CreateMySportDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dto/create-pronostic.dto.ts\n            \n            class\n            CreatePronosticDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/dto/create-sport.dto.ts\n            \n            class\n            CreateSportDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/dto/create-user.dto.ts\n            \n            variable\n            passwordRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/dto/update-user.dto.ts\n            \n            variable\n            passwordRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/myFavorite.schema.ts\n            \n            class\n            MyFavorite\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/schemas/myFavorite.schema.ts\n            \n            variable\n            MyFavoriteSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/mySport.schema.ts\n            \n            class\n            MySport\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/schemas/mySport.schema.ts\n            \n            variable\n            MySportSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/pronostic.schema.ts\n            \n            class\n            Pronostic\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/schemas/pronostic.schema.ts\n            \n            variable\n            PronosticSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/sport.schema.ts\n            \n            class\n            Sport\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/schemas/sport.schema.ts\n            \n            variable\n            SportSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sports/sports.controller.ts\n            \n            controller\n            SportsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/sports/sports.service.ts\n            \n            injectable\n            SportsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/mongoose : ^7.0.2\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @types/bcrypt : ^3.0.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cookie-parser : ^1.4.5\n        \n            dotenv : ^8.2.0\n        \n            fs : 0.0.1-security\n        \n            mongoose : ^5.10.3\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MyFavoritesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MySportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PronosticsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MyFavoritesModule\n\n\n\ncluster_MyFavoritesModule_exports\n\n\n\ncluster_MyFavoritesModule_providers\n\n\n\ncluster_MySportsModule\n\n\n\ncluster_MySportsModule_exports\n\n\n\ncluster_MySportsModule_providers\n\n\n\ncluster_PronosticsModule\n\n\n\ncluster_PronosticsModule_exports\n\n\n\ncluster_PronosticsModule_providers\n\n\n\ncluster_SportsModule\n\n\n\ncluster_SportsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nAppModule -->\n\nMyFavoritesModule->AppModule\n\n\n\n\n\nMyFavoritesService \n\nMyFavoritesService \n\nMyFavoritesService  -->\n\nMyFavoritesModule->MyFavoritesService \n\n\n\n\n\nMySportsModule\n\nMySportsModule\n\nAppModule -->\n\nMySportsModule->AppModule\n\n\n\n\n\nMySportsService \n\nMySportsService \n\nMySportsService  -->\n\nMySportsModule->MySportsService \n\n\n\n\n\nPronosticsModule\n\nPronosticsModule\n\nAppModule -->\n\nPronosticsModule->AppModule\n\n\n\n\n\nPronosticsService \n\nPronosticsService \n\nPronosticsService  -->\n\nPronosticsModule->PronosticsService \n\n\n\n\n\nSportsModule\n\nSportsModule\n\nAppModule -->\n\nSportsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nMyFavoritesService\n\nMyFavoritesService\n\nMyFavoritesModule -->\n\nMyFavoritesService->MyFavoritesModule\n\n\n\n\n\nMySportsService\n\nMySportsService\n\nMySportsModule -->\n\nMySportsService->MySportsModule\n\n\n\n\n\nPronosticsService\n\nPronosticsService\n\nPronosticsModule -->\n\nPronosticsService->PronosticsModule\n\n\n\n\n\nSportsService\n\nSportsService\n\nSportsModule -->\n\nSportsService->SportsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            MyFavoriteSchema   (src/.../myFavorite.schema.ts)\n                        \n                        \n                            MySportSchema   (src/.../mySport.schema.ts)\n                        \n                        \n                            passwordRegex   (src/.../create-user.dto.ts)\n                        \n                        \n                            passwordRegex   (src/.../update-user.dto.ts)\n                        \n                        \n                            PronosticSchema   (src/.../pronostic.schema.ts)\n                        \n                        \n                            SportSchema   (src/.../sport.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    secret: 'secretKey',\n  }\n                        \n                    \n\n\n            \n        \n\n    src/schemas/myFavorite.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MyFavoriteSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(MyFavorite)\n                        \n                    \n\n\n            \n        \n\n    src/schemas/mySport.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MySportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(MySport)\n                        \n                    \n\n\n            \n        \n\n    src/dto/create-user.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRegex\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})')\n                        \n                    \n\n\n            \n        \n\n    src/dto/update-user.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRegex\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})')\n                        \n                    \n\n\n            \n        \n\n    src/schemas/pronostic.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PronosticSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Pronostic)\n                        \n                    \n\n\n            \n        \n\n    src/schemas/sport.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Sport)\n                        \n                    \n\n\n            \n        \n\n    src/schemas/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
