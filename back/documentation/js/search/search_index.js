var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.04,1,2.3]],["body/controllers/AppController.html",[0,1.66,1,3.672,2,1.317,3,0.247,4,0.212,5,0.212,6,3.672,7,0.486,8,1.66,9,5.459,10,4.331,11,1.317,12,0.025,13,4.331,14,0.625,15,4.331,16,1.236,17,0.78,18,1.317,19,2.841,20,1.317,21,0.392,22,2.438,23,2.254,24,3.672,25,0.674,26,1.949,27,2.438,28,2.438,29,3.366,30,3.672,31,0.247,32,0.139,33,2.092,34,2.438,35,2.438,36,4.331,37,4.331,38,1.317,39,4.331,40,0.015,41,0.019,42,0.015]],["title/modules/AppModule.html",[43,1.04,44,2.3]],["body/modules/AppModule.html",[1,3.054,2,1.381,3,0.187,4,0.16,5,0.16,12,0.025,21,0.439,25,0.51,29,3.439,30,2.779,31,0.187,32,0.105,40,0.011,41,0.016,42,0.011,43,1.584,44,4.643,45,1.377,46,1.377,47,1.584,48,1.584,49,1.377,50,2.516,51,1.584,52,2.779,53,2.779,54,2.779,55,3.618,56,3.743,57,3.618,58,3.743,59,3.743,60,3.439,61,2.193,62,1.584,63,1.584,64,3.278,65,2.782,66,2.782,67,3.054,68,3.278,69,1.846,70,0.824,71,2.779,72,3.278,73,3.278,74,3.278,75,3.278,76,3.278,77,3.278,78,3.278,79,3.278,80,3.278,81,3.278]],["title/injectables/AppService.html",[29,1.925,82,0.706]],["body/injectables/AppService.html",[3,0.293,4,0.251,5,0.251,12,0.024,21,0.337,25,0.8,29,3.411,31,0.293,32,0.164,40,0.018,41,0.021,42,0.018,82,1.252,83,2.019,84,4.356]],["title/controllers/AuthController.html",[0,1.04,85,2.3]],["body/controllers/AuthController.html",[0,1.303,2,1.303,3,0.245,4,0.209,5,0.209,7,0.481,8,1.649,11,1.303,12,0.025,14,0.618,16,1.223,17,0.772,18,1.303,19,2.822,20,1.303,21,0.39,22,2.413,23,2.23,25,0.667,31,0.245,32,0.137,33,2.071,38,1.303,40,0.015,41,0.019,42,0.015,85,3.648,86,3.634,87,2.413,88,4.286,89,1.927,90,4.598,91,4.286,92,4.286,93,4.286,94,4.286,95,3.634,96,2.413,97,3.096,98,3.204,99,4.286,100,4.286,101,4.286,102,4.286,103,4.286]],["title/modules/AuthModule.html",[43,1.04,55,2.095]],["body/modules/AuthModule.html",[2,1.455,3,0.202,4,0.173,5,0.173,12,0.025,21,0.432,25,0.551,31,0.202,32,0.113,40,0.012,41,0.017,42,0.012,43,1.648,45,1.487,46,1.487,47,1.71,48,1.71,49,1.487,50,2.619,51,1.71,55,4.149,60,3.52,61,2.312,62,1.71,63,1.71,67,3.219,71,3.001,85,3.646,96,1.993,97,3.253,98,2.646,104,3.001,105,3.001,106,3.54,107,3.831,108,3.831,109,3.54,110,4.785,111,3.54,112,3.54,113,3.54,114,3.54,115,2.646,116,2.381,117,3.001,118,3.54,119,3.001,120,3.001,121,3.54,122,3.54,123,3.54,124,3.54]],["title/injectables/AuthService.html",[82,0.706,97,1.779]],["body/injectables/AuthService.html",[3,0.181,4,0.155,5,0.155,7,0.357,8,1.351,12,0.025,14,0.739,16,1.462,17,0.922,18,1.558,20,1.351,21,0.364,25,0.495,31,0.181,32,0.102,38,1.558,40,0.018,41,0.015,42,0.011,82,0.918,83,1.249,89,1.959,90,3.766,97,2.312,115,2.375,125,2.694,126,4.443,127,1.866,128,3.177,129,3.148,130,6.209,131,3.177,132,0.859,133,4.443,134,3.177,135,1.659,136,4.443,137,1.335,138,5.123,139,3.177,140,2.312,141,2.501,142,3.177,143,3.321,144,2.312,145,1.376,146,1.636,147,3.177,148,4.443,149,3.177,150,3.177,151,3.177,152,2.137,153,1.789,154,3.177,155,2.694,156,3.177,157,1.249,158,3.177,159,1.789,160,3.177,161,1.789,162,3.177,163,1.789,164,3.177,165,1.789,166,3.177,167,5.123,168,3.177]],["title/classes/CreateMyFavoriteDto.html",[32,0.109,169,2.3]],["body/classes/CreateMyFavoriteDto.html",[3,0.254,4,0.218,5,0.218,7,0.5,12,0.024,14,0.874,21,0.292,31,0.254,32,0.178,40,0.016,41,0.019,42,0.016,132,1.015,137,1.469,169,3.738,170,1.64,171,3.3,172,3.777,173,2.184,174,3.152,175,4.074,176,2.544,177,4.455,178,4.455,179,4.455,180,2.73,181,2.73,182,2.73,183,2.997,184,2.508]],["title/classes/CreateMySportDto.html",[32,0.109,185,2.095]],["body/classes/CreateMySportDto.html",[3,0.254,4,0.218,5,0.218,7,0.5,12,0.024,14,0.874,21,0.292,31,0.254,32,0.178,40,0.016,41,0.019,42,0.016,132,1.015,137,1.469,170,1.64,171,3.3,173,2.184,174,3.152,175,4.074,176,2.544,180,2.73,181,2.73,182,2.73,183,2.997,184,2.508,185,3.405,186,3.777,187,4.455,188,4.455,189,4.455]],["title/classes/CreatePronosticDto.html",[32,0.109,190,2.095]],["body/classes/CreatePronosticDto.html",[3,0.234,4,0.2,5,0.2,7,0.461,11,1.247,12,0.024,14,0.918,21,0.269,31,0.234,32,0.169,40,0.014,41,0.018,42,0.014,132,1.125,137,1.509,170,1.51,171,3.39,173,2.073,176,2.449,180,2.514,181,2.514,182,2.514,183,3.92,184,2.309,190,3.232,191,3.477,192,3.92,193,3.92,194,3.92,195,4.102,196,4.102,197,4.102,198,4.102,199,4.102]],["title/classes/CreateSportDto.html",[32,0.109,200,2.556]],["body/classes/CreateSportDto.html",[3,0.284,4,0.243,5,0.243,7,0.558,12,0.023,14,0.717,17,1.144,31,0.284,32,0.159,40,0.017,41,0.021,42,0.017,132,0.834,137,1.312,170,1.831,171,3.093,173,2.336,200,4.442,201,4.216,202,4.973]],["title/classes/CreateUserDto.html",[32,0.109,203,2.095]],["body/classes/CreateUserDto.html",[3,0.206,4,0.176,5,0.176,7,0.406,11,1.912,12,0.024,14,0.907,21,0.237,31,0.206,32,0.155,40,0.013,41,0.017,42,0.013,132,1.054,137,1.476,140,2.85,145,0.851,153,3.084,159,3.084,161,3.084,163,3.084,165,3.084,170,1.33,171,3.343,173,1.906,180,3.356,181,2.214,182,2.214,183,3.684,184,2.034,203,2.973,204,2.43,205,3.062,206,4.964,207,3.062,208,4.112,209,3.612,210,3.062,211,4.112,212,3.612,213,4.112,214,3.062,215,2.43,216,1.33,217,2.7,218,2.7,219,2.7,220,3.626,221,2.7,222,2.7]],["title/injectables/JwtAuthGuard.html",[26,1.539,82,0.706]],["body/injectables/JwtAuthGuard.html",[3,0.285,4,0.244,5,0.244,12,0.024,21,0.391,25,0.777,26,2.68,31,0.285,32,0.16,40,0.017,41,0.021,42,0.017,82,1.231,83,1.962,95,4.233,96,2.811,223,4.233,224,4.233,225,2.412,226,4.993]],["title/injectables/JwtStrategy.html",[82,0.706,107,2.095]],["body/injectables/JwtStrategy.html",[3,0.226,4,0.193,5,0.193,7,0.444,8,1.567,12,0.025,14,0.743,16,1.13,17,0.713,18,1.203,20,1.203,21,0.398,25,0.616,31,0.226,32,0.127,38,1.203,40,0.014,41,0.018,42,0.014,82,1.064,83,1.555,89,1.856,96,2.228,107,3.158,116,2.662,117,3.355,120,3.355,127,2.407,132,0.663,140,2.06,155,3.355,157,1.555,159,2.228,161,2.228,163,2.228,165,2.228,225,1.912,227,3.355,228,4.369,229,3.958,230,5.153,231,3.958,232,3.958,233,3.355,234,2.958,235,3.355,236,3.355,237,3.355,238,3.355,239,3.958,240,3.958,241,3.958,242,3.355,243,3.958,244,3.958,245,3.958,246,3.958,247,3.958,248,3.958,249,3.958]],["title/injectables/LocalStrategy.html",[82,0.706,108,2.095]],["body/injectables/LocalStrategy.html",[3,0.216,4,0.184,5,0.184,7,0.424,8,1.52,12,0.025,14,0.721,16,1.426,17,0.9,18,1.52,20,1.148,21,0.391,25,0.588,31,0.216,32,0.121,33,1.825,38,1.148,40,0.013,41,0.017,42,0.013,82,1.032,83,1.484,89,1.814,96,2.127,97,3.315,98,2.823,108,3.062,127,1.587,132,0.838,135,1.814,137,1.406,140,2.601,141,2.814,145,0.89,146,1.391,153,3.356,216,1.391,225,1.825,228,4.237,233,3.202,234,2.823,236,3.202,237,3.202,238,3.202,250,3.202,251,3.777,252,3.777,253,4.997,254,3.777,255,3.202,256,4.997,257,3.777,258,3.777,259,1.825]],["title/classes/MyFavorite.html",[32,0.109,260,1.779]],["body/classes/MyFavorite.html",[3,0.205,4,0.175,5,0.175,7,0.403,11,1.66,12,0.025,14,0.788,16,1.559,17,0.983,21,0.317,31,0.276,32,0.115,40,0.013,41,0.017,42,0.013,70,0.903,132,0.915,137,1.459,145,0.846,157,1.899,170,1.322,173,1.899,174,3.172,175,4.1,176,2.561,225,2.334,260,2.514,261,2.684,262,3.346,263,3.931,264,3.591,265,3.591,266,2.022,267,4.832,268,2.721,269,2.174,270,3.591,271,2.03,272,2.201,273,1.322,274,2.415,275,2.415,276,3.591,277,2.684,278,2.457,279,2.201,280,3.045]],["title/controllers/MyFavoritesController.html",[0,1.04,66,2.095]],["body/controllers/MyFavoritesController.html",[0,1.903,2,0.804,3,0.151,4,0.129,5,0.129,7,0.297,8,1.183,11,1.405,12,0.025,14,0.666,16,1.319,17,0.832,18,1.405,19,3.203,20,1.405,21,0.303,22,1.488,23,2.025,25,0.411,26,1.189,27,1.488,28,1.488,31,0.151,32,0.085,33,1.277,34,1.488,35,2.601,38,1.728,40,0.009,41,0.014,42,0.009,66,2.385,87,1.488,89,1.994,127,1.11,135,1.261,145,0.623,146,1.701,174,1.375,175,2.618,266,1.488,278,2.293,281,2.24,282,5.097,283,2.025,284,3.823,285,3.3,286,3.3,287,3.892,288,2.643,289,1.777,290,2.643,291,2.618,292,3.81,293,3.428,294,3.428,295,3.124,296,2.643,297,1.975,298,2.643,299,2.462,300,2.643,301,1.777,302,2.643,303,3.3,304,3.3,305,1.777,306,1.975,307,2.87,308,2.24,309,2.643,310,1.88,311,2.643,312,4.248,313,2.643,314,2.643,315,4.62,316,3.892,317,2.643,318,2.618,319,2.618,320,2.643,321,2.643]],["title/modules/MyFavoritesModule.html",[43,1.04,56,2.095]],["body/modules/MyFavoritesModule.html",[2,1.583,3,0.23,4,0.196,5,0.196,12,0.025,17,0.724,21,0.415,25,0.626,31,0.23,32,0.129,40,0.014,41,0.018,42,0.014,43,1.756,45,1.69,46,1.69,47,1.943,48,1.943,49,1.69,50,2.79,51,2.79,56,4.042,61,2.516,62,1.943,63,1.943,66,3.539,69,2.265,70,1.011,260,2.093,271,1.69,279,3.191,307,3.886,308,3.41,322,3.41,323,3.41,324,3.41,325,4.022,326,4.022,327,2.705,328,3.006,329,3.41]],["title/injectables/MyFavoritesService.html",[82,0.706,307,1.925]],["body/injectables/MyFavoritesService.html",[3,0.162,4,0.138,5,0.138,7,0.318,8,1.244,12,0.025,14,0.759,16,1.503,17,0.948,18,1.601,20,1.461,21,0.367,25,0.441,31,0.162,32,0.091,38,1.77,40,0.01,41,0.014,42,0.01,70,0.711,82,0.845,83,1.112,89,2.029,127,1.719,132,0.686,135,1.705,137,1.285,144,1.472,145,0.964,146,1.769,157,1.608,169,1.903,174,2.501,176,2.212,260,1.472,268,2.303,273,1.506,278,2.513,283,3.029,285,3.468,286,3.468,291,2.752,292,3.935,299,1.976,303,4.463,304,4.463,307,2.303,310,2.9,327,1.903,330,2.399,331,4.091,332,2.829,333,2.829,334,3.468,335,2.829,336,4.805,337,2.829,338,4.351,339,4.091,340,2.829,341,2.829,342,2.829,343,1.593,344,1.472,345,2.829,346,2.399,347,2.829,348,2.829,349,2.829,350,2.829,351,4.091,352,2.829,353,2.829,354,2.829,355,2.829,356,1.273,357,1.734]],["title/classes/MySport.html",[32,0.109,358,1.779]],["body/classes/MySport.html",[3,0.216,4,0.184,5,0.184,7,0.424,11,1.703,12,0.025,14,0.808,21,0.328,31,0.285,32,0.121,40,0.013,41,0.017,42,0.013,70,0.949,132,0.939,137,1.473,145,0.89,170,1.391,173,1.964,174,3.226,176,2.504,225,2.414,262,3.432,263,3.981,271,2.1,272,2.315,273,1.391,274,2.541,275,2.541,277,2.823,283,1.966,358,2.601,359,2.823,360,4.009,361,3.777,362,3.777,363,3.777,364,2.541,365,3.777,366,3.777,367,5.601,368,2.315,369,3.202]],["title/controllers/MySportsController.html",[0,1.04,65,2.095]],["body/controllers/MySportsController.html",[0,1.863,2,0.788,3,0.148,4,0.127,5,0.127,7,0.291,8,1.167,11,1.389,12,0.025,14,0.659,16,1.304,17,0.823,18,1.389,19,3.188,20,1.389,21,0.331,22,1.46,23,1.997,25,0.598,26,1.167,27,1.46,28,1.46,31,0.148,32,0.083,33,1.253,34,1.46,35,2.573,38,1.716,40,0.009,41,0.013,42,0.009,65,2.352,87,1.46,89,1.984,135,1.243,145,0.611,146,1.682,157,1.019,216,0.955,259,1.253,266,1.46,268,2.161,269,2.272,278,2.056,283,1.997,284,3.797,289,1.744,291,2.581,293,3.397,294,3.397,295,3.095,297,1.938,299,2.44,301,1.744,305,1.744,306,1.938,310,2.727,312,4.219,318,1.744,319,2.581,356,1.167,360,1.744,370,2.198,371,5.193,372,3.254,373,3.254,374,3.254,375,2.593,376,2.593,377,2.593,378,2.593,379,2.593,380,2.593,381,1.744,382,2.573,383,2.198,384,1.997,385,1.349,386,1.46,387,2.593,388,2.593,389,2.593,390,2.593,391,3.838,392,2.593,393,2.593,394,2.198,395,2.593,396,1.349]],["title/modules/MySportsModule.html",[43,1.04,57,2.095]],["body/modules/MySportsModule.html",[2,1.583,3,0.23,4,0.196,5,0.196,12,0.025,17,0.724,21,0.415,25,0.626,31,0.23,32,0.129,40,0.014,41,0.018,42,0.014,43,1.756,45,1.69,46,1.69,47,1.943,48,1.943,49,1.69,50,2.79,51,2.79,57,4.042,61,2.516,62,1.943,63,1.943,65,3.539,69,2.265,70,1.011,271,1.69,328,3.006,358,2.093,368,3.191,382,3.886,383,3.41,397,3.41,398,3.41,399,3.41,400,4.022,401,4.022,402,2.705,403,3.41]],["title/injectables/MySportsService.html",[82,0.706,382,1.925]],["body/injectables/MySportsService.html",[3,0.163,4,0.139,5,0.139,7,0.321,8,1.252,12,0.025,14,0.763,16,1.509,17,0.952,18,1.608,20,1.469,21,0.368,25,0.445,31,0.163,32,0.091,38,1.776,40,0.01,41,0.014,42,0.01,70,0.718,82,0.851,83,1.122,89,2.033,127,1.73,132,0.479,135,1.334,137,1.167,144,1.486,145,0.97,146,1.778,174,1.486,176,2.221,185,1.75,268,2.319,269,2.379,273,1.516,278,2.379,283,3.039,291,2.77,292,3.952,299,1.989,310,2.908,338,4.365,343,1.608,344,1.486,356,1.285,357,1.75,358,1.486,360,3.928,364,2.77,372,3.491,373,3.491,374,3.491,382,2.319,402,1.921,404,2.421,405,2.856,406,2.856,407,3.491,408,4.118,409,2.856,410,5.287,411,4.118,412,2.856,413,4.118,414,2.856,415,2.421,416,2.421,417,4.118,418,2.856,419,4.118,420,2.856,421,2.856,422,2.856,423,2.856,424,2.421]],["title/classes/Pronostic.html",[32,0.109,425,1.925]],["body/classes/Pronostic.html",[3,0.212,4,0.182,5,0.182,7,0.418,11,1.876,12,0.025,14,0.89,21,0.325,31,0.283,32,0.119,40,0.013,41,0.017,42,0.013,70,0.935,132,1.102,137,1.484,145,0.877,170,1.37,173,1.944,176,2.335,192,3.985,193,3.739,194,3.739,225,2.39,262,3.406,263,4.153,271,2.079,272,2.28,273,1.37,274,2.502,275,2.502,425,2.786,426,2.781,427,3.72,428,3.72,429,3.72,430,3.72,431,3.72,432,3.72,433,3.72,434,2.502,435,3.154]],["title/controllers/PronosticsController.html",[0,1.04,436,2.3]],["body/controllers/PronosticsController.html",[0,1.797,2,0.6,3,0.113,4,0.096,5,0.096,7,0.222,8,0.947,11,1.332,12,0.025,14,0.632,16,1.101,17,0.695,18,1.332,19,1.621,20,1.332,21,0.361,22,1.754,23,1.621,25,0.485,26,0.888,27,1.111,28,1.111,31,0.113,32,0.063,33,0.954,34,1.111,35,2.467,38,1.721,40,0.007,41,0.011,42,0.007,70,0.496,87,1.111,89,1.947,127,0.829,132,0.734,135,1.009,137,1.214,141,2.854,144,1.027,145,0.734,146,1.421,152,1.328,157,2.085,176,1.841,190,3.551,192,1.328,193,3.569,194,1.328,216,1.421,259,1.505,266,1.111,268,1.754,273,0.727,278,2.387,283,1.621,284,3.807,289,1.328,293,3.569,294,3.569,295,3.252,299,2.304,301,1.328,305,1.328,310,1.864,318,2.095,319,2.095,343,1.111,344,1.027,356,1.402,381,2.595,384,2.008,385,1.027,386,1.111,396,1.621,425,2.987,436,2.095,437,1.674,438,4.798,439,2.595,440,2.947,441,2.329,442,1.974,443,1.974,444,1.974,445,1.674,446,1.974,447,1.974,448,3.714,449,2.641,450,1.974,451,1.974,452,1.974,453,3.115,454,3.271,455,2.467,456,1.674,457,1.674,458,1.476,459,1.974,460,2.641,461,1.974,462,1.974,463,1.974,464,1.974,465,1.328,466,1.974,467,1.674,468,2.641,469,1.674,470,1.974,471,1.974,472,1.674,473,1.974,474,1.974,475,1.974,476,3.115,477,1.674,478,1.974,479,1.974,480,1.974,481,1.974,482,1.674,483,1.974,484,1.974]],["title/modules/PronosticsModule.html",[43,1.04,58,2.095]],["body/modules/PronosticsModule.html",[2,1.57,3,0.227,4,0.194,5,0.194,12,0.025,17,0.715,21,0.413,25,0.618,31,0.227,32,0.127,40,0.014,41,0.018,42,0.014,43,1.745,45,1.668,46,1.668,47,1.918,48,1.918,49,1.668,50,2.772,51,2.772,58,4.029,61,2.495,62,1.918,63,1.918,67,2.671,69,2.236,70,0.998,271,1.668,425,2.236,434,3.473,436,3.86,455,3.879,456,3.366,458,2.968,485,3.366,486,3.366,487,3.366,488,3.97,489,3.97,490,3.366,491,3.97]],["title/injectables/PronosticsService.html",[82,0.706,455,1.925]],["body/injectables/PronosticsService.html",[3,0.111,4,0.095,5,0.095,7,0.219,8,0.937,12,0.025,14,0.727,16,1.352,17,0.853,18,1.44,20,1.605,21,0.331,25,0.48,31,0.111,32,0.062,38,1.664,40,0.013,41,0.011,42,0.007,70,0.489,82,0.636,83,0.765,89,2.016,127,0.818,132,0.641,135,0.998,137,1.274,141,3.249,144,1.013,145,1.024,146,1.6,157,1.98,176,2.299,190,3.67,192,1.309,193,3.388,194,1.309,216,1.134,259,0.94,266,1.734,268,2.836,273,1.134,278,2.131,283,3.003,284,3.881,293,3.881,294,3.881,295,3.536,299,1.488,310,2.288,338,4.314,343,1.096,344,1.013,356,1.386,357,1.888,384,1.603,385,1.013,396,1.013,425,3.539,438,3.685,439,2.924,440,2.924,448,3.685,449,2.611,454,2.611,455,1.734,457,1.65,458,1.455,460,2.611,465,2.072,468,2.611,469,2.611,472,2.611,477,1.65,492,1.65,493,3.08,494,3.08,495,3.08,496,1.946,497,1.946,498,3.08,499,1.946,500,3.08,501,1.946,502,1.946,503,3.08,504,1.946,505,3.08,506,1.946,507,1.946,508,1.946,509,1.946,510,4.347,511,1.946,512,1.946,513,1.65,514,1.946,515,1.946,516,1.946,517,1.946,518,1.946,519,1.946]],["title/classes/Sport.html",[32,0.109,269,1.539]],["body/classes/Sport.html",[3,0.252,4,0.215,5,0.215,7,0.495,11,1.34,12,0.025,14,0.636,17,1.085,21,0.362,31,0.315,32,0.141,40,0.015,41,0.019,42,0.015,70,1.108,132,0.739,137,1.219,145,1.039,170,1.623,173,2.169,225,2.667,262,3.693,263,3.693,269,2.484,271,2.319,272,2.701,273,1.623,274,2.965,275,2.965,364,2.965,520,3.295,521,4.408,522,4.408,523,4.408,524,2.965,525,3.737]],["title/controllers/SportsController.html",[0,1.04,526,2.3]],["body/controllers/SportsController.html",[0,0.908,2,0.908,3,0.171,4,0.146,5,0.146,7,0.335,8,1.293,11,1.641,12,0.025,14,0.778,16,1.414,17,0.972,18,1.506,19,2.808,20,1.641,21,0.354,23,1.554,24,2.532,25,0.662,26,1.344,27,1.681,28,1.681,31,0.171,32,0.096,33,1.443,34,1.681,35,2.788,38,1.641,40,0.01,41,0.015,42,0.01,87,1.681,89,2.13,132,0.501,137,1.093,145,1.002,146,1.987,157,1.946,216,1.566,259,2.054,269,1.913,278,1.344,289,2.009,297,2.232,299,1.443,312,3.702,319,2.86,356,1.913,364,3.331,384,2.577,385,1.554,386,1.681,394,2.532,396,2.213,526,2.86,527,2.532,528,3.605,529,3.605,530,3.605,531,4.575,532,2.986,533,2.986,534,2.986,535,2.986,536,2.532,537,2.532,538,2.986,539,2.986,540,2.986,541,2.788,542,2.532,543,2.986,544,2.532,545,2.986,546,2.986,547,2.986,548,2.986,549,2.986,550,2.986,551,2.986,552,2.986]],["title/modules/SportsModule.html",[43,1.04,59,2.095]],["body/modules/SportsModule.html",[2,1.621,3,0.238,4,0.204,5,0.204,12,0.025,17,0.751,21,0.42,25,0.649,31,0.238,32,0.134,40,0.015,41,0.019,42,0.015,43,1.786,45,1.752,46,1.752,47,2.015,48,2.015,49,1.752,50,2.838,51,2.015,59,4.01,61,2.575,62,2.015,63,2.015,69,2.348,70,1.048,269,1.877,271,1.752,328,3.118,524,3.585,526,3.951,541,3.684,542,3.536,553,3.536,554,3.536,555,4.171,556,4.171,557,3.536,558,4.171]],["title/injectables/SportsService.html",[82,0.706,541,1.925]],["body/injectables/SportsService.html",[3,0.169,4,0.144,5,0.144,7,0.332,8,1.284,12,0.025,14,0.82,16,1.534,17,1.064,18,1.634,20,1.634,21,0.388,25,0.658,31,0.169,32,0.095,38,1.728,40,0.01,41,0.015,42,0.01,70,0.743,82,0.872,83,1.162,89,2.126,127,1.774,132,0.496,144,1.539,145,1.161,146,1.978,157,1.936,185,1.812,216,1.089,259,1.429,269,2.737,273,1.555,310,2.745,318,1.989,343,1.665,344,1.539,356,1.9,357,1.812,360,2.841,371,2.507,384,2.198,385,1.539,386,1.665,396,1.539,415,2.507,424,2.507,513,2.507,528,3.58,529,3.58,530,3.58,531,4.555,536,3.58,541,2.378,557,2.507,559,2.507,560,2.958,561,2.958,562,4.223,563,4.223,564,2.958,565,4.223,566,2.958,567,2.958,568,2.958,569,2.958,570,2.958,571,2.958,572,2.958,573,2.958,574,2.958,575,4.223,576,2.958,577,2.958,578,2.958,579,2.958,580,2.958,581,2.958,582,2.958]],["title/classes/UpdateUserDto.html",[32,0.109,583,2.095]],["body/classes/UpdateUserDto.html",[3,0.211,4,0.181,5,0.181,7,0.415,11,1.872,12,0.025,14,0.888,21,0.243,31,0.211,32,0.158,40,0.013,41,0.017,42,0.013,132,1.032,137,1.482,140,2.884,145,0.871,153,3.12,159,3.12,161,3.12,165,3.12,170,1.362,173,1.937,180,3.396,181,2.266,182,2.266,184,2.082,204,2.487,205,3.135,206,5.011,207,3.135,210,3.135,211,3.135,213,4.178,214,3.135,215,2.487,216,1.362,217,2.764,218,2.764,219,2.764,220,3.684,221,2.764,222,2.764,583,3.02,584,4.733,585,3.698,586,3.698,587,4.928,588,3.698,589,3.698]],["title/classes/User.html",[32,0.109,135,1.108]],["body/classes/User.html",[3,0.209,4,0.179,5,0.179,7,0.412,11,1.92,12,0.025,14,0.911,21,0.322,31,0.28,32,0.117,40,0.013,41,0.017,42,0.013,70,0.921,132,1.059,135,1.587,137,1.48,140,2.871,145,0.864,153,3.107,159,3.107,161,3.107,163,3.107,165,3.107,170,1.35,173,1.925,208,4.153,225,2.367,262,3.381,263,4.197,271,2.058,272,2.246,273,1.35,590,2.74,591,3.665,592,3.665,593,3.665,594,3.665,595,3.665,596,3.665,597,2.465,598,3.107]],["title/controllers/UsersController.html",[0,1.04,599,2.3]],["body/controllers/UsersController.html",[0,0.595,2,0.595,3,0.112,4,0.095,5,0.095,7,0.22,8,0.94,11,1.607,12,0.025,14,0.763,16,1.509,17,0.952,18,1.607,19,3.068,20,1.607,21,0.347,22,1.101,23,1.996,25,0.481,26,0.88,27,1.101,28,1.101,31,0.112,32,0.063,33,0.945,34,1.101,35,2.842,38,1.607,40,0.007,41,0.011,42,0.007,87,1.101,89,2.112,129,1.996,132,0.731,135,1.242,137,1.114,141,2.842,145,1.246,146,1.946,157,2.154,163,2.673,203,3.674,216,1.946,259,2.554,277,1.462,278,0.88,295,2.909,299,1.853,301,1.315,305,1.315,306,1.462,344,1.018,356,2.379,381,3.965,384,2.852,385,1.018,386,1.101,396,1.609,439,2.08,440,2.08,441,2.311,445,1.658,465,2.08,467,2.621,482,1.658,537,1.658,544,1.658,583,1.198,599,2.08,600,1.658,601,2.621,602,2.621,603,1.955,604,1.955,605,1.955,606,1.955,607,1.955,608,1.955,609,1.658,610,1.955,611,1.955,612,1.955,613,1.955,614,1.955,615,1.955,616,1.955,617,1.955,618,1.955,619,1.955,620,3.092,621,1.658,622,2.621,623,1.658,624,1.462,625,1.955,626,1.955,627,3.092,628,3.092,629,3.092,630,3.092,631,1.955,632,1.955,633,4.747,634,4.747,635,4.747,636,4.747,637,1.955,638,1.955,639,3.092,640,1.955,641,1.955,642,1.955,643,1.955,644,1.955,645,1.955,646,1.955,647,1.955,648,1.955,649,1.955,650,1.955,651,1.955]],["title/modules/UsersModule.html",[43,1.04,60,1.925]],["body/modules/UsersModule.html",[2,1.498,3,0.211,4,0.181,5,0.181,12,0.025,17,0.998,21,0.424,25,0.576,31,0.211,32,0.118,40,0.013,41,0.017,42,0.013,43,1.685,45,1.554,46,1.554,47,1.787,48,1.787,49,1.554,50,2.677,51,2.677,60,3.639,61,2.381,62,1.787,63,1.787,67,2.487,69,2.082,70,0.93,129,3.547,135,1.198,260,1.925,271,2.328,279,3.02,327,2.487,329,3.135,358,1.925,368,3.02,402,2.487,403,3.135,490,4.699,597,3.315,599,3.728,621,3.135,624,2.764,652,3.135,653,3.135,654,3.135,655,3.698,656,3.698,657,3.698]],["title/injectables/UsersService.html",[82,0.706,129,1.779]],["body/injectables/UsersService.html",[3,0.079,4,0.068,5,0.068,7,0.156,8,0.711,12,0.025,14,0.765,16,1.472,17,0.929,18,1.569,20,1.569,21,0.348,25,0.364,31,0.079,32,0.044,38,1.652,40,0.008,41,0.008,42,0.005,70,0.349,82,0.483,83,0.546,89,2.091,127,0.584,129,1.218,132,0.72,135,1.796,137,0.948,140,2.497,141,3.42,143,1.749,144,1.576,145,1.455,146,2.304,152,0.935,153,1.317,157,1.558,159,2.419,161,2.419,163,2.419,165,2.419,203,3.398,216,1.46,242,3.012,259,1.463,260,0.723,273,0.861,310,2.562,327,0.935,334,2.568,343,0.783,344,0.723,346,1.178,356,1.599,357,1.434,358,0.723,381,2.89,384,1.849,385,0.723,386,0.783,396,1.576,402,0.935,407,2.568,416,1.178,439,1.574,440,2.39,441,1.749,465,1.574,583,0.852,601,1.983,602,1.983,609,1.983,622,1.983,623,1.178,624,1.039,658,1.178,659,2.34,660,2.34,661,2.34,662,1.39,663,1.39,664,2.34,665,2.34,666,1.39,667,2.34,668,1.39,669,1.39,670,2.34,671,1.39,672,1.39,673,2.34,674,1.39,675,2.34,676,1.39,677,2.34,678,1.39,679,2.34,680,1.39,681,2.34,682,1.39,683,1.39,684,1.39,685,1.39,686,1.39,687,3.553,688,1.39,689,1.39,690,1.39,691,3.029,692,1.39,693,5.544,694,2.34,695,2.34,696,2.34,697,4.296,698,2.34,699,3.012,700,2.34,701,2.34,702,2.34,703,1.39,704,1.39,705,1.39,706,1.39,707,5.735,708,5.735,709,2.34,710,5.304,711,2.34,712,2.34,713,2.34,714,2.34,715,2.34,716,2.34,717,2.34,718,2.34,719,2.34,720,2.34,721,2.34,722,2.34,723,2.34,724,2.34,725,2.34,726,2.34,727,2.34,728,1.39,729,1.39,730,1.39,731,1.39]],["title/coverage.html",[732,3.494]],["body/coverage.html",[0,1.793,1,1.797,5,0.13,6,2.264,12,0.025,26,1.202,29,1.504,32,0.204,40,0.009,41,0.014,42,0.009,49,1.122,65,1.637,66,1.637,82,1.296,84,2.264,85,1.797,86,2.264,97,1.39,107,1.637,108,1.637,116,1.797,125,2.264,129,1.39,132,0.448,135,0.865,152,4.698,169,1.797,171,2.969,172,2.264,185,1.637,186,2.264,190,1.637,191,2.264,200,1.997,201,2.264,203,1.637,204,3.446,215,2.639,216,0.983,223,2.264,224,2.264,227,2.264,250,2.264,260,1.39,261,2.932,269,1.202,279,1.637,281,2.264,307,1.504,330,2.264,358,1.39,359,2.932,368,1.637,370,2.264,382,1.504,404,2.264,425,1.504,426,2.932,434,1.797,436,1.797,437,2.264,455,1.504,492,2.264,520,2.932,524,1.797,526,1.797,527,2.264,541,1.504,559,2.264,583,1.637,584,2.932,590,2.932,597,1.797,599,1.797,600,2.264,658,2.264,732,1.997,733,2.671,734,2.671,735,2.671,736,3.923,737,3.923,738,3.923,739,3.923,740,2.671,741,2.671,742,2.671,743,2.671,744,5.123,745,6.362,746,5.457,747,2.264,748,6.049,749,3.923,750,5.123,751,3.923,752,2.264,753,2.671,754,2.671,755,2.671,756,2.671,757,2.671,758,2.671]],["title/dependencies.html",[46,1.729,759,2.852]],["body/dependencies.html",[12,0.025,25,0.647,32,0.17,40,0.014,41,0.019,42,0.014,46,1.746,70,1.045,96,2.34,115,3.107,143,3.107,184,2.34,234,4.622,235,3.524,255,3.524,273,1.53,760,5.865,761,4.157,762,5.319,763,4.157,764,4.157,765,4.157,766,4.157,767,4.157,768,4.157,769,4.157,770,4.157,771,4.157,772,4.157,773,4.157,774,4.157,775,4.157,776,4.157,777,4.157,778,4.157,779,4.157,780,4.157,781,4.157,782,4.157,783,4.157,784,4.157,785,4.157,786,4.157,787,4.157,788,4.157,789,4.157,790,4.157,791,4.157,792,4.157,793,4.157]],["title/miscellaneous/functions.html",[794,1.918,795,3.488]],["body/miscellaneous/functions.html",[7,0.599,12,0.022,40,0.019,41,0.022,42,0.019,49,2.75,752,4.525,794,3.59,795,4.525,796,5.337]],["title/index.html",[7,0.32,797,2.852,798,2.852]],["body/index.html",[4,0.19,12,0.024,40,0.014,41,0.018,42,0.014,266,2.187,732,2.903,799,3.883,800,3.883,801,5.09,802,3.883,803,3.883,804,3.883,805,3.883,806,3.883,807,3.883,808,3.883,809,3.883,810,3.883,811,5.677,812,3.883,813,3.883,814,3.883,815,3.883,816,6.541,817,3.883,818,3.883,819,3.883,820,6.419,821,3.883,822,3.883,823,5.09,824,3.883,825,3.883,826,3.883,827,3.883,828,5.09,829,5.09,830,3.883,831,3.883,832,3.883,833,5.09,834,5.09,835,3.883,836,3.883,837,3.883,838,3.883,839,3.883,840,3.292,841,3.883,842,3.883,843,3.883,844,3.883,845,3.883,846,3.883,847,3.883,848,3.883,849,3.883,850,3.883,851,3.883,852,3.883,853,3.883,854,3.883,855,3.883,856,3.883,857,3.883,858,3.883]],["title/modules.html",[45,1.964]],["body/modules.html",[12,0.02,40,0.017,41,0.02,42,0.017,44,3.204,45,2.001,55,2.919,56,2.919,57,2.919,58,2.919,59,2.919,60,2.682,840,5.803,859,6.845,860,6.845,861,6.845]],["title/overview.html",[862,3.962]],["body/overview.html",[2,0.984,12,0.024,29,2.912,40,0.011,41,0.016,42,0.011,43,0.984,44,4.597,45,1.359,46,1.359,47,1.563,48,1.563,49,1.359,50,1.563,51,1.563,52,2.743,53,2.743,54,2.743,55,4.052,56,3.728,57,3.728,58,3.728,59,3.601,60,3.513,61,2.173,62,1.563,63,1.563,83,1.272,97,2.692,104,2.743,105,2.743,107,3.17,108,3.17,129,3.247,170,1.191,307,3.513,322,2.743,323,2.743,324,2.743,382,3.513,397,2.743,398,2.743,399,2.743,455,3.513,485,2.743,486,2.743,487,2.743,541,2.912,553,2.743,554,2.743,652,2.743,653,2.743,654,2.743,699,2.743,862,2.743,863,4.499,864,3.235]],["title/miscellaneous/variables.html",[794,1.918,865,3.488]],["body/miscellaneous/variables.html",[7,0.442,12,0.024,40,0.014,41,0.018,42,0.014,116,3.452,119,3.334,132,0.659,171,2.047,204,4.073,215,4.073,216,1.889,217,3.836,218,3.836,219,3.836,220,4.526,221,3.836,222,3.836,261,2.94,279,3.145,280,3.334,359,2.94,368,3.145,369,3.334,426,2.94,434,3.452,435,3.334,520,2.94,524,3.452,525,3.334,584,2.94,590,2.94,597,3.452,598,3.334,747,3.334,794,2.645,865,3.334,866,3.933,867,3.933,868,3.933,869,3.933,870,3.933,871,3.933,872,3.933,873,3.933,874,3.933,875,6.653,876,6.653,877,3.933]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PronosticsController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":756,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":749,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":754,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":750,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":751,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":755,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{}}}],["100",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":864,"title":{},"body":{"overview.html":{}}}],["2",{"_index":123,"title":{},"body":{"modules/AuthModule.html":{}}}],["2.0.0",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["3.0.0",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["3/5",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":476,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["5.0.0",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["5.10.3",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["5/7",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["6.5.4",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":863,"title":{},"body":{"overview.html":{}}}],["7.0.0",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["71",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["8.2.0",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["9])))(?=.{6",{"_index":222,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["9]))|((?=.*[a",{"_index":221,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["access",{"_index":295,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{}}}],["access_token",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":291,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["addmyfavorite",{"_index":285,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["addmyfavorite(@request",{"_index":314,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["addmyfavorite(req",{"_index":288,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["addmyfavorite(userid",{"_index":335,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["addmyfavorite(userid,favoriteid",{"_index":350,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["addmysport",{"_index":372,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["addmysport(@request",{"_index":390,"title":{},"body":{"controllers/MySportsController.html":{}}}],["addmysport(req",{"_index":375,"title":{},"body":{"controllers/MySportsController.html":{}}}],["addmysport(userid",{"_index":408,"title":{},"body":{"injectables/MySportsService.html":{}}}],["addsport",{"_index":528,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["addsport(@request",{"_index":548,"title":{},"body":{"controllers/SportsController.html":{}}}],["addsport(name",{"_index":563,"title":{},"body":{"injectables/SportsService.html":{}}}],["addsport(req",{"_index":532,"title":{},"body":{"controllers/SportsController.html":{}}}],["admincreate",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admincreate(@request",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreate(createuserdto",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["admincreate(req",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminupdate",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["adminupdate(@request",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminupdate(id",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdate(req",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["already",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{}}}],["amazing",{"_index":841,"title":{},"body":{"index.html":{}}}],["angular",{"_index":810,"title":{},"body":{"index.html":{}}}],["api",{"_index":581,"title":{},"body":{"injectables/SportsService.html":{}}}],["app",{"_index":818,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appcontroller,mysportscontroller,myfavoritescontroller",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":523,"title":{},"body":{"classes/Sport.html":{}}}],["applications",{"_index":807,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":44,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":29,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":579,"title":{},"body":{"injectables/SportsService.html":{}}}],["associated",{"_index":433,"title":{},"body":{"classes/Pronostic.html":{}}}],["async",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":224,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":85,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":226,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":55,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule,mysportsmodule",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["author",{"_index":851,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":97,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":522,"title":{},"body":{"classes/Sport.html":{}}}],["await",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":842,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(body.password",{"_index":720,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["body",{"_index":381,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["body.email},{new:true,usefindandmodify:false",{"_index":718,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.firstname},{new:true,usefindandmodify:false",{"_index":712,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"email",{"_index":716,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"firstname",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"isadmin",{"_index":729,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"lastname",{"_index":713,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"password",{"_index":719,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"phone",{"_index":723,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.isadmin},{new:true,usefindandmodify:false",{"_index":731,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.lastname},{new:true,usefindandmodify:false",{"_index":715,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.phone},{new:true,usefindandmodify:false",{"_index":725,"title":{},"body":{"injectables/UsersService.html":{}}}],["boolean",{"_index":208,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["bootstrap",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":861,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":859,"title":{},"body":{"modules.html":{}}}],["building",{"_index":802,"title":{},"body":{"index.html":{}}}],["catch",{"_index":572,"title":{},"body":{"injectables/SportsService.html":{}}}],["check",{"_index":462,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["class",{"_index":32,"title":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":170,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":106,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":105,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule",{"_index":322,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule_exports",{"_index":323,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule_providers",{"_index":324,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule",{"_index":397,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule_exports",{"_index":399,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule_providers",{"_index":398,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule",{"_index":485,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule_exports",{"_index":487,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule_providers",{"_index":486,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_sportsmodule",{"_index":553,"title":{},"body":{"modules/SportsModule.html":{},"overview.html":{}}}],["cluster_sportsmodule_providers",{"_index":554,"title":{},"body":{"modules/SportsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":652,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":653,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":654,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collection",{"_index":274,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{}}}],["collects",{"_index":275,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{}}}],["commentary",{"_index":192,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["connected",{"_index":294,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["const",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":117,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(pronostic.name",{"_index":507,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":251,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(myfavoritemodel",{"_index":332,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["constructor(mysportmodel",{"_index":405,"title":{},"body":{"injectables/MySportsService.html":{}}}],["constructor(private",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["constructor(pronosticmodel",{"_index":496,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["constructor(sportmodel",{"_index":560,"title":{},"body":{"injectables/SportsService.html":{}}}],["constructor(usermodel",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('myfavorites",{"_index":309,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["controller('mysports",{"_index":387,"title":{},"body":{"controllers/MySportsController.html":{}}}],["controller('pronostics",{"_index":459,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["controller('sports",{"_index":543,"title":{},"body":{"controllers/SportsController.html":{}}}],["controller('users",{"_index":625,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["corresponds",{"_index":267,"title":{},"body":{"classes/MyFavorite.html":{}}}],["coverage",{"_index":732,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":439,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":626,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@request",{"_index":466,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["create(createuserdto",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(req",{"_index":442,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["create(userid",{"_index":498,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createdpronostic",{"_index":508,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createdpronostic.save",{"_index":511,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createduser",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmyfavoritedto",{"_index":169,"title":{"classes/CreateMyFavoriteDto.html":{}},"body":{"classes/CreateMyFavoriteDto.html":{},"injectables/MyFavoritesService.html":{},"coverage.html":{}}}],["createmysportdto",{"_index":185,"title":{"classes/CreateMySportDto.html":{}},"body":{"classes/CreateMySportDto.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{},"coverage.html":{}}}],["createpronosticdto",{"_index":190,"title":{"classes/CreatePronosticDto.html":{}},"body":{"classes/CreatePronosticDto.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"coverage.html":{}}}],["createpronosticdto.commentary",{"_index":510,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createpronosticdto.matchid",{"_index":468,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["createpronosticdto.type",{"_index":470,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["createpronosticdto.winnerid",{"_index":469,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["createsportdto",{"_index":200,"title":{"classes/CreateSportDto.html":{}},"body":{"classes/CreateSportDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":203,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.firstname",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.isadmin",{"_index":728,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.lastname",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.phone",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["current",{"_index":304,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["data",{"_index":174,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{}}}],["database",{"_index":449,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["datas",{"_index":417,"title":{},"body":{"injectables/MySportsService.html":{}}}],["days",{"_index":124,"title":{},"body":{"modules/AuthModule.html":{}}}],["declarations",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["del",{"_index":578,"title":{},"body":{"injectables/SportsService.html":{}}}],["delete",{"_index":299,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":482,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["delete(@param('id",{"_index":483,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["delete(@request",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(id",{"_index":444,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["delete(req",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete,post,request",{"_index":540,"title":{},"body":{"controllers/SportsController.html":{}}}],["deleted",{"_index":357,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["deleteone",{"_index":493,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["deleteone(id",{"_index":500,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["deleteuser",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(id",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["delmyfavorite",{"_index":286,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["delmyfavorite(@request",{"_index":320,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["delmyfavorite(id",{"_index":339,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["delmyfavorite(req",{"_index":296,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["delmysport",{"_index":373,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["delmysport(@request",{"_index":393,"title":{},"body":{"controllers/MySportsController.html":{}}}],["delmysport(req",{"_index":377,"title":{},"body":{"controllers/MySportsController.html":{}}}],["delmysport(sportid",{"_index":411,"title":{},"body":{"injectables/MySportsService.html":{}}}],["delsport",{"_index":529,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["delsport(@request",{"_index":551,"title":{},"body":{"controllers/SportsController.html":{}}}],["delsport(req",{"_index":534,"title":{},"body":{"controllers/SportsController.html":{}}}],["delsport(sportid",{"_index":565,"title":{},"body":{"injectables/SportsService.html":{}}}],["dependencies",{"_index":46,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":266,"title":{},"body":{"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"index.html":{}}}],["development",{"_index":819,"title":{},"body":{"index.html":{}}}],["document",{"_index":262,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["documentation",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":463,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["dotenv",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["dto/create",{"_index":344,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":623,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":830,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":803,"title":{},"body":{"index.html":{}}}],["email",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":318,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/SportsService.html":{}}}],["exec",{"_index":512,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["exist",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{}}}],["expiresin",{"_index":122,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":225,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["extract",{"_index":580,"title":{},"body":{"injectables/SportsService.html":{}}}],["extractjwt",{"_index":232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":240,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":242,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["favorite",{"_index":292,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{}}}],["favoriteid",{"_index":336,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["favorites",{"_index":303,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["findall",{"_index":440,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@request",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["findall(req",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone",{"_index":441,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('matchid",{"_index":480,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["findone(@request",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(email",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(matchid",{"_index":450,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["findone(req",{"_index":615,"title":{},"body":{"controllers/UsersController.html":{}}}],["findpronosticforonematchid",{"_index":494,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["findpronosticforonematchid(matchid",{"_index":503,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["finduserbyid",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyid(id",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["followed",{"_index":365,"title":{},"body":{"classes/MySport.html":{}}}],["framework",{"_index":801,"title":{},"body":{"index.html":{}}}],["fs",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["function",{"_index":753,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":795,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":544,"title":{},"body":{"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["get(':matchid",{"_index":479,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["get('profile",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["getmyfavorite",{"_index":287,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorite(@request",{"_index":311,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorite(req",{"_index":300,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorites",{"_index":331,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmyfavorites(userid",{"_index":341,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmyfavorites(userid:string",{"_index":347,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmysports",{"_index":374,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["getmysports(@request",{"_index":388,"title":{},"body":{"controllers/MySportsController.html":{}}}],["getmysports(req",{"_index":379,"title":{},"body":{"controllers/MySportsController.html":{}}}],["getmysports(userid",{"_index":413,"title":{},"body":{"injectables/MySportsService.html":{}}}],["getprofile",{"_index":9,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":37,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":10,"title":{},"body":{"controllers/AppController.html":{}}}],["getsport",{"_index":530,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getsport(@param('id",{"_index":545,"title":{},"body":{"controllers/SportsController.html":{}}}],["getsport(id",{"_index":536,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getsports",{"_index":531,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getting",{"_index":797,"title":{"index.html":{}},"body":{}}],["give",{"_index":448,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["google",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["grow",{"_index":837,"title":{},"body":{"index.html":{}}}],["hashedpassword",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashedpassword},{new:true,usefindandmodify:false",{"_index":722,"title":{},"body":{"injectables/UsersService.html":{}}}],["heavily",{"_index":808,"title":{},"body":{"index.html":{}}}],["here",{"_index":848,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":386,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpexception",{"_index":384,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["https://nestjs.com",{"_index":855,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":385,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":396,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.unauthorized",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["id",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id,{\"email",{"_index":717,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"firstname",{"_index":711,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"isadmin",{"_index":730,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"lastname",{"_index":714,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"password",{"_index":721,"title":{},"body":{"injectables/UsersService.html":{}}}],["id,{\"phone",{"_index":724,"title":{},"body":{"injectables/UsersService.html":{}}}],["identifier",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["if(!isadmin",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{}}}],["if(await",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{}}}],["if(isnull(user",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(result.deletedcount",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{}}}],["if(updated",{"_index":726,"title":{},"body":{"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":241,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PronosticsModule.html":{},"modules/UsersModule.html":{}}}],["imports:[mongoosemodule.forfeature",{"_index":328,"title":{},"body":{"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/SportsModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":82,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":83,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":343,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(myfavorite.name",{"_index":346,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(mysport.name",{"_index":416,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(pronostic.name",{"_index":461,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["injectmodel(sport.name",{"_index":569,"title":{},"body":{"injectables/SportsService.html":{}}}],["inspired",{"_index":809,"title":{},"body":{"index.html":{}}}],["installation",{"_index":815,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":817,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":573,"title":{},"body":{"injectables/SportsService.html":{}}}],["isadmin",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isadmin(id",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["isemail",{"_index":180,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["iserror",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["isnull",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["isnull(user",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["isoptional",{"_index":183,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{}}}],["join",{"_index":844,"title":{},"body":{"index.html":{}}}],["json",{"_index":513,"title":{},"body":{"injectables/PronosticsService.html":{},"injectables/SportsService.html":{}}}],["jwt",{"_index":235,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":26,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":116,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":120,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":239,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":118,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":107,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":852,"title":{},"body":{"index.html":{}}}],["lastname",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["legend",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":858,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":834,"title":{},"body":{"index.html":{}}}],["list",{"_index":312,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["local",{"_index":255,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":108,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["mandatory",{"_index":319,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{}}}],["match",{"_index":454,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["matches",{"_index":181,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(passwordregex",{"_index":211,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(passwordregex)@validateif(undefined",{"_index":585,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matchesuseridmatchid",{"_index":471,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["matchesuseridmatchid.length",{"_index":473,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["matchid",{"_index":193,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["matching",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matchs",{"_index":464,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["message",{"_index":356,"title":{},"body":{"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":182,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(1",{"_index":206,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(10",{"_index":213,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["miscellaneous",{"_index":794,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":833,"title":{},"body":{"index.html":{}}}],["mode",{"_index":823,"title":{},"body":{"index.html":{}}}],["model",{"_index":310,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":43,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":45,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":273,"title":{},"body":{"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"injectables/SportsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":490,"title":{},"body":{"modules/PronosticsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost/funsport",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":847,"title":{},"body":{"index.html":{}}}],["myfavorite",{"_index":260,"title":{"classes/MyFavorite.html":{}},"body":{"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["myfavorite.dto",{"_index":345,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["myfavorite.dto.ts",{"_index":172,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"coverage.html":{}}}],["myfavorite.dto.ts:5",{"_index":179,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.dto.ts:7",{"_index":178,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.dto.ts:9",{"_index":177,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.name",{"_index":329,"title":{},"body":{"modules/MyFavoritesModule.html":{},"modules/UsersModule.html":{}}}],["myfavoritemodel",{"_index":334,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/UsersService.html":{}}}],["myfavorites",{"_index":282,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["myfavorites.controller",{"_index":326,"title":{},"body":{"modules/MyFavoritesModule.html":{}}}],["myfavorites.service",{"_index":308,"title":{},"body":{"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{}}}],["myfavorites/myfavorites.controller",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["myfavorites/myfavorites.module",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["myfavoriteschema",{"_index":279,"title":{},"body":{"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["myfavoritescontroller",{"_index":66,"title":{"controllers/MyFavoritesController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"coverage.html":{}}}],["myfavoritesmodule",{"_index":56,"title":{"modules/MyFavoritesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MyFavoritesModule.html":{},"modules.html":{},"overview.html":{}}}],["myfavoritesservice",{"_index":307,"title":{"injectables/MyFavoritesService.html":{}},"body":{"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"coverage.html":{},"overview.html":{}}}],["mypronostics/pronostics.module",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["mysport",{"_index":358,"title":{"classes/MySport.html":{}},"body":{"classes/MySport.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["mysport.dto",{"_index":415,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["mysport.dto.ts",{"_index":186,"title":{},"body":{"classes/CreateMySportDto.html":{},"coverage.html":{}}}],["mysport.dto.ts:5",{"_index":189,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.dto.ts:7",{"_index":188,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.dto.ts:9",{"_index":187,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.name",{"_index":403,"title":{},"body":{"modules/MySportsModule.html":{},"modules/UsersModule.html":{}}}],["mysportmodel",{"_index":407,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/UsersService.html":{}}}],["mysports",{"_index":371,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/SportsService.html":{}}}],["mysports.controller",{"_index":401,"title":{},"body":{"modules/MySportsModule.html":{}}}],["mysports.service",{"_index":383,"title":{},"body":{"controllers/MySportsController.html":{},"modules/MySportsModule.html":{}}}],["mysports/mysports.controller",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["mysports/mysports.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["mysportschema",{"_index":368,"title":{},"body":{"classes/MySport.html":{},"modules/MySportsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mysportscontroller",{"_index":65,"title":{"controllers/MySportsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"coverage.html":{}}}],["mysportsmodule",{"_index":57,"title":{"modules/MySportsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MySportsModule.html":{},"modules.html":{},"overview.html":{}}}],["mysportsservice",{"_index":382,"title":{"injectables/MySportsService.html":{}},"body":{"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"coverage.html":{},"overview.html":{}}}],["myśliwiec",{"_index":853,"title":{},"body":{"index.html":{}}}],["name",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateSportDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":293,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["nest",{"_index":811,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":857,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":115,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":216,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newfavorite",{"_index":351,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["newfavorite.save",{"_index":354,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["newmysport",{"_index":419,"title":{},"body":{"injectables/MySportsService.html":{}}}],["newmysport.save",{"_index":422,"title":{},"body":{"injectables/MySportsService.html":{}}}],["newpronostic",{"_index":515,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.commentary",{"_index":518,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.save",{"_index":519,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.winnerid",{"_index":517,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newsport",{"_index":575,"title":{},"body":{"injectables/SportsService.html":{}}}],["newsport.save",{"_index":577,"title":{},"body":{"injectables/SportsService.html":{}}}],["node.js",{"_index":800,"title":{},"body":{"index.html":{}}}],["nothing",{"_index":727,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":816,"title":{},"body":{"index.html":{}}}],["null",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["oauth20",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ok",{"_index":424,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["one",{"_index":453,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["open",{"_index":835,"title":{},"body":{"index.html":{}}}],["optional",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["out",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":862,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":588,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["p.password",{"_index":589,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["package",{"_index":759,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":278,"title":{},"body":{"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":234,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":236,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":237,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passverify",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["passwordregex",{"_index":215,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":620,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('admin/updateuser",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":245,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.firstname",{"_index":246,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":244,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.isadmin",{"_index":249,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.lastname",{"_index":247,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.phone",{"_index":248,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["phone",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["please",{"_index":845,"title":{},"body":{"index.html":{}}}],["post",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["post('admin/createuser",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":825,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":799,"title":{},"body":{"index.html":{}}}],["project",{"_index":836,"title":{},"body":{"index.html":{}}}],["promise",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pronostic",{"_index":425,"title":{"classes/Pronostic.html":{}},"body":{"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"coverage.html":{}}}],["pronostic.dto",{"_index":457,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostic.dto.ts",{"_index":191,"title":{},"body":{"classes/CreatePronosticDto.html":{},"coverage.html":{}}}],["pronostic.dto.ts:10",{"_index":197,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:12",{"_index":199,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:15",{"_index":195,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:6",{"_index":198,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:8",{"_index":196,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.name",{"_index":491,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["pronosticmodel",{"_index":460,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostics",{"_index":438,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostics.controller",{"_index":489,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["pronostics.service",{"_index":456,"title":{},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{}}}],["pronosticschema",{"_index":434,"title":{},"body":{"classes/Pronostic.html":{},"modules/PronosticsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pronosticscontroller",{"_index":436,"title":{"controllers/PronosticsController.html":{}},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"coverage.html":{}}}],["pronosticsmodule",{"_index":58,"title":{"modules/PronosticsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PronosticsModule.html":{},"modules.html":{},"overview.html":{}}}],["pronosticsservice",{"_index":455,"title":{"injectables/PronosticsService.html":{}},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"coverage.html":{},"overview.html":{}}}],["pronotic",{"_index":477,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronotics",{"_index":432,"title":{},"body":{"classes/Pronostic.html":{}}}],["prop",{"_index":263,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["properties",{"_index":173,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["property",{"_index":367,"title":{},"body":{"classes/MySport.html":{}}}],["propery",{"_index":366,"title":{},"body":{"classes/MySport.html":{}}}],["providers",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":306,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/UsersController.html":{}}}],["read",{"_index":846,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["regexp('^(((?=.*[a",{"_index":217,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["repository",{"_index":814,"title":{},"body":{"index.html":{}}}],["req",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["req,@body",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["req.body.data",{"_index":316,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["req.body.id",{"_index":394,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["req.body.name",{"_index":549,"title":{},"body":{"controllers/SportsController.html":{}}}],["req.body.sportfavoriteid",{"_index":315,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["req.body.sportid",{"_index":391,"title":{},"body":{"controllers/MySportsController.html":{}}}],["req.user",{"_index":39,"title":{},"body":{"controllers/AppController.html":{}}}],["req.user.id",{"_index":467,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":284,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["run",{"_index":820,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":804,"title":{},"body":{"index.html":{}}}],["schema",{"_index":271,"title":{},"body":{"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"classes/MySport.html":{},"modules/MySportsModule.html":{},"classes/Pronostic.html":{},"modules/PronosticsModule.html":{},"classes/Sport.html":{},"modules/SportsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":272,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(myfavorite",{"_index":280,"title":{},"body":{"classes/MyFavorite.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(mysport",{"_index":369,"title":{},"body":{"classes/MySport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(pronostic",{"_index":435,"title":{},"body":{"classes/Pronostic.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(sport",{"_index":525,"title":{},"body":{"classes/Sport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":598,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/myfavorite.schema",{"_index":327,"title":{},"body":{"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/mysport.schema",{"_index":402,"title":{},"body":{"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/pronostic.schema",{"_index":458,"title":{},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{}}}],["schemas/sport.schema",{"_index":557,"title":{},"body":{"modules/SportsModule.html":{},"injectables/SportsService.html":{}}}],["schemas/user.schema",{"_index":624,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":119,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":243,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["server",{"_index":805,"title":{},"body":{"index.html":{}}}],["service",{"_index":338,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/PronosticsService.html":{}}}],["side",{"_index":806,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":121,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["specific",{"_index":268,"title":{},"body":{"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["sponsors",{"_index":839,"title":{},"body":{"index.html":{}}}],["sport",{"_index":269,"title":{"classes/Sport.html":{}},"body":{"classes/MyFavorite.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"coverage.html":{}}}],["sport.dto.ts",{"_index":201,"title":{},"body":{"classes/CreateSportDto.html":{},"coverage.html":{}}}],["sport.dto.ts:2",{"_index":202,"title":{},"body":{"classes/CreateSportDto.html":{}}}],["sport.name",{"_index":558,"title":{},"body":{"modules/SportsModule.html":{}}}],["sportfavoriteid",{"_index":175,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{}}}],["sportfavoriteid:favoriteid,data:data",{"_index":353,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["sportid",{"_index":360,"title":{},"body":{"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["sportid:sportid",{"_index":421,"title":{},"body":{"injectables/MySportsService.html":{}}}],["sportmodel",{"_index":562,"title":{},"body":{"injectables/SportsService.html":{}}}],["sports",{"_index":364,"title":{},"body":{"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{}}}],["sports.controller",{"_index":556,"title":{},"body":{"modules/SportsModule.html":{}}}],["sports.service",{"_index":542,"title":{},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{}}}],["sports/sports.module",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["sportschema",{"_index":524,"title":{},"body":{"classes/Sport.html":{},"modules/SportsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sportscontroller",{"_index":526,"title":{"controllers/SportsController.html":{}},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{},"coverage.html":{}}}],["sportsmodule",{"_index":59,"title":{"modules/SportsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SportsModule.html":{},"modules.html":{},"overview.html":{}}}],["sportsservice",{"_index":541,"title":{"injectables/SportsService.html":{}},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"coverage.html":{},"overview.html":{}}}],["src/.../constants.ts",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":796,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../myfavorite.schema.ts",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mysport.schema.ts",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pronostic.schema.ts",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sport.schema.ts",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../update",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:11",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":84,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:11",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:7",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":747,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":223,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:16",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:7",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":250,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:12",{"_index":254,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:7",{"_index":252,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/dto/create",{"_index":171,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/dto/update",{"_index":584,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":752,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/myfavorites/myfavorites.controller.ts",{"_index":281,"title":{},"body":{"controllers/MyFavoritesController.html":{},"coverage.html":{}}}],["src/myfavorites/myfavorites.controller.ts:23",{"_index":302,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.controller.ts:36",{"_index":290,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.controller.ts:53",{"_index":298,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.module.ts",{"_index":325,"title":{},"body":{"modules/MyFavoritesModule.html":{}}}],["src/myfavorites/myfavorites.service.ts",{"_index":330,"title":{},"body":{"injectables/MyFavoritesService.html":{},"coverage.html":{}}}],["src/myfavorites/myfavorites.service.ts:10",{"_index":333,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:18",{"_index":342,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:30",{"_index":337,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:41",{"_index":340,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/mypronostics/pronostics.controller.ts",{"_index":437,"title":{},"body":{"controllers/PronosticsController.html":{},"coverage.html":{}}}],["src/mypronostics/pronostics.controller.ts:36",{"_index":443,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:60",{"_index":447,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:72",{"_index":452,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:84",{"_index":446,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.module.ts",{"_index":488,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["src/mypronostics/pronostics.service.ts",{"_index":492,"title":{},"body":{"injectables/PronosticsService.html":{},"coverage.html":{}}}],["src/mypronostics/pronostics.service.ts:10",{"_index":497,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:22",{"_index":499,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:37",{"_index":502,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:47",{"_index":504,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:58",{"_index":501,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:76",{"_index":506,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mysports/mysports.controller.ts",{"_index":370,"title":{},"body":{"controllers/MySportsController.html":{},"coverage.html":{}}}],["src/mysports/mysports.controller.ts:21",{"_index":380,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.controller.ts:34",{"_index":376,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.controller.ts:54",{"_index":378,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.module.ts",{"_index":400,"title":{},"body":{"modules/MySportsModule.html":{}}}],["src/mysports/mysports.service.ts",{"_index":404,"title":{},"body":{"injectables/MySportsService.html":{},"coverage.html":{}}}],["src/mysports/mysports.service.ts:16",{"_index":414,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:27",{"_index":409,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:38",{"_index":412,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:9",{"_index":406,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/schemas/myfavorite.schema.ts",{"_index":261,"title":{},"body":{"classes/MyFavorite.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/myfavorite.schema.ts:13",{"_index":270,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/myfavorite.schema.ts:19",{"_index":265,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/myfavorite.schema.ts:25",{"_index":264,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/mysport.schema.ts",{"_index":359,"title":{},"body":{"classes/MySport.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/mysport.schema.ts:13",{"_index":363,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/mysport.schema.ts:20",{"_index":362,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/mysport.schema.ts:26",{"_index":361,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/pronostic.schema.ts",{"_index":426,"title":{},"body":{"classes/Pronostic.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/pronostic.schema.ts:10",{"_index":430,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:13",{"_index":428,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:16",{"_index":429,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:19",{"_index":431,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:22",{"_index":427,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/sport.schema.ts",{"_index":520,"title":{},"body":{"classes/Sport.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/sport.schema.ts:10",{"_index":521,"title":{},"body":{"classes/Sport.html":{}}}],["src/schemas/user.schema.ts",{"_index":590,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/user.schema.ts:10",{"_index":594,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:13",{"_index":591,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:16",{"_index":595,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:19",{"_index":596,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:22",{"_index":593,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:7",{"_index":592,"title":{},"body":{"classes/User.html":{}}}],["src/sports/sports.controller.ts",{"_index":527,"title":{},"body":{"controllers/SportsController.html":{},"coverage.html":{}}}],["src/sports/sports.controller.ts:12",{"_index":538,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:18",{"_index":539,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:25",{"_index":533,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:40",{"_index":535,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.module.ts",{"_index":555,"title":{},"body":{"modules/SportsModule.html":{}}}],["src/sports/sports.service.ts",{"_index":559,"title":{},"body":{"injectables/SportsService.html":{},"coverage.html":{}}}],["src/sports/sports.service.ts:10",{"_index":561,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:13",{"_index":567,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:24",{"_index":568,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:30",{"_index":564,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:36",{"_index":566,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/users/users.controller.ts",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:15",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:26",{"_index":614,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:40",{"_index":616,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:54",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":619,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:75",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:94",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":655,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:114",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:125",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:16",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:32",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:51",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:55",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:60",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:65",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:78",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":821,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":824,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":826,"title":{},"body":{"index.html":{}}}],["started",{"_index":798,"title":{"index.html":{}},"body":{}}],["starter",{"_index":813,"title":{},"body":{"index.html":{}}}],["statements",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":849,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["string[]}data",{"_index":349,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["super",{"_index":238,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":840,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":860,"title":{},"body":{"modules.html":{}}}],["table",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":757,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":829,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":832,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":831,"title":{},"body":{"index.html":{}}}],["tests",{"_index":828,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":838,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":258,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.jwtservice.sign(payload",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.myfavoritemodel.create({'userid':userid",{"_index":352,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritemodel.find({'userid':userid}).exec",{"_index":348,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritemodel.findbyidanddelete(id",{"_index":355,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritesservice.addmyfavorite(req.user.id",{"_index":317,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.myfavoritesservice.delmyfavorite(req.body.sportfavoriteid",{"_index":321,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.myfavoritesservice.getmyfavorites(req.user.id",{"_index":313,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.mysportmodel.create({userid:userid",{"_index":420,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportmodel.find({userid:userid}).exec",{"_index":418,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportmodel.findbyidanddelete(sportid",{"_index":423,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportsservice.addmysport(req.user.id",{"_index":392,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.mysportsservice.delmysport(req.body.id",{"_index":395,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.mysportsservice.getmysports(req.user.id",{"_index":389,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.pronosticmodel",{"_index":509,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.find",{"_index":472,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.findbyidanddelete(id",{"_index":514,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.findone",{"_index":516,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticsservice.create(user",{"_index":475,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.deleteone(id",{"_index":484,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.findall",{"_index":478,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.findpronosticforonematchid(matchid",{"_index":481,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.updateone(user",{"_index":474,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.sportmodel.create({name",{"_index":576,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.find",{"_index":574,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.findbyid(id).orfail",{"_index":571,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.findbyidanddelete(sportid",{"_index":582,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportsservice.addsport(req.body.name",{"_index":550,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.delsport(req.body.id",{"_index":552,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.getsport(id",{"_index":546,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.getsports",{"_index":547,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.usermodel",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.deleteone({'_id':id}).exec",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find({'email':email}).exec",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate",{"_index":710,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.admincreate(createuserdto",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.adminupdate(body.id",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(createuserdto",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(id",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(email",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyid(id",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.isadmin(req.user.id",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.userexists(createuserdto",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":259,"title":{},"body":{"injectables/LocalStrategy.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["touch",{"_index":850,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["try",{"_index":570,"title":{},"body":{"injectables/SportsService.html":{}}}],["twitter",{"_index":856,"title":{},"body":{"index.html":{}}}],["type",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":812,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":256,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unit",{"_index":827,"title":{},"body":{"index.html":{}}}],["update",{"_index":465,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@request",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(req",{"_index":617,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateone",{"_index":495,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["updateone(userid",{"_index":505,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["updateuserdto",{"_index":583,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["used",{"_index":283,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["useguards",{"_index":305,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@delete",{"_index":297,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["useguards(jwtauthguard)@delete(':id",{"_index":445,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":301,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get(':id",{"_index":537,"title":{},"body":{"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get(':matchid",{"_index":451,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@patch",{"_index":618,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@patch('admin/updateuser",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@post",{"_index":289,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{}}}],["useguards(jwtauthguard)@post('admin/createuser",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(undefined)@post('login",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards,get",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards,put",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/SportsController.html":{}}}],["user",{"_index":135,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":410,"title":{},"body":{"injectables/MySportsService.html":{}}}],["user.dto",{"_index":622,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":204,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:11",{"_index":210,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:14",{"_index":205,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:17",{"_index":214,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:20",{"_index":212,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":586,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:23",{"_index":209,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":207,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.isadmin",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.length",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":657,"title":{},"body":{"modules/UsersModule.html":{}}}],["user[0]._id",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].email",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].firstname",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].isadmin",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].lastname",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].password",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].phone",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["userexists(createuserdto",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":176,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["usermodel",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["usernamefield",{"_index":257,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":277,"title":{},"body":{"classes/MyFavorite.html":{},"classes/MySport.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":656,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":621,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":597,"title":{},"body":{"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":599,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":60,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":129,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdated",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["util",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":253,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateif",{"_index":587,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["validateuser",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":184,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":748,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":865,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":822,"title":{},"body":{"index.html":{}}}],["website",{"_index":854,"title":{},"body":{"index.html":{}}}],["widgets",{"_index":276,"title":{},"body":{"classes/MyFavorite.html":{}}}],["winnerid",{"_index":194,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["you'd",{"_index":843,"title":{},"body":{"index.html":{}}}],["z])(?=.*[0",{"_index":220,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":218,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z]))|((?=.*[a",{"_index":219,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards,Put } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nAppModule -->\n\nMyFavoritesModule->AppModule\n\n\n\n\n\nMySportsModule\n\nMySportsModule\n\nAppModule -->\n\nMySportsModule->AppModule\n\n\n\n\n\nPronosticsModule\n\nPronosticsModule\n\nAppModule -->\n\nPronosticsModule->AppModule\n\n\n\n\n\nSportsModule\n\nSportsModule\n\nAppModule -->\n\nSportsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            MySportsController\n                        \n                        \n                            MyFavoritesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MyFavoritesModule\n                        \n                        \n                            MySportsModule\n                        \n                        \n                            PronosticsModule\n                        \n                        \n                            SportsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { PronosticsModule } from './MyPronostics/pronostics.module';\n\nimport { AuthModule } from './auth/auth.module';\nimport { MySportsController } from './MySports/MySports.controller';\nimport { MySportsModule } from './MySports/MySports.module';\nimport { MyFavoritesController } from './MyFavorites/MyFavorites.controller';\nimport { MyFavoritesModule } from './MyFavorites/MyFavorites.module';\nimport { SportsModule } from './sports/sports.module';\n@Module({\n  imports: [MongooseModule.forRoot('mongodb://localhost/funsport'), UsersModule, AuthModule,MySportsModule, MyFavoritesModule, SportsModule, PronosticsModule],\n  controllers: [AppController,MySportsController,MyFavoritesController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards,Get} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\n\n@Controller('auth')\nexport class AuthController {\nconstructor(private authService: AuthService) {}\n\n  @UseGuards(AuthGuard('local'))\n  @Post('login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '2 days' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n    ) {}\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.findOne(email);\n    const passVerify = await bcrypt.compare(pass, user[0].password);\n    if (user.length > 0 && passVerify) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n  async login(user: any) {\n    const payload = { \n                      email: user[0].email,\n                      id: user[0]._id ,\n                      firstName: user[0].firstName,\n                      lastName: user[0].lastName ,\n                      isAdmin: user[0].isAdmin,\n                      phone: user[0].phone,\n                    };\n    const access_token = this.jwtService.sign(payload)\n    return {\n      access_token: access_token,\n    };\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMyFavoriteDto.html":{"url":"classes/CreateMyFavoriteDto.html","title":"class - CreateMyFavoriteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMyFavoriteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-myFavorite.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\nexport class CreateMyFavoriteDto {\n\n  userId: string;\n\n  sportFavoriteId: string;\n\n  data: string[];\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMySportDto.html":{"url":"classes/CreateMySportDto.html","title":"class - CreateMySportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMySportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-mySport.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\nexport class CreateMySportDto {\n\n  userId: string;\n\n  sportFavoriteId: string;\n\n  data: [string];\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePronosticDto.html":{"url":"classes/CreatePronosticDto.html","title":"class - CreatePronosticDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePronosticDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-pronostic.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentary\n                            \n                            \n                                matchId\n                            \n                            \n                                type\n                            \n                            \n                                userId\n                            \n                            \n                                winnerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            matchId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            winnerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\n\nexport class CreatePronosticDto {\n\n  userId: string;\n\n  matchId: string;\n\n  type: string;\n\n  winnerId: string;\n\n  @IsOptional()\n  commentary: string;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSportDto.html":{"url":"classes/CreateSportDto.html","title":"class - CreateSportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-sport.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-sport.dto.ts:2\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSportDto {\n    name: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Matches(passwordRegex)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(10)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\nconst passwordRegex = new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})');\n\nexport class CreateUserDto {\n\n  @MinLength(1)\n  firstName: string;\n\n  @MinLength(1)\n  lastName: string;\n\n  @IsEmail()\n  email: string;\n\n  @MinLength(10)\n  phone: string;\n\n  @Matches(passwordRegex)\n  password: string;\n\n  @IsOptional()\n  isAdmin: boolean;\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:7\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n  async validate(payload: any) {\n    return { id: payload.id, email: payload.email, firstName: payload.firstName, lastName: payload.lastName, phone: payload.phone , isAdmin: payload.isAdmin};\n  }\n  \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MyFavorite.html":{"url":"classes/MyFavorite.html","title":"class - MyFavorite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MyFavorite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/myFavorite.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:25\n                            \n                        \n\n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                          \n                                      \n                                      \n                                                \n                                                        data\n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:19\n                            \n                        \n\n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        sportFavoriteId\n                                                        \n                                                                corresponds to a specific id sport\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:13\n                            \n                        \n\n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                          \n                                      \n                                      \n                                                \n                                                        userId\n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\n/**\n * This collection collects all widgets for all users.\n */\nexport class MyFavorite extends Document {\n  /**\n   * @param {string} userId\n   */\n  @Prop()\n  userId: string;\n\n  /**\n   * @param {string} sportFavoriteId corresponds to a specific id sport\n   */\n  @Prop()\n  sportFavoriteId: string;\n\n  /**\n   * @param {string[]} data\n   */\n  @Prop()\n  data: [string];\n\n}\n\nexport const MyFavoriteSchema = SchemaFactory.createForClass(MyFavorite);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MyFavoritesController.html":{"url":"controllers/MyFavoritesController.html","title":"controller - MyFavoritesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MyFavoritesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                myfavorites\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'myfavorites'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMyFavorite\n                            \n                            \n                                    Async\n                                delMyFavorite\n                            \n                            \n                                    Async\n                                getMyFavorite\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:36\n                \n            \n\n\n            \n                \n                    Controller to add a favorite\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:53\n                \n            \n\n\n            \n                \n                    Controller to delete a favorite\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:23\n                \n            \n\n\n            \n                \n                    Controller to get all favorites for the current user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete, Post, Request, UseGuards, Put } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { MyFavoritesService } from './MyFavorites.service';\n\n/**\n * Controller used for the route 'myfavorites'\n */\n@Controller('myfavorites')\nexport class MyFavoritesController {\n  /**\n   * Constructor for MyFavorites controller\n   * @param myFavoritesService\n   */\n  constructor(private readonly myFavoritesService: MyFavoritesService) { }\n\n/**\n * Controller to get all favorites for the current user\n * @param req\n * @return {Model}\n */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async getMyFavorite(@Request() req) {\n    const list = await this.myFavoritesService.getMyFavorites(req.user.id)\n    return list;\n  }\n\n /**\n  * Controller to add a favorite\n  * You need to be connected to access to this route\n  * @param req\n  * @return {Model}\n  */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async addMyFavorite(@Request() req) {\n    let list\n    if (req.body.sportFavoriteId, req.body.data) {\n      list = await this.myFavoritesService.addMyFavorite(req.user.id, req.body.sportFavoriteId, req.body.data)\n    } else {\n      list = { error: \"sportFavoriteId and data are mandatory\" }\n    }\n    return list;\n  }\n\n  /**\n   * Controller to delete a favorite\n   * You need to be connected to access to this route\n   * @param req\n  */\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  async delMyFavorite(@Request() req) {\n    if (req.body.sportFavoriteId) {\n      return await this.myFavoritesService.delMyFavorite(req.body.sportFavoriteId)\n    } else {\n      return {\n        error: \"sportFavoriteId is mandatory\"\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MyFavoritesModule.html":{"url":"modules/MyFavoritesModule.html","title":"module - MyFavoritesModule","body":"\n                   \n\n\n\n\n    Modules\n    MyFavoritesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MyFavoritesModule\n\n\n\ncluster_MyFavoritesModule_exports\n\n\n\ncluster_MyFavoritesModule_providers\n\n\n\n\nMyFavoritesService \n\nMyFavoritesService \n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nMyFavoritesService  -->\n\nMyFavoritesModule->MyFavoritesService \n\n\n\n\n\nMyFavoritesService\n\nMyFavoritesService\n\nMyFavoritesModule -->\n\nMyFavoritesService->MyFavoritesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MyFavoritesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MyFavoritesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MyFavoritesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MyFavoritesService } from './MyFavorites.service';\nimport { MyFavoritesController } from './MyFavorites.controller';\nimport { MyFavorite, MyFavoriteSchema } from '../schemas/myFavorite.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports:[MongooseModule.forFeature([{ name: MyFavorite.name, schema: MyFavoriteSchema }])],\n  providers: [MyFavoritesService],\n  controllers: [MyFavoritesController],\n  exports: [MyFavoritesService],\n})\nexport class MyFavoritesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MyFavoritesService.html":{"url":"injectables/MyFavoritesService.html","title":"injectable - MyFavoritesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MyFavoritesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMyFavorite\n                            \n                            \n                                    Async\n                                delMyFavorite\n                            \n                            \n                                    Async\n                                getMyFavorites\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(myFavoriteModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MyFavorites/MyFavorites.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        myFavoriteModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMyFavorite(userId, favoriteId, data)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:30\n                \n            \n\n\n            \n                \n                    Service used to add a favorite for the current user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    favoriteId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMyFavorite(id)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:41\n                \n            \n\n\n            \n                \n                    Service used to delete a specific favorite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyFavorites\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyFavorites(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:18\n                \n            \n\n\n            \n                \n                    Service used to get all favorites for the current user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MyFavorite } from '../schemas/myFavorite.schema';\nimport { CreateMyFavoriteDto } from '../dto/create-myFavorite.dto';\n\n\n\n@Injectable()\nexport class MyFavoritesService {\n    constructor( @InjectModel(MyFavorite.name) private myFavoriteModel: Model){}\n\n    /**\n     * Service used to get all favorites for the current user\n     * @param {string} userId\n     * @return {Model}\n     */\n    async getMyFavorites(userId:string){\n        const favorites = await this.myFavoriteModel.find({'userId':userId}).exec();\n        return favorites;\n    }\n\n    /**\n     * Service used to add a favorite for the current user\n     * @param {string} userId\n     * @param {string} favoriteId\n     * @param {string[]}data\n     * @return {Model}\n     */\n    async addMyFavorite(userId,favoriteId, data){\n        const newFavorite = await this.myFavoriteModel.create({'userId':userId, sportFavoriteId:favoriteId,data:data})\n        newFavorite.save()\n        return newFavorite\n    }\n\n    /**\n     * Service used to delete a specific favorite\n     * @param {string} id\n     * @return {}\n     */\n    async delMyFavorite(id){\n        await this.myFavoriteModel.findByIdAndDelete(id);\n        return {\n            message: \"Deleted\"\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MySport.html":{"url":"classes/MySport.html","title":"class - MySport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MySport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/mySport.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\n/**\n * This collection collects all sports followed for all users. The propery data is not used\n */\nexport class MySport extends Document {\n  /**\n   * @property {string} userId\n   */\n  @Prop()\n  userId: string;\n\n\n  /**\n * @property {string} sportId\n */\n  @Prop()\n  sportId: string;\n\n  /**\n* @property {string[]} data\n*/\n  @Prop()\n  data: [string];\n}\n\nexport const MySportSchema = SchemaFactory.createForClass(MySport);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MySportsController.html":{"url":"controllers/MySportsController.html","title":"controller - MySportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MySportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MySports/MySports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mysports\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'mysports'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMySport\n                            \n                            \n                                    Async\n                                delMySport\n                            \n                            \n                                    Async\n                                getMySports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMySport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:34\n                \n            \n\n\n            \n                \n                    Controller to add a sport in the model MySports\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMySport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:54\n                \n            \n\n\n            \n                \n                    Controller to delete a sport to the model MySports\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMySports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMySports(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:21\n                \n            \n\n\n            \n                \n                    Controller to get all MySports for a specific user\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete, Post, Request, UseGuards, Put, Body } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { MySportsService } from './MySports.service';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n/**\n * Controller used for the route 'mysports'\n */\n@Controller('mysports')\nexport class MySportsController {\n  constructor(private readonly mySportsService: MySportsService) { }\n\n  /**\n   * Controller to get all MySports for a specific user\n   * You need to be connected to access to this route\n   * @param req\n   * @return {Model[]}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async getMySports(@Request() req) {\n    const list = await this.mySportsService.getMySports(req.user.id)\n    return list;\n  }\n\n  /**\n   * Controller to add a sport in the model MySports\n   * You need to be connected to access to this route\n   * @param req\n   * @return {Model}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async addMySport(@Request() req) {\n    let list\n    if (req.body.sportId) {\n      list = await this.mySportsService.addMySport(req.user.id, req.body.sportId)\n    }\n    else {\n      list = {\n        error: \"sportId is mandatory\"\n      }\n    }\n    return list;\n  }\n\n  /**\n   * Controller to delete a sport to the model MySports\n   * @param req\n   * @return {}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  async delMySport(@Request() req) {\n    if (req.body.id) {\n      return await this.mySportsService.delMySport(req.body.id)\n    } else {\n      throw new HttpException({\n        message: 'Id is Mandatory',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MySportsModule.html":{"url":"modules/MySportsModule.html","title":"module - MySportsModule","body":"\n                   \n\n\n\n\n    Modules\n    MySportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MySportsModule\n\n\n\ncluster_MySportsModule_providers\n\n\n\ncluster_MySportsModule_exports\n\n\n\n\nMySportsService \n\nMySportsService \n\n\n\nMySportsModule\n\nMySportsModule\n\nMySportsService  -->\n\nMySportsModule->MySportsService \n\n\n\n\n\nMySportsService\n\nMySportsService\n\nMySportsModule -->\n\nMySportsService->MySportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MySports/MySports.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MySportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MySportsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MySportsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MySportsService } from './MySports.service';\nimport { MySportsController } from './MySports.controller';\nimport { MySport, MySportSchema } from '../schemas/mySport.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports:[MongooseModule.forFeature([{ name: MySport.name, schema: MySportSchema }])],\n  providers: [MySportsService],\n  controllers: [MySportsController],\n  exports: [MySportsService],\n})\nexport class MySportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MySportsService.html":{"url":"injectables/MySportsService.html","title":"injectable - MySportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MySportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MySports/MySports.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMySport\n                            \n                            \n                                    Async\n                                delMySport\n                            \n                            \n                                    Async\n                                getMySports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mySportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MySports/MySports.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mySportModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMySport(userId, sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:27\n                \n            \n\n\n            \n                \n                    Service used to add a sport in the user's favorite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMySport(sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:38\n                \n            \n\n\n            \n                \n                    Service used to delete a sport in the user's favorite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMySports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMySports(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:16\n                \n            \n\n\n            \n                \n                    Service used to get all sports for a specific user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MySport } from '../schemas/mySport.schema';\nimport { CreateMySportDto } from '../dto/create-mySport.dto';\n\n\n@Injectable()\nexport class MySportsService {\n    constructor( @InjectModel(MySport.name) private mySportModel: Model){}\n    /**\n     * Service used to get all sports for a specific user\n     * @param {string} userId\n     * @return {Model[]}\n     */\n    async getMySports(userId){\n        const datas = await this.mySportModel.find({userId:userId}).exec();\n        return datas;\n    }\n\n    /**\n     * Service used to add a sport in the user's favorite\n     * @param {string} userId\n     * @param {string} sportId\n     * @return {Model}\n     */\n    async addMySport(userId, sportId){\n        const newMySport = await this.mySportModel.create({userId:userId, sportId:sportId, data:[]});\n        newMySport.save()\n        return newMySport\n    }\n\n    /**\n     * Service used to delete a sport in the user's favorite\n     * @param {string} sportId\n     * @return {}\n     */\n    async delMySport(sportId){\n        await this.mySportModel.findByIdAndDelete(sportId);\n        return {\n            message: \"Deleted ok\"\n        };\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pronostic.html":{"url":"classes/Pronostic.html","title":"class - Pronostic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pronostic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/pronostic.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentary\n                            \n                            \n                                matchId\n                            \n                            \n                                type\n                            \n                            \n                                userId\n                            \n                            \n                                winnerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            matchId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            winnerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\n/**\n * This collection collects all pronotics and the commentary associated\n */\nexport class Pronostic extends Document {\n  @Prop()\n  userId: string;\n\n  @Prop()\n  matchId: string;\n\n  @Prop()\n  type: string;\n\n  @Prop()\n  winnerId: string;\n\n  @Prop()\n  commentary: string;\n\n}\n\nexport const PronosticSchema = SchemaFactory.createForClass(Pronostic);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PronosticsController.html":{"url":"controllers/PronosticsController.html","title":"controller - PronosticsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PronosticsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyPronostics/pronostics.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                pronostics\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'pronostics'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req, createPronosticDto: CreatePronosticDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPronosticDto\n                                    \n                                                CreatePronosticDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:84\n                \n            \n\n\n            \n                \n                    Controller delete a specific pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:60\n                \n            \n\n\n            \n                \n                    Controller give all pronostics in the database\nYou need to be connected to access to this route\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(matchId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':matchId')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:72\n                \n            \n\n\n            \n                \n                    Controller give all pronostics for one match id\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matchId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Param, Delete, UseGuards, Request } from '@nestjs/common';\nimport { PronosticsService } from './pronostics.service';\nimport { CreatePronosticDto } from '../dto/create-pronostic.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\nimport { Pronostic } from '../schemas/pronostic.schema';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n/**\n * Controller used for the route 'pronostics'\n */\n@Controller('pronostics')\nexport class PronosticsController {\n  /**\n   * Constructor for Pronostics controller\n   * @param pronosticsService\n   * @param {Model} pronosticModel\n   */\n  constructor(private readonly pronosticsService: PronosticsService,\n    @InjectModel(Pronostic.name) private pronosticModel: Model) { }\n\n\n  @UseGuards(JwtAuthGuard)\n  @Post()\n   /**\n  * Controller check if the matchId userId doesn't matchs in the pronostics:\n  * - if match : update the matchId userId\n  * - if not : create a new pronostic\n  * You need to be connected to access to this route\n  * @param {Request}\n  * @param {Body} createPronosticDto\n  * @return {Pronostic}\n  */\n  async create(@Request() req, @Body() createPronosticDto: CreatePronosticDto) {\n    const user = req.user.id\n    if (createPronosticDto.matchId && createPronosticDto.winnerId && createPronosticDto.type) {\n      const matchesUserIdMatchId = await this.pronosticModel.find({ userId: user, matchId: createPronosticDto.matchId });\n      if (matchesUserIdMatchId.length != 0) {\n        return await this.pronosticsService.updateOne(user, createPronosticDto);\n      } else {\n        return await this.pronosticsService.create(user, createPronosticDto);\n      }\n    } else {\n      throw new HttpException({\n        error: 404,\n        message: \"userId, matchId, winnerId and type are mandatory. Only commentary is optional\"\n      }, HttpStatus.BAD_REQUEST)\n    }\n  }\n\n  /**\n   * Controller give all pronostics in the database\n   * You need to be connected to access to this route\n   * @return {Pronotic[]}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(): Promise {\n    return this.pronosticsService.findAll();\n  }\n\n  /**\n  * Controller give all pronostics for one match id\n  * You need to be connected to access to this route\n  * @param {string} matchId\n  * @return {Pronostic[]}\n  */\n  @UseGuards(JwtAuthGuard)\n  @Get(':matchId')\n  async findOne(@Param('matchId') matchId: string): Promise {\n    return this.pronosticsService.findPronosticForOneMatchId(matchId);\n  }\n\n  /**\n   * Controller delete a specific pronostic\n   * You need to be connected to access to this route\n   * @param {string} pronostic id\n   * @return  {}\n  */\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async delete(@Param('id') id: string): Promise {\n    if (id) {\n      return this.pronosticsService.deleteOne(id);\n\n    }\n    throw new HttpException({\n      error: 404,\n      message: \"id is mandatory\"\n    }, HttpStatus.BAD_REQUEST)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PronosticsModule.html":{"url":"modules/PronosticsModule.html","title":"module - PronosticsModule","body":"\n                   \n\n\n\n\n    Modules\n    PronosticsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PronosticsModule\n\n\n\ncluster_PronosticsModule_providers\n\n\n\ncluster_PronosticsModule_exports\n\n\n\n\nPronosticsService \n\nPronosticsService \n\n\n\nPronosticsModule\n\nPronosticsModule\n\nPronosticsService  -->\n\nPronosticsModule->PronosticsService \n\n\n\n\n\nPronosticsService\n\nPronosticsService\n\nPronosticsModule -->\n\nPronosticsService->PronosticsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MyPronostics/pronostics.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PronosticsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PronosticsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PronosticsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PronosticsController } from './pronostics.controller';\nimport { PronosticsService } from './pronostics.service';;\nimport { Pronostic, PronosticSchema } from '../schemas/pronostic.schema';\n\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Pronostic.name, schema: PronosticSchema }]),\n  ],\n  controllers: [PronosticsController],\n  providers: [PronosticsService],\n  exports: [PronosticsService],\n})\nexport class PronosticsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PronosticsService.html":{"url":"injectables/PronosticsService.html","title":"injectable - PronosticsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PronosticsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyPronostics/pronostics.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteOne\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findPronosticForOneMatchId\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pronosticModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MyPronostics/pronostics.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pronosticModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: String, createPronosticDto: CreatePronosticDto)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:22\n                \n            \n\n\n            \n                \n                    Service used to create a pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                String\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPronosticDto\n                                    \n                                                CreatePronosticDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(id)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:58\n                \n            \n\n\n            \n                \n                    Service used to delete a specific pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        pronostic id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:37\n                \n            \n\n\n            \n                \n                    Service used to give all pronostics in the database\nYou need to be connected to access to this route\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPronosticForOneMatchId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPronosticForOneMatchId(matchId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:47\n                \n            \n\n\n            \n                \n                    Service used to give all pronostics for a specific match\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matchId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(userId, createPronosticDto)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:76\n                \n            \n\n\n            \n                \n                    Service used to update a specific pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the user\n\n                                    \n                                \n                                \n                                    createPronosticDto\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Pronostic } from '../schemas/pronostic.schema';\nimport { HttpException, HttpStatus } from '@nestjs/common'\n\nimport { CreatePronosticDto } from '../dto/create-pronostic.dto';\n\n@Injectable()\nexport class PronosticsService {\n  constructor(@InjectModel(Pronostic.name) private pronosticModel: Model\n  ) {\n  }\n\n  /**\n   * Service used to create a pronostic\n   * You need to be connected to access to this route\n   * @param {string} userId\n   * @param {CreatePronosticDto} createPronosticDto\n   * @return {Pronostic}\n  */\n  async create(userId: String, createPronosticDto: CreatePronosticDto): Promise {\n    const createdPronostic = await new this.pronosticModel({\n      userId: userId,\n      matchId: createPronosticDto.matchId,\n      winnerId: createPronosticDto.winnerId,\n      commentary: (createPronosticDto.commentary ? createPronosticDto.commentary : \"\")\n    })\n    return createdPronostic.save();\n  }\n\n  /**\n   * Service used to give all pronostics in the database\n   * You need to be connected to access to this route\n   * @return {Pronotic[]}\n  */\n  async findAll(): Promise {\n    return this.pronosticModel.find({});\n  }\n\n  /**\n   * Service used to give all pronostics for a specific match\n   * You need to be connected to access to this route\n   * @param {string} matchId\n   * @returns {Pronostic[]}\n  */\n  async findPronosticForOneMatchId(matchId: string): Promise {\n    const pronostic = await this.pronosticModel.find({ 'matchId': matchId }).exec();\n    return pronostic;\n  }\n\n  /**\n   * Service used to delete a specific pronostic\n   * You need to be connected to access to this route\n   * @param {string} id pronostic id\n   * @returns  {JSON}\n  */\n  async deleteOne(id): Promise {\n    const result = await this.pronosticModel.findByIdAndDelete(id);\n    if (!result) {\n      throw new HttpException({\n        message: 'No pronostic deleted',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    else return {\n      message: \"Pronostic Deleted !\",\n    }\n  }\n\n  /**\n   * Service used to update a specific pronostic\n   * You need to be connected to access to this route\n   * @param {String} userId id of the user\n   * @return  {Pronostic}\n  */\n  async updateOne(userId, createPronosticDto): Promise {\n    const newPronostic = await this.pronosticModel.findOne({ userId: userId, matchId: createPronosticDto.matchId });\n    newPronostic.winnerId = createPronosticDto.winnerId\n    newPronostic.commentary = (createPronosticDto.commentary ? createPronosticDto.commentary : \"\")\n    return newPronostic.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sport.html":{"url":"classes/Sport.html","title":"class - Sport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/sport.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/sport.schema.ts:10\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\n/**\n * This collection collects all sports available in the application\n */\nexport class Sport extends Document {\n  @Prop()\n  name: string;\n\n}\n\nexport const SportSchema = SchemaFactory.createForClass(Sport);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SportsController.html":{"url":"controllers/SportsController.html","title":"controller - SportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports/sports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sports\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSport\n                            \n                            \n                                    Async\n                                delSport\n                            \n                            \n                                    Async\n                                getSport\n                            \n                            \n                                    Async\n                                getSports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delSport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSport(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSports()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete,Post,Request, UseGuards,Put, Param } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { SportsService } from './sports.service';\n\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n@Controller('sports')\nexport class SportsController {\n    constructor(private readonly SportsService: SportsService) {}\n    @UseGuards(JwtAuthGuard)\n    @Get(':id')\n    async getSport(@Param('id') id: string) {\n      const sport = await this.SportsService.getSport(id)\n      return sport;\n    }\n\n    @Get()\n    async getSports() {\n      const sports = await this.SportsService.getSports()\n      return sports;\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Post()\n    async addSport(@Request() req) {\n      let list\n      if (req.body.name){\n        list = await this.SportsService.addSport(req.body.name)\n      }\n       else {\n        throw new HttpException({\n            message: 'Name is Mandatory',\n          }, HttpStatus.BAD_REQUEST);\n       }\n      return list;\n    }\n\n    @UseGuards(JwtAuthGuard)\n    @Delete()\n    async delSport(@Request() req) {\n      if (req.body.id){\n        return await this.SportsService.delSport(req.body.id)\n      } else {\n        throw new HttpException({\n            message: 'Id is Mandatory',\n          }, HttpStatus.BAD_REQUEST);\n      }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SportsModule.html":{"url":"modules/SportsModule.html","title":"module - SportsModule","body":"\n                   \n\n\n\n\n    Modules\n    SportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SportsModule\n\n\n\ncluster_SportsModule_providers\n\n\n\n\nSportsService\n\nSportsService\n\n\n\nSportsModule\n\nSportsModule\n\nSportsModule -->\n\nSportsService->SportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sports/sports.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SportsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SportsController } from './sports.controller';\nimport { SportsService } from './sports.service';\nimport { Sport, SportSchema } from '../schemas/sport.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports:[MongooseModule.forFeature([{ name: Sport.name, schema: SportSchema }])],\n  controllers: [SportsController],\n  providers: [SportsService]\n})\nexport class SportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SportsService.html":{"url":"injectables/SportsService.html","title":"injectable - SportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports/sports.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSport\n                            \n                            \n                                    Async\n                                delSport\n                            \n                            \n                                    Async\n                                getSport\n                            \n                            \n                                    Async\n                                getSports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/sports/sports.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SportModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSport(name)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delSport(sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSport(id)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSports()\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Sport } from '../schemas/sport.schema';\nimport { CreateMySportDto } from '../dto/create-mySport.dto';\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n\n@Injectable()\nexport class SportsService {\n    constructor( @InjectModel(Sport.name) private SportModel: Model){}\n\n    async getSport(id){\n        try {\n            const sport = await this.SportModel.findById(id).orFail();\n            return sport;\n        } catch (error) {\n            throw new HttpException({\n                message: 'Invalid Sport ID',\n              }, HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    async getSports(){\n            const sport = await this.SportModel.find({});\n            return sport;\n\n    }\n\n    async addSport(name){\n        const newSport = await this.SportModel.create({name: name});\n        newSport.save()\n        return newSport\n    }\n\n    async delSport(sportId){\n        // del a sport in your mySports array.\n        // :sportId = id extract to the API\n        // return JSON\n        await this.SportModel.findByIdAndDelete(sportId);\n        return {\n            message: \"Deleted ok\"\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Matches(passwordRegex)@ValidateIf(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(10)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, ValidateIf} from 'class-validator';\n\nconst passwordRegex = new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})');\n\nexport class UpdateUserDto {\n\n  @MinLength(1)\n  firstName: string;\n\n  @MinLength(1)\n  lastName: string;\n\n  @IsEmail()\n  email: string;\n\n  @MinLength(10)\n  phone: string;\n\n  @Matches(passwordRegex)\n  @ValidateIf( p => p.password !== \"\")\n  password: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/user.schema.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema()\nexport class User extends Document {\n  @Prop()\n  firstName: string;\n\n  @Prop()\n  lastName: string;\n\n  @Prop()\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  phone: string;\n\n  @Prop()\n  isAdmin: boolean;\n\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminCreate\n                            \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminCreate(req, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('admin/createUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminUpdate(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('admin/updateUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, Post, Param, Delete, Patch, UseGuards, Request} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\n\nimport { User } from '../schemas/user.schema';\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n@Controller('users')\nexport class UsersController {\nconstructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto) {\n    if(await this.usersService.userExists(createUserDto)){\n      throw new HttpException({\n        message: 'User already Exist',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    return await this.usersService.create(createUserDto);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(@Request() req): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.findAll();\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async findOne(@Request() req, @Param('id') id: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.findUserById(id);\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async delete(@Request() req, @Param('id') id: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.deleteUser(id);\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch()\n  async update(@Request() req, @Body() body) {\n    const id = req.user.id\n    return this.usersService.update(id, body);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post('admin/createUser')\n  async adminCreate(@Request() req,@Body() createUserDto: CreateUserDto) {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      if(await this.usersService.userExists(createUserDto)){\n        throw new HttpException({\n          message: 'User already Exist',\n        }, HttpStatus.BAD_REQUEST);\n      }\n      return await this.usersService.adminCreate(createUserDto);\n    }\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Patch('admin/updateUser')\n  async adminUpdate(@Request() req, @Body() body) {\n    const id = req.user.id\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if(!isAdmin){\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else{\n      return this.usersService.adminUpdate(body.id, body);\n    }\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';;\nimport { User, UserSchema } from '../schemas/user.schema';\nimport { MySport, MySportSchema } from '../schemas/mySport.schema';\nimport { MyFavorite, MyFavoriteSchema } from '../schemas/myFavorite.schema';\n\n\n@Module({\n    imports: [\n      MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n      MongooseModule.forFeature([{ name: MySport.name, schema: MySportSchema }]),\n      MongooseModule.forFeature([{ name: MyFavorite.name, schema: MyFavoriteSchema }])\n\n    ],\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n  })\n  export class UsersModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminCreate\n                            \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                isAdmin\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                userExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, mySportModel: Model, myFavoriteModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mySportModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        myFavoriteModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminCreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:114\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminUpdate(id, body)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            isAdmin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isAdmin(id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id, body)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            userExists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    userExists(createUserDTO: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../schemas/user.schema';\nimport { MySport } from '../schemas/mySport.schema';\nimport { MyFavorite } from '../schemas/myFavorite.schema';\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\n\nimport { isNull, isError } from 'util';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model,\n  @InjectModel(MySport.name) private mySportModel: Model,\n  @InjectModel(MyFavorite.name) private myFavoriteModel: Model,\n  ) {\n  }\n\n  async isAdmin(id) : Promise {\n    const user = await this.userModel.findById(id);\n    if (!isNull(user)){\n      return user.isAdmin\n    }\n    return false;\n  }\n\n\n  async userExists(createUserDTO: CreateUserDto): Promise {\n    const user = await this.userModel.findOne({ email: createUserDTO.email });\n    if(isNull(user)){\n      return false;\n    }\n    return true;\n  }\n\n  async create(createUserDto: CreateUserDto): Promise {\n    const email = createUserDto.email;\n    const firstName = createUserDto.firstName;\n    const lastName = createUserDto.lastName;\n    const phone = createUserDto.phone;\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n    const createdUser = await new this.userModel({ firstName: firstName, lastName: lastName, phone: phone, email: email, password: hashedPassword ,isAdmin: false });\n    return createdUser.save();\n  }\n\n\n  async findAll(): Promise  {\n    return this.userModel.find().exec();\n  }\n\n  async findOne(email: string): Promise {\n   const user = await this.userModel.find({'email':email}).exec();\n   return user;\n  }\n\n  async findUserById(id: string): Promise {\n    const user = await this.userModel.findById(id);\n    return user;\n  }\n\n  async deleteUser(id) : Promise{\n    const result = await this.userModel.deleteOne({'_id':id}).exec();\n    if(result.deletedCount === 0){\n      throw new HttpException({\n        message: 'No user deleted',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    else return {\n      message : \"User Deleted !\",\n    }\n  }\n\n \n  async update(id, body): Promise{\n    const user = await this.userModel.findById(id);\n    let userUpdated = user;\n    let updated = true;\n    \n    if (body.hasOwnProperty(\"firstName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"firstName\": body.firstName},{new:true,useFindAndModify:false}); \n      updated = true;\n    }\n    if (body.hasOwnProperty(\"lastName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"lastName\": body.lastName},{new:true,useFindAndModify:false});\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"email\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"email\": body.email},{new:true,useFindAndModify:false}); \n      updated = true;\n    } \n    if (body.hasOwnProperty(\"password\")){\n      const hashedPassword = await bcrypt.hash(body.password, 10);\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"password\": hashedPassword},{new:true,useFindAndModify:false}); \n      updated = true;\n    } \n    if (body.hasOwnProperty(\"phone\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"phone\": body.phone},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if(updated){\n      return userUpdated;\n    }\n    else{\n      throw new HttpException({\n        message: 'Nothing Updated',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  async adminCreate(createUserDto: CreateUserDto): Promise {\n    const email = createUserDto.email;\n    const firstName = createUserDto.firstName;\n    const lastName = createUserDto.lastName;\n    const phone = createUserDto.phone;\n    const isAdmin = createUserDto.isAdmin;\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n    const createdUser = await new this.userModel({ firstName: firstName, lastName: lastName, phone: phone, email: email, password: hashedPassword ,isAdmin: isAdmin });\n    return createdUser.save();\n  }\n\n  async adminUpdate(id, body): Promise{\n    const user = await this.userModel.findById(id);\n    let userUpdated = user;\n    let updated = false;\n    if (body.hasOwnProperty(\"firstName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"firstName\": body.firstName},{new:true,useFindAndModify:false});\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"lastName\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"lastName\": body.lastName},{new:true,useFindAndModify:false});\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"email\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"email\": body.email},{new:true,useFindAndModify:false}); \n      updated = true;\n    } \n    if (body.hasOwnProperty(\"password\")){\n      const hashedPassword = await bcrypt.hash(body.password, 10);\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"password\": hashedPassword},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if (body.hasOwnProperty(\"phone\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"phone\": body.phone},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if (body.hasOwnProperty(\"isAdmin\")){\n      userUpdated = await this.userModel.findByIdAndUpdate( id,{\"isAdmin\": body.isAdmin},{new:true,useFindAndModify:false});\n      updated = true;\n    } \n    if(updated){\n      return userUpdated;\n    }\n    else{\n      throw new HttpException({\n        message: 'Nothing Updated',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/MyFavorites/MyFavorites.controller.ts\n            \n            controller\n            MyFavoritesController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/MyFavorites/MyFavorites.service.ts\n            \n            injectable\n            MyFavoritesService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/MyPronostics/pronostics.controller.ts\n            \n            controller\n            PronosticsController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/MyPronostics/pronostics.service.ts\n            \n            injectable\n            PronosticsService\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/MySports/MySports.controller.ts\n            \n            controller\n            MySportsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/MySports/MySports.service.ts\n            \n            injectable\n            MySportsService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/create-myFavorite.dto.ts\n            \n            class\n            CreateMyFavoriteDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dto/create-mySport.dto.ts\n            \n            class\n            CreateMySportDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dto/create-pronostic.dto.ts\n            \n            class\n            CreatePronosticDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/dto/create-sport.dto.ts\n            \n            class\n            CreateSportDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/dto/create-user.dto.ts\n            \n            variable\n            passwordRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/dto/update-user.dto.ts\n            \n            variable\n            passwordRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/myFavorite.schema.ts\n            \n            class\n            MyFavorite\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/schemas/myFavorite.schema.ts\n            \n            variable\n            MyFavoriteSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/mySport.schema.ts\n            \n            class\n            MySport\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/schemas/mySport.schema.ts\n            \n            variable\n            MySportSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/pronostic.schema.ts\n            \n            class\n            Pronostic\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/schemas/pronostic.schema.ts\n            \n            variable\n            PronosticSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/sport.schema.ts\n            \n            class\n            Sport\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/schemas/sport.schema.ts\n            \n            variable\n            SportSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sports/sports.controller.ts\n            \n            controller\n            SportsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/sports/sports.service.ts\n            \n            injectable\n            SportsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/12)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/mongoose : ^7.0.2\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @types/bcrypt : ^3.0.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cookie-parser : ^1.4.5\n        \n            dotenv : ^8.2.0\n        \n            fs : 0.0.1-security\n        \n            mongoose : ^5.10.3\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MyFavoritesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MySportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PronosticsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MyFavoritesModule\n\n\n\ncluster_MyFavoritesModule_exports\n\n\n\ncluster_MyFavoritesModule_providers\n\n\n\ncluster_MySportsModule\n\n\n\ncluster_MySportsModule_exports\n\n\n\ncluster_MySportsModule_providers\n\n\n\ncluster_PronosticsModule\n\n\n\ncluster_PronosticsModule_exports\n\n\n\ncluster_PronosticsModule_providers\n\n\n\ncluster_SportsModule\n\n\n\ncluster_SportsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nAppModule -->\n\nMyFavoritesModule->AppModule\n\n\n\n\n\nMyFavoritesService \n\nMyFavoritesService \n\nMyFavoritesService  -->\n\nMyFavoritesModule->MyFavoritesService \n\n\n\n\n\nMySportsModule\n\nMySportsModule\n\nAppModule -->\n\nMySportsModule->AppModule\n\n\n\n\n\nMySportsService \n\nMySportsService \n\nMySportsService  -->\n\nMySportsModule->MySportsService \n\n\n\n\n\nPronosticsModule\n\nPronosticsModule\n\nAppModule -->\n\nPronosticsModule->AppModule\n\n\n\n\n\nPronosticsService \n\nPronosticsService \n\nPronosticsService  -->\n\nPronosticsModule->PronosticsService \n\n\n\n\n\nSportsModule\n\nSportsModule\n\nAppModule -->\n\nSportsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nMyFavoritesService\n\nMyFavoritesService\n\nMyFavoritesModule -->\n\nMyFavoritesService->MyFavoritesModule\n\n\n\n\n\nMySportsService\n\nMySportsService\n\nMySportsModule -->\n\nMySportsService->MySportsModule\n\n\n\n\n\nPronosticsService\n\nPronosticsService\n\nPronosticsModule -->\n\nPronosticsService->PronosticsModule\n\n\n\n\n\nSportsService\n\nSportsService\n\nSportsModule -->\n\nSportsService->SportsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            MyFavoriteSchema   (src/.../myFavorite.schema.ts)\n                        \n                        \n                            MySportSchema   (src/.../mySport.schema.ts)\n                        \n                        \n                            passwordRegex   (src/.../create-user.dto.ts)\n                        \n                        \n                            passwordRegex   (src/.../update-user.dto.ts)\n                        \n                        \n                            PronosticSchema   (src/.../pronostic.schema.ts)\n                        \n                        \n                            SportSchema   (src/.../sport.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    secret: 'secretKey',\n  }\n                        \n                    \n\n\n            \n        \n\n    src/schemas/myFavorite.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MyFavoriteSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(MyFavorite)\n                        \n                    \n\n\n            \n        \n\n    src/schemas/mySport.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MySportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(MySport)\n                        \n                    \n\n\n            \n        \n\n    src/dto/create-user.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRegex\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})')\n                        \n                    \n\n\n            \n        \n\n    src/dto/update-user.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRegex\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})')\n                        \n                    \n\n\n            \n        \n\n    src/schemas/pronostic.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PronosticSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Pronostic)\n                        \n                    \n\n\n            \n        \n\n    src/schemas/sport.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Sport)\n                        \n                    \n\n\n            \n        \n\n    src/schemas/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
