var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,0.964,1,2.504]],["body/controllers/AppController.html",[0,1.861,1,3.966,2,1.267,3,0.193,4,0.193,5,0.166,6,3.87,7,0.28,8,5.733,9,3.643,10,0.438,11,1.608,12,5.733,13,4.517,14,1.143,15,0.02,16,4.517,17,0.544,18,4.517,19,0.644,20,2.943,21,0.738,22,2.457,23,3.643,24,1.267,25,0.62,26,1.204,27,3.037,28,1.267,29,0.309,30,2.178,31,2.178,32,3.87,33,0.659,34,1.936,35,2.319,36,2.319,37,4.024,38,3.87,39,0.193,40,0.194,41,1.334,42,2.871,43,1.608,44,2.051,45,2.319,46,1.608,47,0.742,48,2.319,49,4.517,50,4.517,51,3.444,52,0.012,53,0.015,54,0.012]],["title/modules/AppModule.html",[55,1.015,56,2.504]],["body/modules/AppModule.html",[1,3.478,2,1.41,3,0.158,4,0.158,5,0.136,7,0.229,9,3.195,15,0.02,19,0.565,29,0.358,33,0.54,37,3.89,38,3.169,39,0.158,40,0.159,52,0.01,53,0.013,54,0.01,55,1.797,56,5.163,57,1.499,58,1.499,59,1.68,60,1.68,61,1.499,62,2.593,63,1.68,64,3.169,65,3.169,66,3.169,67,4.072,68,4.2,69,4.2,70,4.072,71,4.2,72,4.2,73,4.2,74,3.187,75,2.283,76,1.419,77,1.68,78,3.699,79,3.832,80,2.283,81,3.195,82,3.195,83,2.959,84,3.699,85,1.899,86,0.719,87,2.351,88,3.699,89,3.699,90,3.699,91,3.699,92,3.699,93,3.699,94,3.699,95,3.699,96,2.351,97,3.699,98,3.699,99,3.699,100,3.699,101,3.699]],["title/injectables/AppService.html",[37,2.131,102,0.743]],["body/injectables/AppService.html",[3,0.237,4,0.237,5,0.203,7,0.343,15,0.02,19,0.73,29,0.272,33,0.808,37,3.822,39,0.237,40,0.238,52,0.015,53,0.017,54,0.015,102,1.332,103,2.125,104,4.745]],["title/controllers/AuthController.html",[0,0.964,105,2.504]],["body/controllers/AuthController.html",[0,1.825,2,1.276,3,0.195,4,0.195,5,0.167,7,0.282,10,0.441,11,1.615,14,1.151,15,0.02,17,0.548,19,0.647,21,0.741,24,1.276,25,0.624,26,1.212,27,3.046,28,1.276,29,0.31,30,2.193,31,2.193,33,0.664,39,0.195,40,0.195,41,1.343,43,1.276,44,2.066,46,1.615,52,0.012,53,0.015,54,0.012,105,4.371,106,3.897,107,2.335,108,5.412,109,2.468,110,1.865,111,5.689,112,4.549,113,4.549,114,4.549,115,2.495,116,3.897,117,2.678,118,3.465,119,3.468,120,4.549,121,4.549,122,4.549,123,4.549,124,4.549]],["title/modules/AuthModule.html",[55,1.015,67,2.3]],["body/modules/AuthModule.html",[2,1.556,3,0.184,4,0.184,5,0.157,15,0.02,29,0.352,33,0.626,39,0.184,40,0.184,52,0.011,53,0.015,54,0.011,55,1.724,57,1.738,58,1.738,59,1.948,60,1.948,61,1.738,62,2.791,63,1.948,67,4.662,74,3.323,75,2.519,76,1.646,77,1.948,83,3.265,87,2.726,105,4.252,117,2.525,118,3.78,119,3.27,125,3.675,126,4.29,127,3.675,128,4.38,129,4.38,130,4.29,131,5.546,132,4.29,133,4.29,134,4.29,135,4.29,136,3.27,137,2.968,138,3.675,139,4.29,140,3.675,141,3.675,142,4.29,143,4.29,144,4.29,145,4.29]],["title/injectables/AuthService.html",[102,0.743,118,1.985]],["body/injectables/AuthService.html",[0,1.253,3,0.144,4,0.144,5,0.123,7,0.336,10,0.326,11,1.319,15,0.02,17,0.653,19,0.721,21,0.89,24,1.522,25,0.744,26,1.446,28,1.319,29,0.288,33,0.49,39,0.144,40,0.144,41,1.736,43,1.736,46,1.847,47,1.104,52,0.014,53,0.013,54,0.009,102,0.965,103,1.288,108,4.028,110,1.894,111,4.028,118,2.579,136,2.559,146,2.876,147,3.093,148,3.252,149,2.988,150,2.267,151,4.701,152,3.357,153,3.052,154,6.829,155,3.357,156,2.579,157,0.744,158,4.701,159,3.357,160,6.189,161,3.584,162,4.701,163,5.879,164,3.357,165,2.579,166,4.701,167,3.395,168,2.976,169,2.135,170,2.322,171,3.584,172,2.015,173,1.27,174,1.539,175,3.357,176,4.701,177,3.357,178,3.357,179,3.357,180,1.976,181,3.357,182,2.876,183,3.357,184,0.766,185,3.357,186,1.976,187,3.357,188,1.976,189,3.357,190,1.439,191,3.357,192,1.976,193,3.357,194,3.357]],["title/controllers/CommentariesController.html",[0,0.964,195,2.504]],["body/controllers/CommentariesController.html",[0,1.585,2,0.621,3,0.095,4,0.095,5,0.081,7,0.137,10,0.215,11,0.968,14,1.394,15,0.02,17,0.663,19,0.727,21,0.285,24,1.545,25,0.755,26,1.467,27,2.869,28,1.545,29,0.3,30,1.664,31,1.664,33,0.504,34,0.948,35,1.136,36,1.136,39,0.095,40,0.095,41,0.653,43,1.545,44,1.005,45,1.772,46,1.815,47,1.063,48,2.668,51,1.687,52,0.006,53,0.009,54,0.006,76,1.324,80,2.177,86,0.43,107,1.136,109,2.68,110,2.029,115,1.214,147,2.869,150,1.664,153,2.177,157,0.713,165,1.893,169,2.839,170,1.531,172,1.479,173,0.984,174,1.569,184,0.505,190,2.773,195,2.388,196,1.895,197,4.106,198,1.893,199,2.388,200,1.19,201,2.957,202,1.772,203,2.957,204,2.936,205,2.388,206,1.687,207,3.886,208,1.302,209,2.212,210,2.957,211,2.924,212,3.21,213,3.21,214,2.979,215,2.212,216,5.097,217,2.212,218,2.212,219,2.631,220,1.839,221,1.399,222,1.895,223,2.212,224,2.212,225,2.822,226,2.388,227,3.316,228,2.629,229,2.212,230,1.406,231,2.212,232,3.451,233,2.212,234,2.212,235,2.212,236,2.388,237,1.895,238,2.212,239,2.212,240,2.328,241,1.895,242,2.822,243,1.895,244,0.948,245,1.895,246,1.005,247,0.825,248,0.653,249,1.687,250,2.228,251,0.948,252,1.136,253,2.212,254,2.957,255,2.212,256,1.687,257,1.895,258,1.895,259,2.212,260,2.054,261,1.213,262,1.942,263,1.067,264,1.302,265,1.005,266,2.212,267,2.936,268,2.936,269,2.936,270,2.212,271,2.212,272,2.212,273,2.212,274,3.235,275,2.212,276,2.212,277,4.243,278,2.212,279,2.212,280,1.895,281,2.212,282,2.212,283,2.212]],["title/modules/CommentariesModule.html",[55,1.015,68,2.3]],["body/modules/CommentariesModule.html",[2,1.608,3,0.193,4,0.193,5,0.166,15,0.02,21,0.581,25,0.786,29,0.348,33,0.659,39,0.193,40,0.194,52,0.012,53,0.015,54,0.012,55,1.766,57,1.831,58,1.831,59,2.051,60,2.051,61,1.831,62,2.86,63,2.051,68,4.564,74,3.369,75,2.603,76,1.733,77,2.051,83,3.375,85,2.319,86,0.878,87,2.871,195,4.357,211,1.936,242,4.112,243,3.87,249,3.444,284,3.87,285,3.87,286,4.517,287,4.517,288,4.517,289,3.966,290,3.144,291,1.642,292,3.966,293,4.517,294,2.084,295,3.125]],["title/injectables/CommentariesService.html",[102,0.743,242,2.131]],["body/injectables/CommentariesService.html",[3,0.127,4,0.127,5,0.109,7,0.344,10,0.288,11,1.208,15,0.02,17,0.765,19,0.757,21,0.793,24,1.727,25,0.845,26,1.641,28,1.727,29,0.312,33,0.629,39,0.127,40,0.127,41,1.497,43,1.208,46,1.422,52,0.008,53,0.011,54,0.008,80,2.303,86,0.578,102,0.884,103,1.139,109,2.531,110,2.073,147,3.327,150,2.078,157,0.591,165,1.629,169,2.682,172,1.847,173,0.61,174,1.66,180,2.536,184,1.157,190,1.847,197,3.691,198,2.363,199,2.981,200,1.918,201,3.691,202,2.212,203,4.765,204,2.981,205,2.981,207,4.216,211,2.843,212,3.032,213,3.032,214,2.682,216,3.691,221,1.204,222,2.545,225,2.985,227,3.508,236,2.055,242,2.536,244,1.273,245,2.545,246,1.349,247,1.265,248,1.272,249,2.264,250,1.273,251,1.273,254,3.691,257,2.545,258,2.545,261,0.752,263,2.97,291,1.08,296,2.545,297,2.97,298,3.508,299,2.97,300,2.363,301,3.691,302,2.97,303,2.738,304,2.97,305,2.97,306,1.139,307,2.97,308,2.97,309,2.264,310,2.97,311,2.264,312,2.97,313,2.97,314,2.97,315,2.264,316,1.567,317,2.97,318,2.97,319,2.545,320,1.525,321,2.545,322,1.888,323,2.055,324,2.97,325,2.97,326,2.97]],["title/classes/Commentary.html",[40,0.155,211,1.551]],["body/classes/Commentary.html",[3,0.168,4,0.168,5,0.144,7,0.244,10,0.382,14,1.656,15,0.02,17,0.788,21,0.809,22,2.247,29,0.257,39,0.224,40,0.225,47,1.147,52,0.01,53,0.014,54,0.01,86,0.765,157,0.898,173,0.808,184,1.196,211,3.153,221,2.546,227,4.077,228,2.875,247,1.019,248,1.162,289,2.723,294,1.906,316,2.143,320,3.026,322,3.745,327,1.289,328,3.001,329,2.875,330,3.086,331,4.491,332,4.491,333,2.381,334,3.233,335,1.808,336,3.946,337,3.937,338,3.937,339,3.086,340,3.086,341,3.699,342,3.937,343,3.996,344,3.937,345,3.937,346,2.691,347,3.372]],["title/classes/CreateCommentaryDto.html",[40,0.155,207,2.3]],["body/classes/CreateCommentaryDto.html",[3,0.174,4,0.174,5,0.149,7,0.251,10,0.394,14,1.514,15,0.02,17,0.796,19,0.601,21,0.851,22,2.293,29,0.262,39,0.174,40,0.23,47,1.154,52,0.011,53,0.014,54,0.011,157,0.907,184,1.22,200,1.845,207,3.4,211,3.137,221,2.577,227,4.139,228,2.934,247,1.04,261,1.354,291,1.476,316,2.176,320,3.072,322,3.803,327,1.329,335,1.845,339,3.149,340,3.149,341,3.744,343,4.078,348,3.273,349,3.477,350,2.746,351,4.059,352,4.074,353,4.059,354,4.059,355,4.059,356,4.059,357,2.226,358,2.226,359,2.226,360,2.084]],["title/classes/CreateMyFavoriteDto.html",[40,0.155,361,2.504]],["body/classes/CreateMyFavoriteDto.html",[3,0.199,4,0.199,5,0.171,7,0.288,10,0.451,15,0.02,17,0.768,19,0.656,20,3.539,22,2.868,29,0.228,39,0.199,40,0.25,47,1.156,52,0.012,53,0.016,54,0.012,157,0.875,184,1.527,200,2.012,247,1.301,261,1.477,316,2.319,327,1.521,335,2.012,348,3.227,350,2.996,352,2.735,357,2.548,358,2.548,359,2.548,360,2.385,361,4.037,362,3.98,363,2.996,364,4.413,365,4.646,366,4.646,367,4.646]],["title/classes/CreateMySportDto.html",[40,0.155,368,2.3]],["body/classes/CreateMySportDto.html",[3,0.199,4,0.199,5,0.171,7,0.288,10,0.451,15,0.02,17,0.768,19,0.656,20,3.539,22,2.868,29,0.228,39,0.199,40,0.25,47,1.156,52,0.012,53,0.016,54,0.012,157,0.875,184,1.527,200,2.012,247,1.301,261,1.477,316,2.319,327,1.521,335,2.012,348,3.227,350,2.996,352,2.735,357,2.548,358,2.548,359,2.548,360,2.385,364,4.413,368,3.708,369,3.98,370,2.996,371,4.646,372,4.646,373,4.646]],["title/classes/CreateNewsDto.html",[40,0.155,374,2.3]],["body/classes/CreateNewsDto.html",[3,0.171,4,0.171,5,0.147,7,0.248,10,0.388,14,1.504,15,0.02,17,0.814,19,0.596,21,0.765,25,0.868,29,0.26,39,0.171,40,0.227,47,1.193,52,0.011,53,0.014,54,0.011,157,0.927,200,1.827,263,3.45,291,1.455,320,3.05,327,1.31,335,1.827,339,3.723,340,3.119,348,3.326,350,2.72,352,4.06,357,2.195,358,2.195,359,2.195,360,2.054,374,3.367,375,3.428,376,4.11,377,4.552,378,5.09,379,2.045,380,4.552,381,4.001,382,4.001,383,4.001,384,4.001,385,2.906,386,4.001,387,4.001]],["title/classes/CreatePronosticDto.html",[40,0.155,388,2.131]],["body/classes/CreatePronosticDto.html",[3,0.163,4,0.163,5,0.14,7,0.236,10,0.369,14,1.467,15,0.02,17,0.82,19,0.576,21,0.876,22,2.657,25,0.914,29,0.251,39,0.163,40,0.22,47,1.184,52,0.01,53,0.014,54,0.01,157,0.973,184,1.414,200,1.768,211,2.919,221,2.701,247,0.997,261,1.297,291,1.384,316,2.107,320,2.975,327,1.246,335,1.768,339,3.017,340,3.017,348,3.339,350,2.631,352,4.009,357,2.088,358,2.088,359,2.088,360,1.954,379,1.593,388,3.017,389,3.261,390,4.964,391,4.009,392,4.009,393,3.807,394,3.807,395,3.807,396,3.807,397,3.907,398,3.807,399,3.807,400,3.807,401,4.391]],["title/classes/CreateSportDto.html",[40,0.155,402,2.759]],["body/classes/CreateSportDto.html",[3,0.221,4,0.221,5,0.189,7,0.32,10,0.501,15,0.02,17,0.621,19,0.7,25,1.002,39,0.221,40,0.221,47,1.023,52,0.014,53,0.017,54,0.014,157,0.708,200,1.779,261,1.306,327,1.689,329,2.83,335,2.147,348,3.001,350,2.649,379,2.078,402,4.745,403,4.42,404,5.726,405,3.037,406,4.42,407,5.159,408,6.224]],["title/classes/CreateUserDto.html",[40,0.155,409,2.3]],["body/classes/CreateUserDto.html",[3,0.16,4,0.16,5,0.137,7,0.232,10,0.363,14,1.678,15,0.02,17,0.799,19,0.646,21,0.925,29,0.183,39,0.16,40,0.217,47,1.162,52,0.01,53,0.013,54,0.01,157,0.91,167,3.528,168,3.637,173,0.768,186,3.786,188,3.786,190,2.462,192,3.786,200,1.747,261,0.947,327,1.225,335,1.747,341,2.982,348,3.27,350,2.601,352,3.381,357,3.151,358,2.052,359,2.052,360,1.921,409,3.219,410,2.588,411,2.779,412,3.205,413,5.274,414,3.205,415,3.741,416,4.34,417,4.34,418,5.066,419,3.205,420,4.34,421,3.741,422,4.34,423,4.379,424,4.34,425,3.205,426,4.34,427,3.862,428,2.202,429,2.588,430,2.588,431,2.852,432,2.852,433,2.852,434,3.862,435,2.852,436,2.852]],["title/injectables/JwtAuthGuard.html",[34,1.551,102,0.743]],["body/injectables/JwtAuthGuard.html",[3,0.229,4,0.229,5,0.196,7,0.331,15,0.02,19,0.714,23,4.039,29,0.312,33,0.78,34,2.724,39,0.229,40,0.229,52,0.014,53,0.017,54,0.014,102,1.304,103,2.049,116,4.577,117,3.145,333,2.426,437,4.577,438,4.577,439,6.355,440,5.445,441,5.342]],["title/injectables/JwtStrategy.html",[102,0.743,128,2.3]],["body/injectables/JwtStrategy.html",[3,0.182,4,0.182,5,0.156,7,0.264,10,0.414,11,1.549,15,0.02,17,0.665,19,0.729,23,4.267,24,1.195,25,0.585,26,1.136,28,1.195,29,0.318,33,0.622,39,0.182,40,0.183,41,1.982,43,1.195,46,1.549,52,0.011,53,0.015,54,0.011,79,4.21,102,1.133,103,1.635,110,1.809,117,2.509,128,4.119,137,2.948,138,3.651,141,3.651,157,0.585,165,3.555,167,2.338,182,5.553,184,0.972,186,2.509,188,2.509,190,1.827,192,2.509,323,2.948,333,1.935,442,3.651,443,5.752,444,4.262,445,5.523,446,4.262,447,4.731,448,4.262,449,3.249,450,3.651,451,3.651,452,3.651,453,4.262,454,4.262,455,4.262,456,4.262,457,4.262,458,4.262,459,4.262,460,4.262,461,4.262,462,4.262]],["title/injectables/LocalStrategy.html",[102,0.743,129,2.3]],["body/injectables/LocalStrategy.html",[3,0.172,4,0.172,5,0.148,7,0.249,10,0.391,11,1.492,15,0.02,17,0.641,19,0.713,21,0.848,24,1.492,25,0.73,26,1.418,28,1.129,29,0.311,33,0.588,39,0.172,40,0.173,41,1.759,43,1.671,44,1.828,46,1.492,47,1.152,52,0.011,53,0.014,54,0.011,79,4.056,102,1.092,103,1.544,110,1.759,117,2.37,118,3.846,119,3.069,129,4.029,157,0.73,165,2.918,167,3.269,168,3.616,169,2.416,173,0.826,174,1.318,214,2.416,260,1.725,261,1.019,333,1.828,428,3.132,429,3.681,443,5.648,447,4.558,449,4.543,450,3.449,451,3.449,452,3.449,463,3.449,464,4.026,465,4.026,466,5.32,467,4.026,468,4.558,469,3.449,470,5.32,471,4.026,472,4.026]],["title/classes/MyFavorite.html",[40,0.155,363,1.858]],["body/classes/MyFavorite.html",[3,0.186,4,0.186,5,0.159,7,0.269,10,0.421,14,1.564,15,0.02,17,0.744,20,3.466,21,0.719,22,2.394,29,0.274,39,0.239,40,0.24,47,1.136,52,0.012,53,0.015,54,0.012,86,0.843,157,0.848,173,0.89,184,1.488,220,2.143,247,1.086,248,1.281,294,2.031,316,2.246,327,1.42,329,3.064,330,3.288,333,2.537,334,3.389,335,1.926,336,3.857,346,2.868,363,2.868,364,4.671,379,1.736,411,3.064,473,3.306,474,5.586,475,4.337,476,4.337,477,5.586,478,4.337,479,2.756,480,3.716]],["title/controllers/MyFavoritesController.html",[0,0.964,82,2.3]],["body/controllers/MyFavoritesController.html",[0,1.84,2,0.934,3,0.142,4,0.142,5,0.122,7,0.206,10,0.323,11,1.311,14,1.367,15,0.02,17,0.65,19,0.525,20,1.709,21,0.601,24,1.515,25,0.741,26,1.439,27,3.287,28,1.515,29,0.265,30,1.605,31,2.254,33,0.486,34,1.427,35,1.709,36,1.709,39,0.142,40,0.143,41,0.983,43,1.643,44,1.511,45,1.709,46,1.843,48,2.773,52,0.009,53,0.012,54,0.009,82,2.97,107,1.709,109,2.874,110,2.012,115,1.826,173,0.683,174,1.768,208,1.959,212,3.284,213,3.284,214,2.905,230,2.115,247,0.909,264,2.751,306,2.247,364,3.233,481,2.851,482,5.857,483,4.004,484,4.004,485,4.673,486,3.328,487,3.328,488,2.563,489,4.465,490,3.328,491,2.537,492,3.328,493,3.328,494,3.328,495,4.004,496,4.004,497,2.537,498,3.632,499,2.851,500,3.328,501,3.328,502,4.876,503,3.328,504,3.328,505,5.401,506,4.673,507,3.328,508,3.233,509,3.328,510,3.328]],["title/modules/MyFavoritesModule.html",[55,1.015,69,2.3]],["body/modules/MyFavoritesModule.html",[2,1.634,3,0.198,4,0.198,5,0.17,7,0.287,15,0.02,25,0.636,29,0.338,33,0.676,39,0.198,40,0.199,52,0.012,53,0.015,54,0.012,55,1.932,57,1.878,58,1.878,59,2.105,60,2.105,61,1.878,62,2.894,63,2.894,69,4.536,75,2.646,76,1.778,77,2.105,82,4.05,85,2.38,86,0.901,247,1.133,294,1.685,363,2.38,479,3.703,498,4.365,499,3.971,511,3.971,512,3.971,513,3.971,514,4.635,515,4.635,516,3.206,517,3.533,518,3.971]],["title/injectables/MyFavoritesService.html",[102,0.743,498,2.131]],["body/injectables/MyFavoritesService.html",[3,0.146,4,0.146,5,0.126,7,0.212,10,0.332,11,1.336,15,0.02,17,0.714,19,0.759,20,3.043,21,0.763,24,1.663,25,0.813,26,1.579,28,1.537,29,0.306,33,0.499,39,0.146,40,0.147,41,1.75,43,1.81,46,1.81,47,1.088,52,0.009,53,0.013,54,0.009,86,0.665,102,0.978,103,1.313,110,2.025,147,3.256,148,3.296,149,3.028,150,2.297,157,0.654,172,1.466,173,0.978,174,1.794,184,1.087,220,1.828,244,1.466,246,1.554,247,1.35,248,1.407,262,1.386,306,1.828,316,2.155,361,2.367,363,1.757,483,4.081,484,4.081,488,2.613,489,4.519,495,5.078,496,5.078,498,3.489,516,2.367,519,2.931,520,4.764,521,3.421,522,3.421,523,4.696,524,3.421,525,5.481,526,3.421,527,4.764,528,3.421,529,3.421,530,3.421,531,3.421,532,2.931,533,3.421,534,3.421,535,3.421,536,4.764,537,3.421,538,3.421,539,3.421,540,3.421,541,2.014]],["title/classes/MySport.html",[40,0.155,370,1.858]],["body/classes/MySport.html",[3,0.183,4,0.183,5,0.157,7,0.265,10,0.415,14,1.554,15,0.02,17,0.739,19,0.623,20,3.599,21,0.713,22,2.783,29,0.272,39,0.237,40,0.238,47,1.132,52,0.011,53,0.015,54,0.011,86,0.832,157,0.842,173,0.878,184,1.481,247,1.262,248,1.264,294,2.014,316,2.232,327,1.401,329,3.038,330,3.26,333,2.515,334,3.368,335,1.91,336,3.845,346,2.843,370,2.843,379,1.721,405,3.26,411,3.038,542,3.263,543,5.538,544,5.538,545,4.247,546,4.28,547,4.28,548,4.28,549,2.72,550,3.667]],["title/controllers/MySportsController.html",[0,0.964,81,2.3]],["body/controllers/MySportsController.html",[0,1.819,2,0.94,3,0.143,4,0.143,5,0.123,7,0.208,10,0.325,11,1.317,14,1.372,15,0.02,17,0.653,19,0.528,21,0.604,24,1.52,25,0.744,26,1.444,27,3.292,28,1.52,29,0.288,30,1.616,31,2.264,33,0.685,34,1.436,35,1.72,36,1.72,39,0.143,40,0.144,43,1.52,44,1.522,45,1.72,46,1.798,48,2.783,52,0.009,53,0.012,54,0.009,81,2.984,107,1.72,109,2.748,110,2.015,115,1.838,173,0.688,174,1.774,184,0.765,208,1.973,212,3.016,213,3.016,214,2.668,220,1.801,230,2.13,240,1.838,247,1.246,250,2.013,251,1.436,252,1.72,260,1.436,261,0.848,262,1.358,264,2.764,265,1.522,306,2.254,379,1.826,488,2.576,491,2.555,497,2.555,502,4.887,508,2.318,545,2.318,551,2.871,552,6.826,553,4.023,554,4.023,555,4.023,556,3.351,557,3.351,558,3.351,559,3.351,560,3.351,561,3.351,562,3.191,563,2.871,564,3.351,565,3.351,566,3.351,567,3.351,568,4.696,569,3.351,570,3.351,571,2.871,572,3.351]],["title/modules/MySportsModule.html",[55,1.015,70,2.3]],["body/modules/MySportsModule.html",[2,1.61,3,0.194,4,0.194,5,0.166,7,0.28,15,0.02,19,0.645,25,0.621,29,0.335,33,0.661,39,0.194,40,0.194,52,0.012,53,0.015,54,0.012,55,1.919,57,1.835,58,1.835,59,2.056,60,2.056,61,1.835,62,2.863,63,2.863,70,4.512,75,2.607,76,1.737,77,2.056,81,4.006,85,2.325,86,0.88,198,3.149,247,1.116,294,1.646,370,2.325,468,4.918,517,3.452,549,3.649,562,4.351,563,3.879,573,3.879,574,3.879,575,3.879,576,4.528,577,5.741,578,5.741,579,4.528,580,3.132,581,3.879]],["title/injectables/MySportsService.html",[102,0.743,562,2.131]],["body/injectables/MySportsService.html",[3,0.146,4,0.146,5,0.126,7,0.295,10,0.332,11,1.336,15,0.02,17,0.714,19,0.759,20,1.757,21,0.613,24,1.663,25,0.813,26,1.579,28,1.537,29,0.306,33,0.499,39,0.146,40,0.147,41,1.75,43,1.748,46,1.81,47,0.974,52,0.009,53,0.013,54,0.009,86,0.665,102,0.978,103,1.313,110,2.025,147,3.256,149,3.028,157,0.469,172,1.466,173,0.978,174,1.794,184,1.087,198,2.613,220,1.828,244,1.466,246,1.554,247,1.377,248,1.407,262,1.386,306,1.828,316,2.155,368,2.174,370,1.757,379,1.843,405,2.804,488,2.613,489,4.519,541,2.014,545,4.464,553,4.081,554,4.081,555,4.081,562,3.489,580,2.367,582,2.931,583,3.421,584,3.421,585,4.696,586,4.764,587,3.421,588,5.928,589,4.764,590,3.421,591,4.764,592,4.764,593,3.421,594,2.931,595,2.931,596,4.764,597,3.421,598,4.764,599,3.421,600,3.421,601,3.421,602,3.421,603,2.931]],["title/classes/News.html",[40,0.155,263,1.745]],["body/classes/News.html",[3,0.164,4,0.164,5,0.141,7,0.238,10,0.372,14,1.691,15,0.02,17,0.805,21,0.749,25,0.853,29,0.285,39,0.221,40,0.221,47,1.14,52,0.01,53,0.014,54,0.01,86,0.746,157,0.916,173,0.787,248,1.133,263,3.479,291,1.395,294,1.873,320,2.987,327,1.256,329,2.826,330,3.033,333,2.34,334,3.191,335,1.777,336,3.982,339,3.661,340,3.033,346,2.645,376,4.025,377,4.488,378,4.984,379,2.017,380,4.488,385,2.826,604,2.925,605,3.836,606,3.836,607,6.219,608,3.836,609,3.836,610,3.836,611,3.836,612,2.654,613,3.287]],["title/controllers/NewsController.html",[0,0.964,96,2.3]],["body/controllers/NewsController.html",[0,1.773,2,0.628,3,0.096,4,0.096,5,0.082,7,0.139,10,0.217,11,0.977,14,1.401,15,0.02,17,0.667,19,0.392,21,0.288,24,1.466,25,0.717,26,1.393,27,2.669,28,1.553,29,0.301,30,1.681,31,1.681,33,0.509,34,0.96,35,1.15,36,1.15,39,0.096,40,0.096,41,0.661,43,1.676,44,1.017,45,1.789,46,1.82,47,1.094,48,2.196,51,1.708,52,0.006,53,0.009,54,0.006,80,2.514,86,0.436,96,2.215,107,1.15,109,2.561,110,2.033,115,1.229,153,2.192,157,0.717,169,2.849,170,1.55,172,1.494,173,0.99,174,1.58,184,1.518,190,2.373,200,1.202,202,2.478,206,1.708,208,1.319,210,2.986,212,2.842,213,2.842,214,2.787,220,1.851,225,3.259,226,2.411,240,3.277,241,1.919,244,0.96,246,1.017,247,0.832,248,0.661,250,2.477,251,0.96,252,1.15,256,1.708,260,2.373,261,1.401,262,2.243,263,3.411,264,2.518,265,1.942,267,2.959,268,2.959,269,2.959,300,2.647,303,3.518,306,1.851,374,3.797,377,1.55,379,1.33,380,1.55,388,1.319,614,1.919,615,2.986,616,2.986,617,3.679,618,2.24,619,1.919,620,1.708,621,2.24,622,2.24,623,1.919,624,1.708,625,2.24,626,1.919,627,2.24,628,2.24,629,2.24,630,2.24,631,2.24,632,1.919,633,1.919,634,1.708,635,2.24,636,1.919,637,2.24,638,1.708,639,1.919,640,1.919,641,1.919,642,2.24,643,2.24,644,2.24,645,2.24,646,2.24,647,2.24,648,2.24,649,2.24,650,1.708,651,1.919,652,2.986,653,2.24,654,2.24,655,2.24,656,2.24]],["title/modules/NewsModule.html",[55,1.015,71,2.3]],["body/modules/NewsModule.html",[2,1.582,3,0.189,4,0.189,5,0.162,15,0.02,21,0.567,25,0.774,29,0.346,33,0.643,39,0.189,40,0.189,52,0.012,53,0.015,54,0.012,55,1.746,57,1.785,58,1.785,59,2.001,60,2.001,61,1.785,62,2.827,63,2.827,71,4.587,74,3.347,75,2.562,76,1.69,77,2.001,83,3.321,85,2.262,86,0.857,87,2.8,96,3.956,263,2.124,290,3.095,291,1.602,292,3.903,294,2.051,295,3.048,300,4.039,612,3.903,632,3.774,634,3.358,657,3.774,658,4.406,659,3.774,660,3.774,661,4.406,662,4.406,663,4.406]],["title/injectables/NewsService.html",[102,0.743,300,1.985]],["body/injectables/NewsService.html",[3,0.104,4,0.104,5,0.089,7,0.279,10,0.236,11,1.041,15,0.02,17,0.717,19,0.744,21,0.736,24,1.605,25,0.785,26,1.524,28,1.721,29,0.292,33,0.542,39,0.104,40,0.104,41,1.33,43,1.414,46,1.605,47,0.61,52,0.012,53,0.01,54,0.006,80,2.045,86,0.473,102,0.762,103,0.933,109,2.452,110,2.033,147,3.19,150,1.79,157,0.509,169,2.913,172,1.591,173,0.924,174,2.058,180,2.186,184,1.435,198,2.037,199,2.569,200,1.738,202,2.587,212,2.937,213,2.937,214,2.598,220,1.933,221,2.042,225,2.967,226,2.569,228,2.764,240,2.47,244,1.042,246,1.104,247,1.193,248,1.096,250,1.93,251,1.042,260,1.591,261,1.14,262,1.825,263,3.385,265,1.686,291,0.884,298,3.115,300,3.138,301,3.181,303,3.203,306,1.424,315,1.854,316,0.884,319,2.084,320,1.249,321,2.084,374,3.996,376,1.683,377,1.683,379,1.687,380,1.683,541,2.186,615,3.181,616,3.181,617,3.842,623,2.084,626,2.084,633,2.084,634,1.854,636,3.181,639,2.084,640,2.084,641,2.084,664,2.084,665,3.181,666,2.432,667,2.432,668,2.432,669,3.181,670,2.432,671,2.432,672,2.432,673,2.432,674,3.713,675,2.432,676,2.432,677,2.432,678,2.432,679,2.432,680,3.713,681,3.713,682,3.713,683,2.432,684,5.721,685,4.65,686,2.432,687,5.04,688,2.432,689,2.432,690,2.432,691,2.432,692,2.432,693,2.432,694,2.432,695,2.432,696,2.432,697,2.432,698,2.432,699,2.084]],["title/classes/Pronostic.html",[40,0.155,221,1.467]],["body/classes/Pronostic.html",[3,0.146,4,0.146,5,0.126,7,0.212,10,0.332,14,1.709,15,0.02,17,0.813,19,0.536,21,0.802,22,2.766,25,0.885,26,1.269,29,0.269,39,0.204,40,0.205,47,1.164,52,0.009,53,0.013,54,0.009,86,0.665,157,0.963,173,0.702,184,1.352,211,3.008,221,2.402,228,2.613,247,0.926,248,1.01,291,1.244,294,1.732,316,1.993,320,2.814,322,3.484,327,1.12,329,2.613,330,2.804,331,4.081,332,4.081,333,2.164,334,3.007,335,1.643,336,3.998,339,2.804,340,2.804,341,3.489,343,3.632,346,2.446,376,3.296,379,1.481,390,4.696,391,3.792,392,3.792,397,3.632,401,4.081,700,2.608,701,3.421,702,3.421,703,4.764,704,3.421,705,3.421,706,3.421,707,3.632,708,3.421,709,3.421,710,3.421,711,2.367,712,2.931]],["title/controllers/PronosticsController.html",[0,0.964,713,2.504]],["body/controllers/PronosticsController.html",[0,1.787,2,0.544,3,0.083,4,0.083,5,0.071,7,0.12,10,0.188,11,0.872,14,1.383,15,0.02,17,0.658,19,0.639,21,0.4,24,1.533,25,0.75,26,1.514,27,2.739,28,1.533,29,0.287,30,1.499,31,1.499,33,0.454,34,0.831,35,0.995,36,0.995,39,0.083,40,0.083,41,0.572,43,1.593,44,0.881,45,1.596,46,1.829,47,1.119,48,2.671,52,0.005,53,0.008,54,0.005,76,1.193,80,1.412,86,0.377,107,0.995,109,2.761,110,2.022,115,1.064,153,2.022,157,0.779,165,1.705,169,2.841,170,1.341,172,1.333,173,1,174,1.703,180,1.141,184,1.247,190,2.577,200,1.536,202,1.596,204,2.693,205,2.151,206,1.478,208,1.141,211,2.343,212,3.212,213,3.212,214,2.961,219,2.37,220,1.996,221,2.436,225,2.621,226,2.151,230,1.232,236,2.151,237,1.661,240,2.135,244,0.831,246,0.881,247,0.757,248,0.572,250,2.23,251,0.831,252,0.995,256,1.478,260,2.089,261,1.383,262,1.975,264,1.83,265,1.412,267,2.693,268,2.693,269,2.693,274,3.395,280,1.661,306,1.87,309,1.478,311,4.33,316,1.772,385,1.705,388,3.539,391,4.054,392,1.341,428,1.83,508,2.151,620,1.478,638,2.37,650,1.478,707,3.395,713,2.151,714,1.661,715,5.151,716,2.37,717,2.664,718,1.939,719,3.109,720,3.109,721,1.939,722,1.939,723,1.661,724,1.939,725,1.939,726,3.334,727,3.109,728,1.939,729,1.939,730,1.939,731,1.939,732,1.939,733,1.939,734,1.939,735,1.939,736,2.621,737,1.661,738,1.661,739,1.478,740,1.939,741,1.939,742,1.661,743,2.664,744,1.661,745,2.664,746,1.939,747,1.661,748,1.939,749,1.939,750,1.939,751,3.109,752,1.661,753,1.939,754,1.939,755,1.939,756,1.939,757,1.939,758,3.892,759,1.939,760,1.939,761,1.939,762,1.939,763,1.939,764,1.939,765,1.939,766,1.939]],["title/modules/PronosticsModule.html",[55,1.015,72,2.3]],["body/modules/PronosticsModule.html",[2,1.58,3,0.188,4,0.188,5,0.161,15,0.02,21,0.566,25,0.773,29,0.346,33,0.642,39,0.188,40,0.189,52,0.012,53,0.015,54,0.012,55,1.744,57,1.781,58,1.781,59,1.996,60,1.996,61,1.781,62,2.824,63,2.824,72,4.585,74,3.345,75,2.558,76,1.686,77,1.996,83,3.316,85,2.257,86,0.855,87,2.794,221,1.781,290,3.09,291,1.598,292,3.898,294,2.048,295,3.041,711,3.898,713,4.301,736,4.333,737,3.766,739,3.351,767,3.766,768,3.766,769,3.766,770,4.396,771,4.396,772,4.396,773,4.396]],["title/injectables/PronosticsService.html",[102,0.743,736,2.131]],["body/injectables/PronosticsService.html",[3,0.087,4,0.087,5,0.075,7,0.329,10,0.197,11,0.906,15,0.02,17,0.717,19,0.755,21,0.517,24,1.621,25,0.793,26,1.54,28,1.67,29,0.273,33,0.471,39,0.087,40,0.087,41,1.186,43,1.562,46,1.803,47,1.071,52,0.011,53,0.009,54,0.005,76,1.239,80,1.467,86,0.395,102,0.663,103,0.78,109,2.824,110,2.06,147,3.238,150,1.557,157,0.685,165,1.771,169,2.703,172,1.384,173,1.09,174,1.823,180,1.197,184,1.392,190,1.961,198,1.771,199,2.234,200,1.578,202,2.349,204,2.234,205,2.234,211,2.387,212,3.382,213,3.382,214,2.992,219,2.462,220,2.137,221,2.827,225,2.693,228,1.115,236,2.234,244,0.872,246,0.923,247,1.124,248,0.954,250,1.384,251,0.872,260,0.872,261,0.817,262,1.309,265,0.923,274,1.55,291,0.739,298,2.779,306,0.78,309,2.462,311,4.05,315,1.55,316,2.101,322,1.292,323,3.165,385,1.771,388,3.729,391,3.998,392,1.407,541,1.901,638,2.462,665,2.767,669,1.742,707,2.462,715,4.276,717,2.767,726,1.742,736,3.128,738,1.742,739,1.55,743,2.767,744,2.767,745,2.767,747,1.742,774,1.742,775,3.229,776,3.229,777,2.033,778,2.033,779,3.229,780,2.033,781,2.033,782,2.033,783,2.033,784,2.033,785,2.033,786,3.229,787,2.033,788,3.229,789,2.033,790,3.229,791,2.033,792,2.033,793,2.033,794,2.033,795,4.575,796,2.033,797,2.033,798,2.033,799,2.033,800,2.033,801,2.033,802,4.575,803,2.033,804,2.033,805,3.229,806,4.575,807,4.575,808,4.017]],["title/classes/Sport.html",[40,0.155,379,1.125]],["body/classes/Sport.html",[3,0.206,4,0.206,5,0.176,7,0.298,9,3.787,10,0.466,14,1.216,15,0.02,17,0.579,19,0.67,25,0.955,29,0.292,39,0.255,40,0.256,47,0.979,52,0.013,53,0.016,54,0.013,86,0.934,150,2.874,157,0.659,173,0.986,248,1.419,294,2.462,327,1.573,333,2.706,334,3.553,335,2.055,336,3.553,346,3.06,379,2.105,405,3.508,809,3.663,810,5.959,811,4.805,812,3.324,813,4.117]],["title/controllers/SportsController.html",[0,0.964,814,2.504]],["body/controllers/SportsController.html",[0,1.833,2,0.866,3,0.132,4,0.132,5,0.113,7,0.274,10,0.3,11,1.243,14,1.433,15,0.02,17,0.682,19,0.781,22,1.899,24,1.453,25,0.777,26,1.381,27,3.009,28,1.588,29,0.278,30,2.136,31,1.489,32,2.645,33,0.647,34,1.323,35,1.585,36,1.585,39,0.132,40,0.133,41,0.911,43,1.588,44,1.402,45,1.585,46,1.845,47,0.931,48,2.66,52,0.008,53,0.012,54,0.008,80,2.834,107,1.585,109,1.899,110,2.052,156,2.842,157,0.424,173,0.909,174,1.853,184,1.424,208,1.817,220,2.172,247,1.166,250,2.221,251,1.323,252,1.585,260,1.899,261,1.121,262,1.795,264,2.608,265,2.012,306,2.3,379,2.112,404,3.795,405,3.784,488,3.106,491,2.353,502,3.95,571,2.645,624,2.353,814,3.585,815,2.645,816,3.795,817,3.795,818,3.795,819,3.795,820,4.851,821,3.087,822,3.087,823,3.087,824,3.087,825,2.645,826,2.645,827,3.087,828,3.795,829,3.087,830,3.087,831,2.645,832,3.087,833,3.087,834,3.087,835,3.087,836,3.087,837,3.087,838,3.087,839,3.087,840,3.087]],["title/modules/SportsModule.html",[55,1.015,73,2.3]],["body/modules/SportsModule.html",[2,1.661,3,0.204,4,0.204,5,0.175,7,0.295,15,0.02,25,0.653,29,0.34,33,0.695,39,0.204,40,0.204,52,0.013,53,0.016,54,0.013,55,1.947,57,1.928,58,1.928,59,2.161,60,2.161,61,1.928,62,2.929,63,2.161,73,4.498,75,2.69,76,1.826,77,2.161,85,2.443,86,0.925,156,3.882,247,1.152,294,1.73,379,1.479,517,3.628,812,4.098,814,4.462,831,4.077,841,4.077,842,4.077,843,4.759,844,4.759,845,4.077,846,4.759]],["title/injectables/SportsService.html",[102,0.743,156,1.985]],["body/injectables/SportsService.html",[3,0.137,4,0.137,5,0.118,7,0.199,10,0.311,11,1.277,15,0.02,17,0.733,19,0.77,24,1.616,25,0.892,26,1.535,28,1.616,29,0.31,33,0.665,39,0.137,40,0.138,41,1.701,43,1.616,46,1.863,47,0.87,52,0.009,53,0.012,54,0.009,80,2.068,86,0.624,102,0.935,103,1.231,110,2.067,147,3.305,148,3.15,149,2.894,150,2.778,156,3.161,157,0.44,172,1.375,173,1.086,174,1.886,184,1.315,220,2.211,244,1.375,246,1.457,247,1.348,248,1.345,250,1.952,251,1.375,252,1.647,260,1.375,261,0.812,262,1.845,265,1.457,306,1.747,368,2.039,379,2.176,405,2.681,488,2.498,508,2.22,541,1.889,545,2.22,594,2.749,603,2.749,817,3.901,818,3.901,819,3.901,820,4.936,825,3.901,845,2.749,847,2.749,848,3.208,849,3.208,850,5.294,851,4.554,852,3.208,853,4.554,854,3.208,855,3.208,856,3.208,857,3.208,858,3.208,859,3.208,860,3.208,861,3.208,862,3.208,863,4.554,864,3.208,865,3.208,866,3.208]],["title/classes/UpdateUserDto.html",[40,0.155,867,2.3]],["body/classes/UpdateUserDto.html",[3,0.165,4,0.165,5,0.141,7,0.239,10,0.374,14,1.644,15,0.02,17,0.782,19,0.655,21,0.914,29,0.189,39,0.165,40,0.222,47,1.168,52,0.01,53,0.014,54,0.01,157,0.891,167,3.563,168,3.809,173,0.79,186,3.824,188,3.824,192,3.824,261,0.975,327,1.261,335,1.782,350,2.652,357,3.197,358,2.113,359,2.113,360,1.977,385,2.834,410,2.665,411,2.834,412,3.3,413,5.336,414,3.3,419,3.3,420,3.3,422,4.426,423,4.444,424,4.426,425,3.3,426,4.426,427,3.938,428,2.267,429,2.665,430,2.665,431,2.936,432,2.936,433,2.936,434,3.938,435,2.936,436,2.936,867,3.283,868,5.098,869,3.851,870,3.851,871,5.166,872,3.851,873,3.851]],["title/classes/User.html",[21,0.466,40,0.155]],["body/classes/User.html",[3,0.166,4,0.166,5,0.143,7,0.241,10,0.377,14,1.697,15,0.02,17,0.808,21,0.941,29,0.255,39,0.223,40,0.223,47,1.17,52,0.01,53,0.014,54,0.01,86,0.756,157,0.92,167,3.575,168,3.575,173,0.798,186,3.837,188,3.837,190,2.511,192,3.837,248,1.148,290,2.134,294,1.891,327,1.273,329,2.852,330,3.061,333,2.362,334,3.213,335,1.793,336,3.99,341,3.061,346,2.67,411,2.852,416,4.455,417,4.455,874,2.965,875,3.89,876,3.89,877,3.89,878,3.89,879,3.89,880,3.89,881,3.332]],["title/controllers/UsersController.html",[0,0.964,42,2.3]],["body/controllers/UsersController.html",[0,1.794,2,0.578,3,0.088,4,0.088,5,0.076,7,0.202,10,0.2,11,0.916,14,1.417,15,0.02,17,0.674,19,0.75,21,0.879,22,1.399,24,1.57,25,0.768,26,1.492,27,3.218,28,1.57,29,0.275,30,2.423,31,1.954,33,0.476,34,0.883,35,1.058,36,1.058,39,0.088,40,0.088,41,0.609,42,2.576,43,1.753,44,0.936,45,1.058,46,1.833,47,0.92,48,2.744,52,0.005,53,0.009,54,0.005,80,2.637,107,1.058,109,1.399,110,2.043,115,1.131,153,2.282,157,0.632,169,2.427,173,1.149,174,1.957,184,1.426,190,2.625,198,1.791,200,1.126,202,1.676,214,2.282,220,2.228,230,1.31,240,3.584,244,0.883,247,1.236,250,2.489,251,0.883,252,1.058,260,2.4,261,1.417,262,2.269,265,1.483,267,3.476,268,3.476,269,3.476,291,0.749,303,2.93,306,1.927,385,2.529,409,4.241,411,3.071,488,2.529,497,1.571,617,3.514,619,1.766,620,1.571,624,1.571,650,1.571,651,1.766,652,2.797,716,2.489,723,1.766,742,2.797,752,1.766,816,2.797,826,1.766,828,2.797,867,1.31,882,1.766,883,2.797,884,2.797,885,2.061,886,2.061,887,2.061,888,2.061,889,2.061,890,2.061,891,1.766,892,2.061,893,2.061,894,2.061,895,2.061,896,2.061,897,2.061,898,2.061,899,2.061,900,1.766,901,2.797,902,1.766,903,2.061,904,2.061,905,3.264,906,3.264,907,3.264,908,2.061,909,2.061,910,2.061,911,2.061,912,2.061,913,2.061,914,2.061,915,2.061,916,2.061,917,2.061,918,2.061,919,2.061,920,2.061]],["title/modules/UsersModule.html",[55,1.015,74,1.745]],["body/modules/UsersModule.html",[2,1.571,3,0.186,4,0.186,5,0.16,7,0.27,15,0.02,21,0.561,25,0.849,29,0.345,33,0.636,39,0.186,40,0.187,42,3.935,52,0.012,53,0.015,54,0.012,55,1.896,57,1.765,58,1.765,59,1.978,60,1.978,61,1.765,62,2.812,63,2.812,74,3.394,75,2.544,76,1.671,77,1.978,83,2.565,85,2.237,86,0.847,153,3.339,247,1.089,290,3.073,291,1.584,292,4.283,294,2.251,295,3.014,363,2.237,370,2.237,479,3.56,516,3.014,518,3.732,549,3.56,580,3.014,581,3.732,900,3.732,921,3.732,922,3.732,923,3.732,924,4.357,925,4.357]],["title/injectables/UsersService.html",[102,0.743,153,1.644]],["body/injectables/UsersService.html",[3,0.059,4,0.059,5,0.05,7,0.319,10,0.133,11,0.656,15,0.02,17,0.662,19,0.747,21,0.928,24,1.496,25,0.732,26,1.421,28,1.496,29,0.269,33,0.341,39,0.059,40,0.059,41,0.902,43,1.646,46,1.812,47,0.965,52,0.006,53,0.006,54,0.004,86,0.267,102,0.48,103,0.527,110,2.002,147,3.115,148,1.618,149,1.487,150,1.128,153,1.636,157,0.603,161,3.08,167,3.369,168,1.977,169,3.049,171,1.783,172,1.309,173,1.326,174,2.146,180,0.809,184,1.485,186,2.907,188,2.907,190,2.01,192,2.907,200,1.516,202,1.85,220,2.046,228,3.597,240,3.09,244,0.589,246,0.624,247,1.178,248,0.691,250,1.545,251,0.589,252,0.706,260,1.309,261,1.607,262,1.46,265,1.387,291,0.5,298,2.112,303,1.487,306,1.382,323,4.13,341,1.377,363,0.706,370,0.706,385,3.22,409,3.995,411,1.283,427,2.747,428,2.587,516,0.951,523,3.087,532,1.178,541,1.377,580,0.951,585,3.087,595,1.178,685,5.262,699,2.004,716,1.783,867,0.874,883,2.004,884,2.004,891,2.004,901,2.004,902,1.178,926,1.178,927,2.339,928,2.339,929,2.339,930,1.375,931,1.375,932,2.339,933,1.375,934,3.604,935,3.604,936,2.339,937,1.375,938,1.375,939,2.339,940,2.339,941,1.375,942,1.375,943,2.339,944,1.375,945,3.604,946,2.339,947,1.375,948,2.339,949,1.375,950,2.339,951,1.375,952,2.339,953,1.375,954,2.339,955,1.375,956,1.375,957,1.375,958,1.375,959,3.604,960,1.375,961,1.375,962,3.053,963,2.339,964,2.339,965,2.339,966,4.938,967,2.339,968,2.339,969,2.339,970,2.339,971,1.375,972,1.375,973,2.339,974,1.375,975,1.375,976,1.375,977,5.97,978,2.339,979,5.493,980,2.339,981,5.493,982,2.339,983,2.339,984,2.339,985,2.339,986,2.339,987,2.339,988,2.339,989,2.339,990,1.375,991,1.375,992,1.375]],["title/coverage.html",[993,3.776]],["body/coverage.html",[0,1.786,1,2.142,5,0.114,6,2.653,15,0.02,21,0.399,34,1.327,37,1.823,40,0.305,42,1.968,52,0.008,53,0.012,54,0.008,61,1.255,81,1.968,82,1.968,96,1.968,102,1.427,104,2.653,105,2.142,106,2.653,118,1.699,128,1.968,129,1.968,137,2.142,146,2.653,153,1.406,156,1.699,157,0.425,195,2.142,196,2.653,207,1.968,211,1.327,221,1.255,242,1.823,261,0.784,263,1.493,289,2.142,290,1.699,296,2.653,300,1.699,328,3.385,348,3.174,349,2.653,361,2.142,362,2.653,363,1.59,368,1.968,369,2.653,370,1.59,374,1.968,375,2.653,379,0.963,388,1.823,389,2.653,402,2.361,403,2.653,409,1.968,410,3.923,430,3.072,437,2.653,438,2.653,442,2.653,463,2.653,473,3.385,479,1.968,481,2.653,498,1.823,519,2.653,542,3.385,549,1.968,551,2.653,562,1.823,582,2.653,604,3.385,612,2.142,614,2.653,664,2.653,700,3.385,711,2.142,713,2.142,714,2.653,736,1.823,774,2.653,809,3.385,812,2.142,814,2.142,815,2.653,847,2.653,867,1.968,868,3.385,874,3.385,882,2.653,926,2.653,993,2.361,994,3.097,995,3.097,996,3.097,997,7.595,998,6.434,999,5.191,1000,6.003,1001,3.097,1002,5.67,1003,7.016,1004,2.653,1005,6.8,1006,4.44,1007,6.247,1008,5.67,1009,2.653,1010,3.097,1011,3.097,1012,3.097,1013,3.097,1014,3.097]],["title/dependencies.html",[58,1.766,1015,3.016]],["body/dependencies.html",[15,0.02,23,3.076,33,0.707,40,0.257,52,0.013,53,0.016,54,0.013,58,1.962,86,0.941,117,2.85,136,3.69,171,3.69,248,1.429,360,2.485,449,5.176,469,4.147,1016,6.499,1017,4.841,1018,5.986,1019,4.841,1020,4.841,1021,4.841,1022,4.841,1023,4.841,1024,4.841,1025,4.841,1026,4.841,1027,4.841,1028,4.841,1029,4.841,1030,4.841,1031,4.841,1032,4.841,1033,4.841,1034,4.841,1035,4.841,1036,4.841,1037,4.841,1038,4.841,1039,4.841,1040,4.841,1041,4.841,1042,4.841,1043,4.841,1044,4.841,1045,4.841,1046,4.841,1047,4.841,1048,4.841,1049,4.841]],["title/miscellaneous/functions.html",[1050,2.087,1051,3.733]],["body/miscellaneous/functions.html",[9,3.633,10,0.555,15,0.018,52,0.015,53,0.018,54,0.015,61,2.827,1009,4.897,1050,3.955,1051,4.897,1052,5.716,1053,5.716,1054,5.716,1055,5.716]],["title/index.html",[10,0.293,1056,3.016,1057,3.016]],["body/index.html",[7,0.309,9,3.17,15,0.02,52,0.013,53,0.016,54,0.013,397,3.803,406,4.274,993,3.803,1058,6.098,1059,4.989,1060,4.989,1061,4.989,1062,4.989,1063,7.25,1064,4.989,1065,4.989,1066,7.16,1067,4.989,1068,4.989,1069,6.098,1070,4.989,1071,4.989,1072,4.989,1073,4.989,1074,6.098,1075,6.098,1076,4.989,1077,4.989,1078,4.989,1079,4.989,1080,4.989,1081,4.989,1082,4.989,1083,4.989,1084,4.989,1085,4.989,1086,4.989]],["title/modules.html",[57,2.007]],["body/modules.html",[15,0.017,52,0.014,53,0.017,54,0.014,56,3.598,57,2.107,67,3.305,68,3.305,69,3.305,70,3.305,71,3.305,72,3.305,73,3.305,74,2.508,1087,7.424,1088,7.424,1089,7.424,1090,7.424]],["title/overview.html",[1091,4.243]],["body/overview.html",[2,1.024,15,0.02,37,3.339,52,0.01,53,0.013,54,0.01,55,1.024,56,5.131,57,1.479,58,1.479,59,1.658,60,1.658,61,1.479,62,1.658,63,1.658,64,3.128,65,3.128,66,3.128,67,4.513,68,4.282,69,4.184,70,4.184,71,4.359,72,4.359,73,4.053,74,3.392,75,2.263,76,1.401,77,1.658,103,1.401,118,3.111,125,3.128,127,3.128,128,3.605,129,3.605,153,3.06,156,3.111,242,3.339,284,3.128,285,3.128,300,3.696,327,1.195,498,3.966,511,3.128,512,3.128,513,3.128,562,3.966,573,3.128,574,3.128,575,3.128,657,3.128,659,3.128,660,3.128,736,3.966,767,3.128,768,3.128,769,3.128,841,3.128,842,3.128,921,3.128,922,3.128,923,3.128,1091,3.128,1092,4.982,1093,3.651,1094,3.651]],["title/miscellaneous/variables.html",[1050,2.087,1095,3.733]],["body/miscellaneous/variables.html",[10,0.407,15,0.02,19,0.684,23,2.668,40,0.3,52,0.011,53,0.015,54,0.011,137,3.783,140,4.685,157,0.576,161,3.2,168,3,261,1.384,289,3.783,290,3,328,3.2,346,3.582,347,3.596,348,2.024,410,4.458,423,4.169,428,3.219,429,3.783,430,4.458,431,4.169,432,4.169,433,4.169,434,4.912,435,4.169,436,4.169,440,3.596,473,3.2,479,3.475,480,3.596,542,3.2,549,3.475,550,3.596,604,3.2,612,3.783,613,3.596,700,3.2,711,3.783,712,3.596,809,3.2,812,3.783,813,3.596,868,3.2,874,3.2,881,3.596,1004,3.596,1050,2.904,1095,3.596,1096,4.198,1097,4.198,1098,4.198,1099,4.198,1100,4.198,1101,4.198,1102,4.198,1103,4.198,1104,4.198,1105,4.198,1106,7.216,1107,7.216,1108,4.198,1109,4.198]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CommentariesService.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/UsersService.html":{}}}],["0.0.1",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["0.3.1",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["1.0.0",{"_index":1042,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1030,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1003,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":427,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{}}}],["10/10",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":997,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":1093,"title":{},"body":{"overview.html":{}}}],["12/12",{"_index":1012,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":1094,"title":{},"body":{"overview.html":{}}}],["2",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{}}}],["2.0.0",{"_index":1040,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":1002,"title":{},"body":{"coverage.html":{}}}],["3.0.0",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["3000",{"_index":1055,"title":{},"body":{"miscellaneous/functions.html":{}}}],["4.0.0",{"_index":1041,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":998,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":751,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["5.0.0",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["5.10.3",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["6.5.4",{"_index":1049,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["7.0.0",{"_index":1016,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["8.2.0",{"_index":1032,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":1092,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["9])))(?=.{6",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["9]))|((?=.*[a",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["_id",{"_index":975,"title":{},"body":{"injectables/UsersService.html":{}}}],["access",{"_index":214,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{}}}],["access_token",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":199,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/NewsService.html":{},"injectables/PronosticsService.html":{}}}],["actions",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["add",{"_index":488,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{}}}],["addmyfavorite",{"_index":483,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["addmyfavorite(@request",{"_index":504,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["addmyfavorite(req",{"_index":486,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["addmyfavorite(userid",{"_index":524,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["addmyfavorite(userid,favoriteid",{"_index":535,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["addmysport",{"_index":553,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["addmysport(@request",{"_index":567,"title":{},"body":{"controllers/MySportsController.html":{}}}],["addmysport(req",{"_index":556,"title":{},"body":{"controllers/MySportsController.html":{}}}],["addmysport(userid",{"_index":586,"title":{},"body":{"injectables/MySportsService.html":{}}}],["addsport",{"_index":817,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["addsport(@request",{"_index":836,"title":{},"body":{"controllers/SportsController.html":{}}}],["addsport(name",{"_index":851,"title":{},"body":{"injectables/SportsService.html":{}}}],["addsport(req",{"_index":821,"title":{},"body":{"controllers/SportsController.html":{}}}],["admin",{"_index":303,"title":{},"body":{"injectables/CommentariesService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admincreate",{"_index":883,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["admincreate(@request",{"_index":916,"title":{},"body":{"controllers/UsersController.html":{}}}],["admincreate(createuserdto",{"_index":932,"title":{},"body":{"injectables/UsersService.html":{}}}],["admincreate(req",{"_index":885,"title":{},"body":{"controllers/UsersController.html":{}}}],["administrator",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["adminupdate",{"_index":884,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["adminupdate(@request",{"_index":919,"title":{},"body":{"controllers/UsersController.html":{}}}],["adminupdate(id",{"_index":936,"title":{},"body":{"injectables/UsersService.html":{}}}],["adminupdate(req",{"_index":888,"title":{},"body":{"controllers/UsersController.html":{}}}],["already",{"_index":906,"title":{},"body":{"controllers/UsersController.html":{}}}],["api",{"_index":397,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"index.html":{}}}],["apiname",{"_index":726,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["app",{"_index":406,"title":{},"body":{"classes/CreateSportDto.html":{},"index.html":{}}}],["app.controller",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appcontroller,mysportscontroller,myfavoritescontroller",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["application",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/Sport.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["appmodule",{"_index":56,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":37,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["associated",{"_index":332,"title":{},"body":{"classes/Commentary.html":{},"classes/Pronostic.html":{}}}],["async",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["auth.controller",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":438,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["authcontroller",{"_index":105,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":441,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":67,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authmodule,mysportsmodule",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["author",{"_index":376,"title":{},"body":{"classes/CreateNewsDto.html":{},"classes/News.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{}}}],["authorname",{"_index":390,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{}}}],["authservice",{"_index":118,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/MyFavoritesService.html":{},"injectables/NewsService.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["await",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ayadyohannepitechkevin",{"_index":1082,"title":{},"body":{"index.html":{}}}],["back",{"_index":1059,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(body.password",{"_index":987,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(createuserdto.password",{"_index":967,"title":{},"body":{"injectables/UsersService.html":{}}}],["ben",{"_index":1081,"title":{},"body":{"index.html":{}}}],["body",{"_index":240,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["body.content},{new:true,usefindandmodify:false",{"_index":692,"title":{},"body":{"injectables/NewsService.html":{}}}],["body.email",{"_index":985,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.firstname",{"_index":980,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"content",{"_index":690,"title":{},"body":{"injectables/NewsService.html":{}}}],["body.hasownproperty(\"email",{"_index":984,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"firstname",{"_index":978,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"isadmin",{"_index":991,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"lastname",{"_index":982,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"password",{"_index":986,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"phone",{"_index":988,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.hasownproperty(\"sport",{"_index":693,"title":{},"body":{"injectables/NewsService.html":{}}}],["body.hasownproperty(\"title",{"_index":686,"title":{},"body":{"injectables/NewsService.html":{}}}],["body.isadmin",{"_index":992,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.lastname",{"_index":983,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.phone",{"_index":989,"title":{},"body":{"injectables/UsersService.html":{}}}],["body.sport},{new:true,usefindandmodify:false",{"_index":695,"title":{},"body":{"injectables/NewsService.html":{}}}],["body.title},{new:true,usefindandmodify:false",{"_index":689,"title":{},"body":{"injectables/NewsService.html":{}}}],["boolean",{"_index":341,"title":{},"body":{"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateUserDto.html":{},"classes/Pronostic.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["bootstrap",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bridonneau",{"_index":1083,"title":{},"body":{"index.html":{}}}],["browse",{"_index":1090,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1087,"title":{},"body":{"modules.html":{}}}],["catch",{"_index":860,"title":{},"body":{"injectables/SportsService.html":{}}}],["check",{"_index":428,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"controllers/PronosticsController.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":40,"title":{"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/News.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":327,"title":{},"body":{"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/News.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":125,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":126,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":127,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commentariesmodule",{"_index":284,"title":{},"body":{"modules/CommentariesModule.html":{},"overview.html":{}}}],["cluster_commentariesmodule_imports",{"_index":286,"title":{},"body":{"modules/CommentariesModule.html":{}}}],["cluster_commentariesmodule_providers",{"_index":285,"title":{},"body":{"modules/CommentariesModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule",{"_index":511,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule_exports",{"_index":513,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_myfavoritesmodule_providers",{"_index":512,"title":{},"body":{"modules/MyFavoritesModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule",{"_index":573,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule_exports",{"_index":575,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_mysportsmodule_providers",{"_index":574,"title":{},"body":{"modules/MySportsModule.html":{},"overview.html":{}}}],["cluster_newsmodule",{"_index":657,"title":{},"body":{"modules/NewsModule.html":{},"overview.html":{}}}],["cluster_newsmodule_exports",{"_index":660,"title":{},"body":{"modules/NewsModule.html":{},"overview.html":{}}}],["cluster_newsmodule_imports",{"_index":658,"title":{},"body":{"modules/NewsModule.html":{}}}],["cluster_newsmodule_providers",{"_index":659,"title":{},"body":{"modules/NewsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule",{"_index":767,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule_exports",{"_index":768,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_pronosticsmodule_imports",{"_index":770,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["cluster_pronosticsmodule_providers",{"_index":769,"title":{},"body":{"modules/PronosticsModule.html":{},"overview.html":{}}}],["cluster_sportsmodule",{"_index":841,"title":{},"body":{"modules/SportsModule.html":{},"overview.html":{}}}],["cluster_sportsmodule_providers",{"_index":842,"title":{},"body":{"modules/SportsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":921,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":923,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":922,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collect",{"_index":810,"title":{},"body":{"classes/Sport.html":{}}}],["collection",{"_index":329,"title":{},"body":{"classes/Commentary.html":{},"classes/CreateSportDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/News.html":{},"classes/Pronostic.html":{},"classes/User.html":{}}}],["collects",{"_index":330,"title":{},"body":{"classes/Commentary.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/News.html":{},"classes/Pronostic.html":{},"classes/User.html":{}}}],["commentaries",{"_index":197,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{}}}],["commentaries.controller",{"_index":288,"title":{},"body":{"modules/CommentariesModule.html":{}}}],["commentaries.service",{"_index":243,"title":{},"body":{"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{}}}],["commentaries/commentaries.module",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["commentariescontroller",{"_index":195,"title":{"controllers/CommentariesController.html":{}},"body":{"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"coverage.html":{}}}],["commentariesmodule",{"_index":68,"title":{"modules/CommentariesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentariesModule.html":{},"modules.html":{},"overview.html":{}}}],["commentariesservice",{"_index":242,"title":{"injectables/CommentariesService.html":{}},"body":{"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"coverage.html":{},"overview.html":{}}}],["commentary",{"_index":211,"title":{"classes/Commentary.html":{}},"body":{"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"coverage.html":{}}}],["commentary.dto",{"_index":245,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{}}}],["commentary.dto.ts",{"_index":349,"title":{},"body":{"classes/CreateCommentaryDto.html":{},"coverage.html":{}}}],["commentary.dto.ts:13",{"_index":351,"title":{},"body":{"classes/CreateCommentaryDto.html":{}}}],["commentary.dto.ts:18",{"_index":355,"title":{},"body":{"classes/CreateCommentaryDto.html":{}}}],["commentary.dto.ts:24",{"_index":356,"title":{},"body":{"classes/CreateCommentaryDto.html":{}}}],["commentary.dto.ts:30",{"_index":353,"title":{},"body":{"classes/CreateCommentaryDto.html":{}}}],["commentary.dto.ts:36",{"_index":354,"title":{},"body":{"classes/CreateCommentaryDto.html":{}}}],["commentary.name",{"_index":293,"title":{},"body":{"modules/CommentariesModule.html":{}}}],["commentaryid",{"_index":216,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{}}}],["commentarymodel",{"_index":254,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{}}}],["commentaryschema",{"_index":289,"title":{},"body":{"modules/CommentariesModule.html":{},"classes/Commentary.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["connected",{"_index":213,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["const",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constants",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["constructor",{"_index":41,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(commentary.name",{"_index":314,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["constructor(@injectmodel(news.name",{"_index":676,"title":{},"body":{"injectables/NewsService.html":{}}}],["constructor(@injectmodel(pronostic.name",{"_index":792,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":958,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":464,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(commentarymodel",{"_index":297,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["constructor(myfavoritemodel",{"_index":521,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["constructor(mysportmodel",{"_index":583,"title":{},"body":{"injectables/MySportsService.html":{}}}],["constructor(newsmodel",{"_index":666,"title":{},"body":{"injectables/NewsService.html":{}}}],["constructor(private",{"_index":44,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentariesController.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["constructor(pronosticmodel",{"_index":777,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["constructor(sportmodel",{"_index":848,"title":{},"body":{"injectables/SportsService.html":{}}}],["constructor(usermodel",{"_index":930,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["content",{"_index":377,"title":{},"body":{"classes/CreateNewsDto.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('commentaries",{"_index":253,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["controller('myfavorites",{"_index":500,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["controller('mysports",{"_index":564,"title":{},"body":{"controllers/MySportsController.html":{}}}],["controller('news",{"_index":635,"title":{},"body":{"controllers/NewsController.html":{}}}],["controller('pronostics",{"_index":740,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["controller('sports",{"_index":832,"title":{},"body":{"controllers/SportsController.html":{}}}],["controller('users",{"_index":903,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["corresponds",{"_index":477,"title":{},"body":{"classes/MyFavorite.html":{}}}],["coverage",{"_index":993,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":200,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":904,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(@request",{"_index":256,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{}}}],["create(createuserdto",{"_index":891,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(req",{"_index":206,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{}}}],["create(user",{"_index":301,"title":{},"body":{"injectables/CommentariesService.html":{},"injectables/NewsService.html":{}}}],["create(userid",{"_index":779,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createcommentarydto",{"_index":207,"title":{"classes/CreateCommentaryDto.html":{}},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/CreateCommentaryDto.html":{},"coverage.html":{}}}],["createcommentarydto.commentary",{"_index":257,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{}}}],["createcommentarydto.newsid",{"_index":258,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{}}}],["createdat",{"_index":320,"title":{},"body":{"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/News.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{}}}],["createdat:createpronosticdto.createdat",{"_index":796,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createdcommentary",{"_index":317,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["createdcommentary.save",{"_index":324,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["creatednews",{"_index":677,"title":{},"body":{"injectables/NewsService.html":{}}}],["creatednews.save",{"_index":679,"title":{},"body":{"injectables/NewsService.html":{}}}],["createdpronostic",{"_index":793,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createdpronostic.save",{"_index":797,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createduser",{"_index":968,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser.save",{"_index":970,"title":{},"body":{"injectables/UsersService.html":{}}}],["createmyfavoritedto",{"_index":361,"title":{"classes/CreateMyFavoriteDto.html":{}},"body":{"classes/CreateMyFavoriteDto.html":{},"injectables/MyFavoritesService.html":{},"coverage.html":{}}}],["createmysportdto",{"_index":368,"title":{"classes/CreateMySportDto.html":{}},"body":{"classes/CreateMySportDto.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{},"coverage.html":{}}}],["createnewsdto",{"_index":374,"title":{"classes/CreateNewsDto.html":{}},"body":{"classes/CreateNewsDto.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"coverage.html":{}}}],["createnewsdto.content",{"_index":640,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["createnewsdto.sport",{"_index":641,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["createnewsdto.title",{"_index":639,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["createpronosticdto",{"_index":388,"title":{"classes/CreatePronosticDto.html":{}},"body":{"classes/CreatePronosticDto.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"coverage.html":{}}}],["createpronosticdto.commentary",{"_index":795,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["createpronosticdto.matchid",{"_index":743,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["createpronosticdto.type",{"_index":745,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["createpronosticdto.winnerid",{"_index":744,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["createsportdto",{"_index":402,"title":{"classes/CreateSportDto.html":{}},"body":{"classes/CreateSportDto.html":{},"coverage.html":{}}}],["createuserdto",{"_index":409,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":962,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.firstname",{"_index":963,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.isadmin",{"_index":990,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.lastname",{"_index":964,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto.phone",{"_index":965,"title":{},"body":{"injectables/UsersService.html":{}}}],["creation",{"_index":340,"title":{},"body":{"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/News.html":{},"classes/Pronostic.html":{}}}],["creator",{"_index":210,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/NewsController.html":{}}}],["credentials",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["current",{"_index":496,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["data",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{}}}],["database",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{}}}],["datas",{"_index":596,"title":{},"body":{"injectables/MySportsService.html":{}}}],["date",{"_index":339,"title":{},"body":{"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/News.html":{},"classes/Pronostic.html":{}}}],["date.now",{"_index":321,"title":{},"body":{"injectables/CommentariesService.html":{},"injectables/NewsService.html":{}}}],["date.now()},{new:true,usefindandmodify:false",{"_index":698,"title":{},"body":{"injectables/NewsService.html":{}}}],["days",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["declarations",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentariesController.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":1106,"title":{},"body":{"miscellaneous/variables.html":{}}}],["define",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["defined",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":306,"title":{},"body":{"injectables/CommentariesService.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':commentaryid/delete",{"_index":275,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["delete(':id",{"_index":650,"title":{},"body":{"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["delete(@param('id",{"_index":754,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["delete(@request",{"_index":651,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UsersController.html":{}}}],["delete(id",{"_index":721,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["delete(req",{"_index":619,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UsersController.html":{}}}],["delete,patch",{"_index":241,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/NewsController.html":{}}}],["delete,post,request",{"_index":830,"title":{},"body":{"controllers/SportsController.html":{}}}],["deletecommentary",{"_index":201,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{}}}],["deletecommentary(@request",{"_index":276,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["deletecommentary(commentaryid",{"_index":304,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["deletecommentary(req",{"_index":215,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["deleted",{"_index":541,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/NewsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["deleteone",{"_index":665,"title":{},"body":{"injectables/NewsService.html":{},"injectables/PronosticsService.html":{}}}],["deleteone(id",{"_index":669,"title":{},"body":{"injectables/NewsService.html":{},"injectables/PronosticsService.html":{}}}],["deleteuser",{"_index":927,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(id",{"_index":940,"title":{},"body":{"injectables/UsersService.html":{}}}],["delmyfavorite",{"_index":484,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["delmyfavorite(@request",{"_index":509,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["delmyfavorite(id",{"_index":527,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["delmyfavorite(req",{"_index":490,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["delmysport",{"_index":554,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["delmysport(@request",{"_index":570,"title":{},"body":{"controllers/MySportsController.html":{}}}],["delmysport(req",{"_index":558,"title":{},"body":{"controllers/MySportsController.html":{}}}],["delmysport(sportid",{"_index":589,"title":{},"body":{"injectables/MySportsService.html":{}}}],["delsport",{"_index":818,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["delsport(@request",{"_index":839,"title":{},"body":{"controllers/SportsController.html":{}}}],["delsport(req",{"_index":823,"title":{},"body":{"controllers/SportsController.html":{}}}],["delsport(sportid",{"_index":853,"title":{},"body":{"injectables/SportsService.html":{}}}],["dependencies",{"_index":58,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["details",{"_index":828,"title":{},"body":{"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["development",{"_index":1065,"title":{},"body":{"index.html":{}}}],["display",{"_index":404,"title":{},"body":{"classes/CreateSportDto.html":{},"controllers/SportsController.html":{}}}],["document",{"_index":334,"title":{},"body":{"classes/Commentary.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/News.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["documentation",{"_index":994,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":719,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["dotenv",{"_index":1031,"title":{},"body":{"dependencies.html":{}}}],["doucanefgacem",{"_index":1080,"title":{},"body":{"index.html":{}}}],["dto",{"_index":350,"title":{},"body":{"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["dto/create",{"_index":244,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":902,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":1076,"title":{},"body":{"index.html":{}}}],["elements",{"_index":468,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/MySportsModule.html":{}}}],["email",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["end",{"_index":1060,"title":{},"body":{"index.html":{}}}],["error",{"_index":508,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"injectables/SportsService.html":{}}}],["exec",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["exist",{"_index":907,"title":{},"body":{"controllers/UsersController.html":{}}}],["exists",{"_index":954,"title":{},"body":{"injectables/UsersService.html":{}}}],["expiresin",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":333,"title":{},"body":{"classes/Commentary.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/News.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["extractjwt",{"_index":448,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":454,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":323,"title":{},"body":{"injectables/CommentariesService.html":{},"injectables/JwtStrategy.html":{},"injectables/PronosticsService.html":{},"injectables/UsersService.html":{}}}],["favorite",{"_index":489,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{}}}],["favoriteid",{"_index":525,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["favorites",{"_index":495,"title":{},"body":{"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{}}}],["field",{"_index":219,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":945,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":202,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall(@param('newsid",{"_index":272,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["findall(@request",{"_index":752,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["findall(newsid",{"_index":222,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{}}}],["findall(req",{"_index":723,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["findallreported",{"_index":203,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{}}}],["findallreported(@request",{"_index":266,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["findallreported(req",{"_index":229,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["findbyid",{"_index":615,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["findbyid(@param('id",{"_index":648,"title":{},"body":{"controllers/NewsController.html":{}}}],["findbyid(id",{"_index":623,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["findbysport",{"_index":616,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["findbysport(@param('sport",{"_index":645,"title":{},"body":{"controllers/NewsController.html":{}}}],["findbysport(sport",{"_index":626,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["findone",{"_index":716,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('matchid",{"_index":764,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["findone(@request",{"_index":910,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(email",{"_index":943,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(matchid",{"_index":725,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["findone(req",{"_index":895,"title":{},"body":{"controllers/UsersController.html":{}}}],["findpronosticforonematchid",{"_index":775,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["findpronosticforonematchid(apiname",{"_index":783,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["findpronosticforonematchid(apiname:string",{"_index":799,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["finduserbyid",{"_index":928,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyid(id",{"_index":946,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["followed",{"_index":543,"title":{},"body":{"classes/MySport.html":{}}}],["fs",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["function",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1051,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funsport",{"_index":1058,"title":{},"body":{"index.html":{}}}],["general",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["get(\"/filter/:sport",{"_index":644,"title":{},"body":{"controllers/NewsController.html":{}}}],["get(\":id",{"_index":647,"title":{},"body":{"controllers/NewsController.html":{}}}],["get(\":newsid",{"_index":271,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["get('/filter/:sport",{"_index":627,"title":{},"body":{"controllers/NewsController.html":{}}}],["get(':apiname/:matchid",{"_index":727,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["get(':commentaryid/report",{"_index":282,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["get(':commentaryid/validate",{"_index":279,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["get(':id",{"_index":624,"title":{},"body":{"controllers/NewsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["get(':newsid",{"_index":223,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["get(':pronosticid/report",{"_index":762,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["get(':pronosticid/reset",{"_index":756,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["get(':pronosticid/validate",{"_index":760,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["get('profile",{"_index":49,"title":{},"body":{"controllers/AppController.html":{}}}],["getmyfavorite",{"_index":485,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorite(@request",{"_index":501,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorite(req",{"_index":493,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["getmyfavorites",{"_index":520,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmyfavorites(userid",{"_index":529,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmyfavorites(userid:string",{"_index":533,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["getmysports",{"_index":555,"title":{},"body":{"controllers/MySportsController.html":{},"injectables/MySportsService.html":{}}}],["getmysports(@request",{"_index":565,"title":{},"body":{"controllers/MySportsController.html":{}}}],["getmysports(req",{"_index":560,"title":{},"body":{"controllers/MySportsController.html":{}}}],["getmysports(userid",{"_index":592,"title":{},"body":{"injectables/MySportsService.html":{}}}],["getprofile",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":50,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["getsport",{"_index":819,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getsport(@param('id",{"_index":833,"title":{},"body":{"controllers/SportsController.html":{}}}],["getsport(id",{"_index":825,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getsports",{"_index":820,"title":{},"body":{"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["getting",{"_index":1056,"title":{"index.html":{}},"body":{}}],["give",{"_index":225,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["given",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/Pronostic.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["gnu3",{"_index":1085,"title":{},"body":{"index.html":{}}}],["google",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}],["guard",{"_index":439,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["hashedpassword",{"_index":966,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpcode",{"_index":252,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpexception",{"_index":250,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus",{"_index":251,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":265,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["httpstatus.unauthorized",{"_index":269,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["id",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"injectables/JwtStrategy.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id,{\"content",{"_index":691,"title":{},"body":{"injectables/NewsService.html":{}}}],["id,{\"modifiedat",{"_index":697,"title":{},"body":{"injectables/NewsService.html":{}}}],["id,{\"sport",{"_index":694,"title":{},"body":{"injectables/NewsService.html":{}}}],["id,{\"title",{"_index":688,"title":{},"body":{"injectables/NewsService.html":{}}}],["identifier",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["if(updated",{"_index":696,"title":{},"body":{"injectables/NewsService.html":{}}}],["ignoreexpiration",{"_index":455,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["import",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/UsersModule.html":{}}}],["imports:[mongoosemodule.forfeature",{"_index":517,"title":{},"body":{"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/SportsModule.html":{}}}],["index",{"_index":10,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":102,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CommentariesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/NewsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CommentariesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/NewsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":103,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CommentariesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/NewsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":246,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(commentary.name",{"_index":255,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["injectmodel(myfavorite.name",{"_index":532,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(mysport.name",{"_index":595,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(news.name",{"_index":637,"title":{},"body":{"controllers/NewsController.html":{}}}],["injectmodel(pronostic.name",{"_index":741,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["injectmodel(sport.name",{"_index":857,"title":{},"body":{"injectables/SportsService.html":{}}}],["injectmodel(user.name",{"_index":315,"title":{},"body":{"injectables/CommentariesService.html":{},"injectables/NewsService.html":{},"injectables/PronosticsService.html":{}}}],["installation",{"_index":1062,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1064,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":861,"title":{},"body":{"injectables/SportsService.html":{}}}],["isadmin",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["isadmin(id",{"_index":948,"title":{},"body":{"injectables/UsersService.html":{}}}],["isemail",{"_index":357,"title":{},"body":{"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["iserror",{"_index":956,"title":{},"body":{"injectables/UsersService.html":{}}}],["isnull",{"_index":955,"title":{},"body":{"injectables/UsersService.html":{}}}],["isoptional",{"_index":352,"title":{},"body":{"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{}}}],["isreported",{"_index":322,"title":{},"body":{"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/Pronostic.html":{},"injectables/PronosticsService.html":{}}}],["json",{"_index":682,"title":{},"body":{"injectables/NewsService.html":{}}}],["jwt",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt.strategy",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":34,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/CommentariesController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtconstants",{"_index":137,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconstants.secret",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":453,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":128,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":1109,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lastname",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["launcher",{"_index":1053,"title":{},"body":{"miscellaneous/functions.html":{}}}],["legend",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":1084,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1086,"title":{},"body":{"index.html":{}}}],["list",{"_index":502,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["local",{"_index":469,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":129,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@request",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(user",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["lotfi",{"_index":1079,"title":{},"body":{"index.html":{}}}],["manage",{"_index":198,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"injectables/NewsService.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{}}}],["manageuser",{"_index":935,"title":{},"body":{"injectables/UsersService.html":{}}}],["managing",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MyFavoritesService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["mandatory",{"_index":264,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{}}}],["match",{"_index":707,"title":{},"body":{"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["matches",{"_index":358,"title":{},"body":{"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(passwordregex",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["matches(passwordregex)@validateif(undefined",{"_index":869,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["matchesuseridmatchid",{"_index":746,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["matchesuseridmatchid.length",{"_index":748,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["matchid",{"_index":391,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["matching",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["matchs",{"_index":720,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["message",{"_index":262,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":447,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["methods",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":426,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength",{"_index":359,"title":{},"body":{"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(1",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["minlength(10",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["miscellaneous",{"_index":1050,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1069,"title":{},"body":{"index.html":{}}}],["model",{"_index":247,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["modifiedat",{"_index":378,"title":{},"body":{"classes/CreateNewsDto.html":{},"classes/News.html":{}}}],["module",{"_index":55,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":57,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":248,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"injectables/SportsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":292,"title":{},"body":{"modules/CommentariesModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot('mongodb://localhost/funsport",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["myfavorite",{"_index":363,"title":{"classes/MyFavorite.html":{}},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["myfavorite.dto",{"_index":531,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["myfavorite.dto.ts",{"_index":362,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"coverage.html":{}}}],["myfavorite.dto.ts:14",{"_index":366,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.dto.ts:19",{"_index":365,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.dto.ts:9",{"_index":367,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{}}}],["myfavorite.name",{"_index":518,"title":{},"body":{"modules/MyFavoritesModule.html":{},"modules/UsersModule.html":{}}}],["myfavoritemodel",{"_index":523,"title":{},"body":{"injectables/MyFavoritesService.html":{},"injectables/UsersService.html":{}}}],["myfavorites",{"_index":482,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["myfavorites.controller",{"_index":515,"title":{},"body":{"modules/MyFavoritesModule.html":{}}}],["myfavorites.service",{"_index":499,"title":{},"body":{"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{}}}],["myfavorites/myfavorites.controller",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["myfavorites/myfavorites.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["myfavoriteschema",{"_index":479,"title":{},"body":{"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["myfavoritescontroller",{"_index":82,"title":{"controllers/MyFavoritesController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"coverage.html":{}}}],["myfavoritesmodule",{"_index":69,"title":{"modules/MyFavoritesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MyFavoritesModule.html":{},"modules.html":{},"overview.html":{}}}],["myfavoritesservice",{"_index":498,"title":{"injectables/MyFavoritesService.html":{}},"body":{"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"coverage.html":{},"overview.html":{}}}],["mypronostics/pronostics.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["mysport",{"_index":370,"title":{"classes/MySport.html":{}},"body":{"classes/CreateMySportDto.html":{},"classes/MySport.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["mysport.dto",{"_index":594,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["mysport.dto.ts",{"_index":369,"title":{},"body":{"classes/CreateMySportDto.html":{},"coverage.html":{}}}],["mysport.dto.ts:14",{"_index":372,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.dto.ts:19",{"_index":371,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.dto.ts:9",{"_index":373,"title":{},"body":{"classes/CreateMySportDto.html":{}}}],["mysport.name",{"_index":581,"title":{},"body":{"modules/MySportsModule.html":{},"modules/UsersModule.html":{}}}],["mysportmodel",{"_index":585,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/UsersService.html":{}}}],["mysports",{"_index":552,"title":{},"body":{"controllers/MySportsController.html":{}}}],["mysports.controller",{"_index":579,"title":{},"body":{"modules/MySportsModule.html":{}}}],["mysports.service",{"_index":563,"title":{},"body":{"controllers/MySportsController.html":{},"modules/MySportsModule.html":{}}}],["mysports/mysports.controller",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["mysports/mysports.module",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["mysportschema",{"_index":549,"title":{},"body":{"classes/MySport.html":{},"modules/MySportsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["mysportscontroller",{"_index":81,"title":{"controllers/MySportsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"coverage.html":{}}}],["mysportsmodule",{"_index":70,"title":{"modules/MySportsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MySportsModule.html":{},"modules.html":{},"overview.html":{}}}],["mysportsservice",{"_index":562,"title":{"injectables/MySportsService.html":{}},"body":{"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"coverage.html":{},"overview.html":{}}}],["name",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["necessary",{"_index":577,"title":{},"body":{"modules/MySportsModule.html":{}}}],["need",{"_index":212,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1017,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":136,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":261,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newfavorite",{"_index":536,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["newfavorite.save",{"_index":539,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["newmysport",{"_index":598,"title":{},"body":{"injectables/MySportsService.html":{}}}],["newmysport.save",{"_index":601,"title":{},"body":{"injectables/MySportsService.html":{}}}],["newpronostic",{"_index":802,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.commentary",{"_index":805,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.isreported",{"_index":806,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.save",{"_index":807,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["newpronostic.winnerid",{"_index":804,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["news",{"_index":263,"title":{"classes/News.html":{}},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/CreateNewsDto.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"coverage.html":{}}}],["news.controller",{"_index":662,"title":{},"body":{"modules/NewsModule.html":{}}}],["news.dto",{"_index":633,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["news.dto.ts",{"_index":375,"title":{},"body":{"classes/CreateNewsDto.html":{},"coverage.html":{}}}],["news.dto.ts:12",{"_index":387,"title":{},"body":{"classes/CreateNewsDto.html":{}}}],["news.dto.ts:17",{"_index":382,"title":{},"body":{"classes/CreateNewsDto.html":{}}}],["news.dto.ts:22",{"_index":386,"title":{},"body":{"classes/CreateNewsDto.html":{}}}],["news.dto.ts:28",{"_index":381,"title":{},"body":{"classes/CreateNewsDto.html":{}}}],["news.dto.ts:34",{"_index":383,"title":{},"body":{"classes/CreateNewsDto.html":{}}}],["news.dto.ts:40",{"_index":384,"title":{},"body":{"classes/CreateNewsDto.html":{}}}],["news.name",{"_index":663,"title":{},"body":{"modules/NewsModule.html":{}}}],["news.service",{"_index":632,"title":{},"body":{"controllers/NewsController.html":{},"modules/NewsModule.html":{}}}],["news/news.controller",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["news/news.module",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["newscontroller",{"_index":96,"title":{"controllers/NewsController.html":{}},"body":{"modules/AppModule.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"coverage.html":{}}}],["newsid",{"_index":227,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{}}}],["newsmodel",{"_index":636,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["newsmodule",{"_index":71,"title":{"modules/NewsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/NewsModule.html":{},"modules.html":{},"overview.html":{}}}],["newsport",{"_index":863,"title":{},"body":{"injectables/SportsService.html":{}}}],["newsport.save",{"_index":865,"title":{},"body":{"injectables/SportsService.html":{}}}],["newsschema",{"_index":612,"title":{},"body":{"classes/News.html":{},"modules/NewsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newsservice",{"_index":300,"title":{"injectables/NewsService.html":{}},"body":{"injectables/CommentariesService.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"coverage.html":{},"overview.html":{}}}],["newsupdated",{"_index":684,"title":{},"body":{"injectables/NewsService.html":{}}}],["nothing",{"_index":699,"title":{},"body":{"injectables/NewsService.html":{},"injectables/UsersService.html":{}}}],["npm",{"_index":1063,"title":{},"body":{"index.html":{}}}],["null",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":607,"title":{},"body":{"classes/News.html":{}}}],["oauth20",{"_index":1039,"title":{},"body":{"dependencies.html":{}}}],["object",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["ok",{"_index":603,"title":{},"body":{"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["one",{"_index":226,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{}}}],["optional",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionnal",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["out",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":1091,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":872,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["p.password",{"_index":873,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["package",{"_index":1015,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":43,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('apiname",{"_index":765,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["param('commentaryid",{"_index":277,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["param('id",{"_index":652,"title":{},"body":{"controllers/NewsController.html":{},"controllers/UsersController.html":{}}}],["param('pronosticid",{"_index":758,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["parameters",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":1029,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":449,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":450,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":451,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passverify",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["password",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["passwordregex",{"_index":430,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":617,"title":{},"body":{"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":654,"title":{},"body":{"controllers/NewsController.html":{}}}],["patch('admin/updateuser",{"_index":918,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(@request",{"_index":655,"title":{},"body":{"controllers/NewsController.html":{}}}],["patch(id",{"_index":674,"title":{},"body":{"injectables/NewsService.html":{}}}],["patch(req",{"_index":629,"title":{},"body":{"controllers/NewsController.html":{}}}],["payload",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":458,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.firstname",{"_index":459,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":457,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.isadmin",{"_index":462,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.lastname",{"_index":460,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.phone",{"_index":461,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["phone",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["port",{"_index":1054,"title":{},"body":{"miscellaneous/functions.html":{}}}],["post",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["post('admin/createuser",{"_index":915,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('login",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["presents",{"_index":591,"title":{},"body":{"injectables/MySportsService.html":{}}}],["private",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":1071,"title":{},"body":{"index.html":{}}}],["promise",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/LocalStrategy.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["pronostic",{"_index":221,"title":{"classes/Pronostic.html":{}},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreatePronosticDto.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"coverage.html":{}}}],["pronostic.dto",{"_index":738,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostic.dto.ts",{"_index":389,"title":{},"body":{"classes/CreatePronosticDto.html":{},"coverage.html":{}}}],["pronostic.dto.ts:12",{"_index":399,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:17",{"_index":396,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:22",{"_index":398,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:27",{"_index":400,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:33",{"_index":394,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:39",{"_index":393,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.dto.ts:45",{"_index":395,"title":{},"body":{"classes/CreatePronosticDto.html":{}}}],["pronostic.name",{"_index":773,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["pronosticid",{"_index":311,"title":{},"body":{"injectables/CommentariesService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronosticmodel",{"_index":638,"title":{},"body":{"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostics",{"_index":715,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronostics.controller",{"_index":772,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["pronostics.service",{"_index":737,"title":{},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{}}}],["pronosticschema",{"_index":711,"title":{},"body":{"classes/Pronostic.html":{},"modules/PronosticsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pronosticscontroller",{"_index":713,"title":{"controllers/PronosticsController.html":{}},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"coverage.html":{}}}],["pronosticsmodule",{"_index":72,"title":{"modules/PronosticsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PronosticsModule.html":{},"modules.html":{},"overview.html":{}}}],["pronosticsservice",{"_index":736,"title":{"injectables/PronosticsService.html":{}},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"coverage.html":{},"overview.html":{}}}],["pronotic",{"_index":274,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["pronotics",{"_index":331,"title":{},"body":{"classes/Commentary.html":{},"classes/Pronostic.html":{}}}],["prop",{"_index":336,"title":{},"body":{"classes/Commentary.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/News.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{}}}],["properties",{"_index":335,"title":{},"body":{"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/News.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["propery",{"_index":544,"title":{},"body":{"classes/MySport.html":{}}}],["protect",{"_index":440,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":497,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/UsersController.html":{}}}],["readonly",{"_index":45,"title":{},"body":{"controllers/AppController.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":1043,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["regexp('^(((?=.*[a",{"_index":431,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["regsiter",{"_index":939,"title":{},"body":{"injectables/UsersService.html":{}}}],["report",{"_index":236,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["reportcommentary",{"_index":204,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["reportcommentary(commentaryid",{"_index":233,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["reportcommentary(pronosticid",{"_index":309,"title":{},"body":{"injectables/CommentariesService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["reported",{"_index":232,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["req",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["req.body.data",{"_index":506,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["req.body.id",{"_index":571,"title":{},"body":{"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["req.body.name",{"_index":837,"title":{},"body":{"controllers/SportsController.html":{}}}],["req.body.sportfavoriteid",{"_index":505,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["req.body.sportid",{"_index":568,"title":{},"body":{"controllers/MySportsController.html":{}}}],["req.user",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"controllers/CommentariesController.html":{},"controllers/NewsController.html":{}}}],["req.user.id",{"_index":742,"title":{},"body":{"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resetcommentary",{"_index":717,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["resetcommentary(@request",{"_index":757,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["resetcommentary(pronosticid",{"_index":786,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["resetcommentary(req",{"_index":731,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["rest",{"_index":1061,"title":{},"body":{"index.html":{}}}],["result",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.deletedcount",{"_index":976,"title":{},"body":{"injectables/UsersService.html":{}}}],["results",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":46,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["route",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["routes",{"_index":816,"title":{},"body":{"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["run",{"_index":1066,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["schema",{"_index":294,"title":{},"body":{"modules/CommentariesModule.html":{},"classes/Commentary.html":{},"classes/MyFavorite.html":{},"modules/MyFavoritesModule.html":{},"classes/MySport.html":{},"modules/MySportsModule.html":{},"classes/News.html":{},"modules/NewsModule.html":{},"classes/Pronostic.html":{},"modules/PronosticsModule.html":{},"classes/Sport.html":{},"modules/SportsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":346,"title":{},"body":{"classes/Commentary.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/News.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(commentary",{"_index":347,"title":{},"body":{"classes/Commentary.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(myfavorite",{"_index":480,"title":{},"body":{"classes/MyFavorite.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(mysport",{"_index":550,"title":{},"body":{"classes/MySport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(news",{"_index":613,"title":{},"body":{"classes/News.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(pronostic",{"_index":712,"title":{},"body":{"classes/Pronostic.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(sport",{"_index":813,"title":{},"body":{"classes/Sport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":881,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/commentary.schema",{"_index":249,"title":{},"body":{"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{}}}],["schemas/myfavorite.schema",{"_index":516,"title":{},"body":{"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/mysport.schema",{"_index":580,"title":{},"body":{"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["schemas/news.schema",{"_index":634,"title":{},"body":{"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{}}}],["schemas/pronostic.schema",{"_index":739,"title":{},"body":{"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{}}}],["schemas/sport.schema",{"_index":845,"title":{},"body":{"modules/SportsModule.html":{},"injectables/SportsService.html":{}}}],["schemas/user.schema",{"_index":291,"title":{},"body":{"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/News.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["secret",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["secretkey",{"_index":1108,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":456,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":1035,"title":{},"body":{"dependencies.html":{}}}],["send",{"_index":703,"title":{},"body":{"classes/Pronostic.html":{}}}],["service",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/MyFavoritesService.html":{},"injectables/MySportsService.html":{},"injectables/NewsService.html":{},"injectables/PronosticsService.html":{},"injectables/SportsService.html":{},"injectables/UsersService.html":{}}}],["signaled",{"_index":343,"title":{},"body":{"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/Pronostic.html":{}}}],["signoptions",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"modules/MyFavoritesModule.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["specific",{"_index":220,"title":{},"body":{"controllers/CommentariesController.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["sport",{"_index":379,"title":{"classes/Sport.html":{}},"body":{"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"coverage.html":{}}}],["sport.dto.ts",{"_index":403,"title":{},"body":{"classes/CreateSportDto.html":{},"coverage.html":{}}}],["sport.dto.ts:9",{"_index":407,"title":{},"body":{"classes/CreateSportDto.html":{}}}],["sport.name",{"_index":846,"title":{},"body":{"modules/SportsModule.html":{}}}],["sportfavoriteid",{"_index":364,"title":{},"body":{"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{}}}],["sportfavoriteid:favoriteid,data:data",{"_index":538,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["sportid",{"_index":545,"title":{},"body":{"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"injectables/SportsService.html":{}}}],["sportid:sportid",{"_index":600,"title":{},"body":{"injectables/MySportsService.html":{}}}],["sportmodel",{"_index":850,"title":{},"body":{"injectables/SportsService.html":{}}}],["sports",{"_index":405,"title":{},"body":{"classes/CreateSportDto.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{}}}],["sports.controller",{"_index":844,"title":{},"body":{"modules/SportsModule.html":{}}}],["sports.service",{"_index":831,"title":{},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{}}}],["sports/sports.module",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["sportschema",{"_index":812,"title":{},"body":{"classes/Sport.html":{},"modules/SportsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sportscontroller",{"_index":814,"title":{"controllers/SportsController.html":{}},"body":{"controllers/SportsController.html":{},"modules/SportsModule.html":{},"coverage.html":{}}}],["sportsmodule",{"_index":73,"title":{"modules/SportsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SportsModule.html":{},"modules.html":{},"overview.html":{}}}],["sportsservice",{"_index":156,"title":{"injectables/SportsService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/SportsController.html":{},"modules/SportsModule.html":{},"injectables/SportsService.html":{},"coverage.html":{},"overview.html":{}}}],["src/.../commentary.schema.ts",{"_index":1096,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../constants.ts",{"_index":1097,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../create",{"_index":1101,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1052,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../myfavorite.schema.ts",{"_index":1098,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mysport.schema.ts",{"_index":1099,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../news.schema.ts",{"_index":1100,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../pronostic.schema.ts",{"_index":1103,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../sport.schema.ts",{"_index":1104,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../update",{"_index":1102,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":1105,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:23",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":104,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:10",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:42",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/constants.ts",{"_index":1004,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":437,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":442,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":444,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:27",{"_index":446,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":463,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:10",{"_index":465,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/local.strategy.ts:25",{"_index":467,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/commentaries/commentaries.controller.ts",{"_index":196,"title":{},"body":{"controllers/CommentariesController.html":{},"coverage.html":{}}}],["src/commentaries/commentaries.controller.ts:102",{"_index":239,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["src/commentaries/commentaries.controller.ts:121",{"_index":235,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["src/commentaries/commentaries.controller.ts:37",{"_index":209,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["src/commentaries/commentaries.controller.ts:55",{"_index":231,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["src/commentaries/commentaries.controller.ts:72",{"_index":224,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["src/commentaries/commentaries.controller.ts:83",{"_index":218,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["src/commentaries/commentaries.module.ts",{"_index":287,"title":{},"body":{"modules/CommentariesModule.html":{}}}],["src/commentaries/commentaries.service.ts",{"_index":296,"title":{},"body":{"injectables/CommentariesService.html":{},"coverage.html":{}}}],["src/commentaries/commentaries.service.ts:108",{"_index":310,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["src/commentaries/commentaries.service.ts:14",{"_index":299,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["src/commentaries/commentaries.service.ts:30",{"_index":302,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["src/commentaries/commentaries.service.ts:45",{"_index":308,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["src/commentaries/commentaries.service.ts:59",{"_index":307,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["src/commentaries/commentaries.service.ts:75",{"_index":305,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["src/commentaries/commentaries.service.ts:94",{"_index":313,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["src/dto/create",{"_index":348,"title":{},"body":{"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/dto/update",{"_index":868,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":1009,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/myfavorites/myfavorites.controller.ts",{"_index":481,"title":{},"body":{"controllers/MyFavoritesController.html":{},"coverage.html":{}}}],["src/myfavorites/myfavorites.controller.ts:24",{"_index":494,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.controller.ts:37",{"_index":487,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.controller.ts:55",{"_index":492,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["src/myfavorites/myfavorites.module.ts",{"_index":514,"title":{},"body":{"modules/MyFavoritesModule.html":{}}}],["src/myfavorites/myfavorites.service.ts",{"_index":519,"title":{},"body":{"injectables/MyFavoritesService.html":{},"coverage.html":{}}}],["src/myfavorites/myfavorites.service.ts:13",{"_index":522,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:25",{"_index":530,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:37",{"_index":526,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/myfavorites/myfavorites.service.ts:48",{"_index":528,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["src/mypronostics/pronostics.controller.ts",{"_index":714,"title":{},"body":{"controllers/PronosticsController.html":{},"coverage.html":{}}}],["src/mypronostics/pronostics.controller.ts:104",{"_index":733,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:123",{"_index":735,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:142",{"_index":730,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:154",{"_index":728,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:40",{"_index":718,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:64",{"_index":724,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.controller.ts:86",{"_index":722,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["src/mypronostics/pronostics.module.ts",{"_index":771,"title":{},"body":{"modules/PronosticsModule.html":{}}}],["src/mypronostics/pronostics.service.ts",{"_index":774,"title":{},"body":{"injectables/PronosticsService.html":{},"coverage.html":{}}}],["src/mypronostics/pronostics.service.ts:106",{"_index":787,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:121",{"_index":791,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:135",{"_index":785,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:15",{"_index":778,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:31",{"_index":780,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:49",{"_index":782,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:59",{"_index":784,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:74",{"_index":781,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mypronostics/pronostics.service.ts:92",{"_index":789,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["src/mysports/mysports.controller.ts",{"_index":551,"title":{},"body":{"controllers/MySportsController.html":{},"coverage.html":{}}}],["src/mysports/mysports.controller.ts:21",{"_index":561,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.controller.ts:34",{"_index":557,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.controller.ts:54",{"_index":559,"title":{},"body":{"controllers/MySportsController.html":{}}}],["src/mysports/mysports.module.ts",{"_index":576,"title":{},"body":{"modules/MySportsModule.html":{}}}],["src/mysports/mysports.service.ts",{"_index":582,"title":{},"body":{"injectables/MySportsService.html":{},"coverage.html":{}}}],["src/mysports/mysports.service.ts:11",{"_index":584,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:23",{"_index":593,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:34",{"_index":587,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/mysports/mysports.service.ts:45",{"_index":590,"title":{},"body":{"injectables/MySportsService.html":{}}}],["src/news/news.controller.ts",{"_index":614,"title":{},"body":{"controllers/NewsController.html":{},"coverage.html":{}}}],["src/news/news.controller.ts:119",{"_index":631,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.controller.ts:39",{"_index":618,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.controller.ts:63",{"_index":622,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.controller.ts:72",{"_index":628,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.controller.ts:81",{"_index":625,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.controller.ts:93",{"_index":621,"title":{},"body":{"controllers/NewsController.html":{}}}],["src/news/news.module.ts",{"_index":661,"title":{},"body":{"modules/NewsModule.html":{}}}],["src/news/news.service.ts",{"_index":664,"title":{},"body":{"injectables/NewsService.html":{},"coverage.html":{}}}],["src/news/news.service.ts:101",{"_index":675,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:13",{"_index":667,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:29",{"_index":668,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:44",{"_index":671,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:58",{"_index":673,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:72",{"_index":672,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/news/news.service.ts:83",{"_index":670,"title":{},"body":{"injectables/NewsService.html":{}}}],["src/schemas/commentary.schema.ts",{"_index":328,"title":{},"body":{"classes/Commentary.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/commentary.schema.ts:15",{"_index":337,"title":{},"body":{"classes/Commentary.html":{}}}],["src/schemas/commentary.schema.ts:21",{"_index":344,"title":{},"body":{"classes/Commentary.html":{}}}],["src/schemas/commentary.schema.ts:27",{"_index":345,"title":{},"body":{"classes/Commentary.html":{}}}],["src/schemas/commentary.schema.ts:33",{"_index":338,"title":{},"body":{"classes/Commentary.html":{}}}],["src/schemas/commentary.schema.ts:39",{"_index":342,"title":{},"body":{"classes/Commentary.html":{}}}],["src/schemas/myfavorite.schema.ts",{"_index":473,"title":{},"body":{"classes/MyFavorite.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/myfavorite.schema.ts:13",{"_index":478,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/myfavorite.schema.ts:19",{"_index":476,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/myfavorite.schema.ts:25",{"_index":475,"title":{},"body":{"classes/MyFavorite.html":{}}}],["src/schemas/mysport.schema.ts",{"_index":542,"title":{},"body":{"classes/MySport.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/mysport.schema.ts:13",{"_index":548,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/mysport.schema.ts:20",{"_index":547,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/mysport.schema.ts:26",{"_index":546,"title":{},"body":{"classes/MySport.html":{}}}],["src/schemas/news.schema.ts",{"_index":604,"title":{},"body":{"classes/News.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/news.schema.ts:14",{"_index":611,"title":{},"body":{"classes/News.html":{}}}],["src/schemas/news.schema.ts:20",{"_index":606,"title":{},"body":{"classes/News.html":{}}}],["src/schemas/news.schema.ts:26",{"_index":610,"title":{},"body":{"classes/News.html":{}}}],["src/schemas/news.schema.ts:32",{"_index":605,"title":{},"body":{"classes/News.html":{}}}],["src/schemas/news.schema.ts:38",{"_index":608,"title":{},"body":{"classes/News.html":{}}}],["src/schemas/news.schema.ts:44",{"_index":609,"title":{},"body":{"classes/News.html":{}}}],["src/schemas/pronostic.schema.ts",{"_index":700,"title":{},"body":{"classes/Pronostic.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/pronostic.schema.ts:15",{"_index":709,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:21",{"_index":706,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:27",{"_index":708,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:33",{"_index":710,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:39",{"_index":702,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:45",{"_index":705,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:51",{"_index":701,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/pronostic.schema.ts:57",{"_index":704,"title":{},"body":{"classes/Pronostic.html":{}}}],["src/schemas/sport.schema.ts",{"_index":809,"title":{},"body":{"classes/Sport.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/sport.schema.ts:14",{"_index":811,"title":{},"body":{"classes/Sport.html":{}}}],["src/schemas/user.schema.ts",{"_index":874,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/schemas/user.schema.ts:13",{"_index":876,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:19",{"_index":878,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:25",{"_index":875,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:31",{"_index":879,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:37",{"_index":880,"title":{},"body":{"classes/User.html":{}}}],["src/schemas/user.schema.ts:43",{"_index":877,"title":{},"body":{"classes/User.html":{}}}],["src/sports/sports.controller.ts",{"_index":815,"title":{},"body":{"controllers/SportsController.html":{},"coverage.html":{}}}],["src/sports/sports.controller.ts:25",{"_index":827,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:35",{"_index":829,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:47",{"_index":822,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.controller.ts:67",{"_index":824,"title":{},"body":{"controllers/SportsController.html":{}}}],["src/sports/sports.module.ts",{"_index":843,"title":{},"body":{"modules/SportsModule.html":{}}}],["src/sports/sports.service.ts",{"_index":847,"title":{},"body":{"injectables/SportsService.html":{},"coverage.html":{}}}],["src/sports/sports.service.ts:13",{"_index":849,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:25",{"_index":855,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:40",{"_index":856,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:51",{"_index":852,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/sports/sports.service.ts:62",{"_index":854,"title":{},"body":{"injectables/SportsService.html":{}}}],["src/users/users.controller.ts",{"_index":882,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:102",{"_index":899,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:115",{"_index":887,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:140",{"_index":890,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:29",{"_index":892,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":894,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:63",{"_index":896,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:82",{"_index":893,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":924,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":926,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:107",{"_index":941,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:125",{"_index":951,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:166",{"_index":933,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:183",{"_index":937,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:19",{"_index":931,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:37",{"_index":949,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":953,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":938,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:78",{"_index":942,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":944,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:97",{"_index":947,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1067,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1070,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1072,"title":{},"body":{"index.html":{}}}],["started",{"_index":1057,"title":{"index.html":{}},"body":{}}],["statements",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["strategy",{"_index":443,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":47,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":452,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1088,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1089,"title":{},"body":{"modules.html":{}}}],["tab",{"_index":408,"title":{},"body":{"classes/CreateSportDto.html":{}}}],["table",{"_index":1014,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1013,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":1075,"title":{},"body":{"index.html":{}}}],["test:covteam",{"_index":1078,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1077,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1074,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":472,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.commentariesservice.create(user",{"_index":259,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["this.commentariesservice.deletecommentary(commentaryid",{"_index":278,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["this.commentariesservice.findall(newsid",{"_index":273,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["this.commentariesservice.findallreported",{"_index":270,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["this.commentariesservice.reportcommentary(commentaryid",{"_index":283,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["this.commentariesservice.validatecommentary(commentaryid",{"_index":281,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["this.commentarymodel",{"_index":318,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["this.commentarymodel.find({isreported:true",{"_index":325,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["this.commentarymodel.find({newsid",{"_index":326,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["this.jwtservice.sign(payload",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.myfavoritemodel.create({'userid':userid",{"_index":537,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritemodel.find({'userid':userid}).exec",{"_index":534,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritemodel.findbyidanddelete(id",{"_index":540,"title":{},"body":{"injectables/MyFavoritesService.html":{}}}],["this.myfavoritesservice.addmyfavorite(req.user.id",{"_index":507,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.myfavoritesservice.delmyfavorite(req.body.sportfavoriteid",{"_index":510,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.myfavoritesservice.getmyfavorites(req.user.id",{"_index":503,"title":{},"body":{"controllers/MyFavoritesController.html":{}}}],["this.mysportmodel.create({userid:userid",{"_index":599,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportmodel.find({userid:userid}).exec",{"_index":597,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportmodel.findbyidanddelete(sportid",{"_index":602,"title":{},"body":{"injectables/MySportsService.html":{}}}],["this.mysportsservice.addmysport(req.user.id",{"_index":569,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.mysportsservice.delmysport(req.body.id",{"_index":572,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.mysportsservice.getmysports(req.user.id",{"_index":566,"title":{},"body":{"controllers/MySportsController.html":{}}}],["this.newsmodel",{"_index":678,"title":{},"body":{"injectables/NewsService.html":{}}}],["this.newsmodel.find",{"_index":680,"title":{},"body":{"injectables/NewsService.html":{}}}],["this.newsmodel.findbyid(id",{"_index":681,"title":{},"body":{"injectables/NewsService.html":{}}}],["this.newsmodel.findbyidanddelete(id",{"_index":683,"title":{},"body":{"injectables/NewsService.html":{}}}],["this.newsmodel.findbyidandupdate",{"_index":687,"title":{},"body":{"injectables/NewsService.html":{}}}],["this.newsservice.create(user",{"_index":642,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.newsservice.deleteone(id",{"_index":653,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.newsservice.findall",{"_index":643,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.newsservice.findbyid(id",{"_index":649,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.newsservice.findbysport(sport",{"_index":646,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.newsservice.patch(id",{"_index":656,"title":{},"body":{"controllers/NewsController.html":{}}}],["this.pronosticmodel",{"_index":794,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.find",{"_index":747,"title":{},"body":{"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.find({isreported:true",{"_index":798,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.findbyid(pronosticid",{"_index":808,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.findbyidanddelete(id",{"_index":801,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticmodel.findone",{"_index":803,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["this.pronosticsservice.create(user",{"_index":750,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.deleteone(id",{"_index":755,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.findall",{"_index":753,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.findpronosticforonematchid(apiname,matchid",{"_index":766,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.reportcommentary(pronosticid",{"_index":763,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.resetcommentary(pronosticid",{"_index":759,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.updateone(user",{"_index":749,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.pronosticsservice.validatecommentary(pronosticid",{"_index":761,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["this.sportmodel.create({name",{"_index":864,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.find",{"_index":862,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.findbyid(id).orfail",{"_index":859,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportmodel.findbyidanddelete(sportid",{"_index":866,"title":{},"body":{"injectables/SportsService.html":{}}}],["this.sportsservice.addsport(req.body.name",{"_index":838,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.delsport(req.body.id",{"_index":840,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.getsport(id",{"_index":834,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.sportsservice.getsports",{"_index":835,"title":{},"body":{"controllers/SportsController.html":{}}}],["this.usermodel",{"_index":969,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.deleteone",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":971,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(id",{"_index":959,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyidandupdate(id",{"_index":979,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":961,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.admincreate(createuserdto",{"_index":917,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.adminupdate(body.id",{"_index":920,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create(createuserdto",{"_index":908,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(id",{"_index":912,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":909,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(email",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.finduserbyid(id",{"_index":911,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.isadmin(req.user.id",{"_index":267,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":914,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.userexists(createuserdto",{"_index":905,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":260,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/LocalStrategy.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["title",{"_index":380,"title":{},"body":{"classes/CreateNewsDto.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{}}}],["transformer",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":228,"title":{},"body":{"controllers/CommentariesController.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"injectables/PronosticsService.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":858,"title":{},"body":{"injectables/SportsService.html":{}}}],["type",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type':apiname",{"_index":800,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["types/bcrypt",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["un",{"_index":934,"title":{},"body":{"injectables/UsersService.html":{}}}],["unauthorized",{"_index":268,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":470,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unit",{"_index":1073,"title":{},"body":{"index.html":{}}}],["update",{"_index":385,"title":{},"body":{"classes/CreateNewsDto.html":{},"classes/News.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@request",{"_index":913,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":950,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(req",{"_index":897,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":685,"title":{},"body":{"injectables/NewsService.html":{},"injectables/UsersService.html":{}}}],["updateone",{"_index":776,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["updateone(userid",{"_index":788,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["updateuserdto",{"_index":867,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["use",{"_index":578,"title":{},"body":{"modules/MySportsModule.html":{}}}],["used",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateSportDto.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"modules/MySportsModule.html":{},"injectables/MySportsService.html":{},"controllers/NewsController.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{},"classes/Sport.html":{},"controllers/SportsController.html":{},"injectables/SportsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["usefindandmodify",{"_index":981,"title":{},"body":{"injectables/UsersService.html":{}}}],["useguards",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":48,"title":{},"body":{"controllers/AppController.html":{},"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@delete",{"_index":491,"title":{},"body":{"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/SportsController.html":{}}}],["useguards(jwtauthguard)@delete(':commentaryid/delete",{"_index":217,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["useguards(jwtauthguard)@delete(':id",{"_index":620,"title":{},"body":{"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get",{"_index":230,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get(':commentaryid/report",{"_index":234,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["useguards(jwtauthguard)@get(':commentaryid/validate",{"_index":238,"title":{},"body":{"controllers/CommentariesController.html":{}}}],["useguards(jwtauthguard)@get(':id",{"_index":826,"title":{},"body":{"controllers/SportsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get(':pronosticid/report",{"_index":729,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["useguards(jwtauthguard)@get(':pronosticid/reset",{"_index":732,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["useguards(jwtauthguard)@get(':pronosticid/validate",{"_index":734,"title":{},"body":{"controllers/PronosticsController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard)@patch",{"_index":898,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@patch(':id",{"_index":630,"title":{},"body":{"controllers/NewsController.html":{}}}],["useguards(jwtauthguard)@patch('admin/updateuser",{"_index":889,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@post",{"_index":208,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/MyFavoritesController.html":{},"controllers/MySportsController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/SportsController.html":{}}}],["useguards(jwtauthguard)@post('admin/createuser",{"_index":886,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(undefined)@post('login",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards,put",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"controllers/SportsController.html":{}}}],["user",{"_index":21,"title":{"classes/User.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"modules/CommentariesModule.html":{},"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/MyFavorite.html":{},"controllers/MyFavoritesController.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"controllers/MySportsController.html":{},"injectables/MySportsService.html":{},"classes/News.html":{},"controllers/NewsController.html":{},"modules/NewsModule.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"modules/PronosticsModule.html":{},"injectables/PronosticsService.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user's",{"_index":588,"title":{},"body":{"injectables/MySportsService.html":{}}}],["user.dto",{"_index":901,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.dto.ts:16",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:22",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:28",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:34",{"_index":425,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["user.dto.ts:40",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:41",{"_index":870,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:46",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":319,"title":{},"body":{"injectables/CommentariesService.html":{},"injectables/NewsService.html":{}}}],["user.isadmin",{"_index":960,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.length",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.name",{"_index":295,"title":{},"body":{"modules/CommentariesModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/UsersModule.html":{}}}],["user[0]._id",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].email",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].firstname",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].isadmin",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].lastname",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].password",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["user[0].phone",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["userexists",{"_index":929,"title":{},"body":{"injectables/UsersService.html":{}}}],["userexists(createuserdto",{"_index":952,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":316,"title":{},"body":{"injectables/CommentariesService.html":{},"classes/Commentary.html":{},"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreatePronosticDto.html":{},"classes/MyFavorite.html":{},"injectables/MyFavoritesService.html":{},"classes/MySport.html":{},"injectables/MySportsService.html":{},"injectables/NewsService.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["usermodel",{"_index":298,"title":{},"body":{"injectables/CommentariesService.html":{},"injectables/NewsService.html":{},"injectables/PronosticsService.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":471,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/MyFavorite.html":{},"classes/MySport.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":925,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":900,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{}}}],["users/users.service",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{}}}],["userschema",{"_index":290,"title":{},"body":{"modules/CommentariesModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":42,"title":{"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":74,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":153,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"controllers/NewsController.html":{},"controllers/PronosticsController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userupdated",{"_index":977,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["util",{"_index":957,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["validate(email",{"_index":466,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":445,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatecommentary",{"_index":205,"title":{},"body":{"controllers/CommentariesController.html":{},"injectables/CommentariesService.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["validatecommentary(@request",{"_index":280,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/PronosticsController.html":{}}}],["validatecommentary(commentaryid",{"_index":312,"title":{},"body":{"injectables/CommentariesService.html":{}}}],["validatecommentary(pronosticid",{"_index":790,"title":{},"body":{"injectables/PronosticsService.html":{}}}],["validatecommentary(req",{"_index":237,"title":{},"body":{"controllers/CommentariesController.html":{},"controllers/PronosticsController.html":{}}}],["validated",{"_index":429,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["validateif",{"_index":871,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["validateuser",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":360,"title":{},"body":{"classes/CreateCommentaryDto.html":{},"classes/CreateMyFavoriteDto.html":{},"classes/CreateMySportDto.html":{},"classes/CreateNewsDto.html":{},"classes/CreatePronosticDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":1107,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1095,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1068,"title":{},"body":{"index.html":{}}}],["widgets",{"_index":474,"title":{},"body":{"classes/MyFavorite.html":{}}}],["winner",{"_index":401,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{}}}],["winnerid",{"_index":392,"title":{},"body":{"classes/CreatePronosticDto.html":{},"classes/Pronostic.html":{},"controllers/PronosticsController.html":{},"injectables/PronosticsService.html":{}}}],["z])(?=.*[0",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":432,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["z]))|((?=.*[a",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommentariesModule.html":{},"modules/MyFavoritesModule.html":{},"modules/MySportsModule.html":{},"modules/NewsModule.html":{},"modules/PronosticsModule.html":{},"modules/SportsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                General controller for the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \ngetProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:23\n                \n            \n\n\n            \n                \n                    Controller used to get all data for the user given a JWT\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, Post, UseGuards,Put } from '@nestjs/common';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { AppService } from './app.service';\n\n/**\n * General controller for the application\n */\n@Controller()\nexport class AppController {\n   /**\n     * Constructor for UsersController\n     * @param {AppService} appService\n     */\n  constructor(private readonly appService: AppService) {}\n\n  /**\n     * Controller used to get all data for the user given a JWT\n     * @param {} req\n     * @return {string}\n     */\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@Request() req) {\n    return req.user;\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentariesModule\n\nCommentariesModule\n\nAppModule -->\n\nCommentariesModule->AppModule\n\n\n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nAppModule -->\n\nMyFavoritesModule->AppModule\n\n\n\n\n\nMySportsModule\n\nMySportsModule\n\nAppModule -->\n\nMySportsModule->AppModule\n\n\n\n\n\nNewsModule\n\nNewsModule\n\nAppModule -->\n\nNewsModule->AppModule\n\n\n\n\n\nPronosticsModule\n\nPronosticsModule\n\nAppModule -->\n\nPronosticsModule->AppModule\n\n\n\n\n\nSportsModule\n\nSportsModule\n\nAppModule -->\n\nSportsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module for the application. Define the database used\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            MySportsController\n                        \n                        \n                            MyFavoritesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommentariesModule\n                        \n                        \n                            MyFavoritesModule\n                        \n                        \n                            MySportsModule\n                        \n                        \n                            NewsModule\n                        \n                        \n                            PronosticsModule\n                        \n                        \n                            SportsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersModule } from './users/users.module';\nimport { PronosticsModule } from './MyPronostics/pronostics.module';\n\nimport { AuthModule } from './auth/auth.module';\nimport { MySportsController } from './MySports/MySports.controller';\nimport { MySportsModule } from './MySports/MySports.module';\nimport { MyFavoritesController } from './MyFavorites/MyFavorites.controller';\nimport { MyFavoritesModule } from './MyFavorites/MyFavorites.module';\nimport { SportsModule } from './sports/sports.module';\nimport { NewsModule } from './news/news.module';\nimport { NewsController } from './news/news.controller';\nimport { CommentariesModule } from './commentaries/commentaries.module';\n\n/**\n * Module for the application. Define the database used\n */\n@Module({\n  imports: [MongooseModule.forRoot('mongodb://localhost/funsport'), UsersModule, AuthModule,MySportsModule, MyFavoritesModule, SportsModule, PronosticsModule, NewsModule, CommentariesModule],\n  controllers: [AppController,MySportsController,MyFavoritesController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n            \n                Description\n            \n            \n                Not used\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * Not used\n */\n@Injectable()\nexport class AppService {\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'auth'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n                    Controller when a user wants to login\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards, Get } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\n\n/**\n * Controller used for the route 'auth'\n */\n@Controller('auth')\nexport class AuthController {\n  /**\n    * Constructor for AuthController\n    */\n  constructor(private authService: AuthService) { }\n\n\n  /**\n       * Controller when a user wants to login\n       * @param {} req\n       * @return {}\n       */\n  @UseGuards(AuthGuard('local'))\n  @Post('login')\n  async login(@Request() req) {\n    return this.authService.login(req.user);\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from '../users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtStrategy } from './jwt.strategy';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwtConstants } from './constants';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.register({\n      secret: jwtConstants.secret,\n      signOptions: { expiresIn: '2 days' },\n    }),\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used for managing the actions available for Auth controller\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor of SportsService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:42\n                \n            \n\n\n            \n                \n                    Service used to return the access_token\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user object\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n                    Service used to validate the credentials\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email of the user\n\n                                    \n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        password of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { JwtService } from '@nestjs/jwt';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * Service used for managing the actions available for Auth controller\n */\n@Injectable()\nexport class AuthService {\n  /**\n     * Constructor of SportsService\n     * @param {UsersService} usersService\n     * @param {JwtService} jwtService\n     */\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService\n    ) {}\n\n    /**\n     * Service used to validate the credentials\n     * @param {string} email email of the user\n     * @param {string} pass password of the user\n     * @return {}\n     */\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.findOne(email);\n    const passVerify = await bcrypt.compare(pass, user[0].password);\n    if (user.length > 0 && passVerify) {\n      const { password, ...result } = user;\n      return result;\n    }\n    return null;\n  }\n\n   /**\n     * Service used to return the access_token\n     * @param {} user user object\n     * @return {}\n     */\n  async login(user: any) {\n    const payload = {\n                      email: user[0].email,\n                      id: user[0]._id ,\n                      firstName: user[0].firstName,\n                      lastName: user[0].lastName ,\n                      isAdmin: user[0].isAdmin,\n                      phone: user[0].phone,\n                    };\n    const access_token = this.jwtService.sign(payload)\n    return {\n      access_token: access_token,\n    };\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentariesController.html":{"url":"controllers/CommentariesController.html","title":"controller - CommentariesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentariesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commentaries/commentaries.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                commentaries\n            \n\n            \n                Description\n            \n            \n                Service used to manage all action available in Commentaries Service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteCommentary\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReported\n                            \n                            \n                                    Async\n                                reportCommentary\n                            \n                            \n                                    Async\n                                validateCommentary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req, createCommentaryDto: CreateCommentaryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/commentaries/commentaries.controller.ts:37\n                \n            \n\n\n            \n                \n                    Creator of commentary\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCommentaryDto\n                                    \n                                                CreateCommentaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCommentary(req, commentaryId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':commentaryId/delete')\n                \n            \n\n            \n                \n                    Defined in src/commentaries/commentaries.controller.ts:83\n                \n            \n\n\n            \n                \n                    Controller used to reset the field commentary for a specific pronostic\nYou need to be connected to access to this route and to be isAdmin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentaryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(newsId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':newsId')\n                \n            \n\n            \n                \n                    Defined in src/commentaries/commentaries.controller.ts:72\n                \n            \n\n\n            \n                \n                    Service used to give all commentary for one newsId true in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newsId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllReported\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReported(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/commentaries/commentaries.controller.ts:55\n                \n            \n\n\n            \n                \n                    Service used to give all commentary reported true in the database\nYou need to be connected to access to this route and to be isAdmin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reportCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportCommentary(commentaryId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':commentaryId/report')\n                \n            \n\n            \n                \n                    Defined in src/commentaries/commentaries.controller.ts:121\n                \n            \n\n\n            \n                \n                    Controller used to report a specific commentary\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    commentaryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCommentary(req, commentaryId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':commentaryId/validate')\n                \n            \n\n            \n                \n                    Defined in src/commentaries/commentaries.controller.ts:102\n                \n            \n\n\n            \n                \n                    Controller used to validate a commentary\nYou need to be connected to access to this route and to be isAdmin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    commentaryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Param, Delete,Patch, UseGuards, Request } from '@nestjs/common';\nimport { CommentariesService } from './commentaries.service';\nimport { CreateCommentaryDto } from '../dto/create-commentary.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\nimport { UsersService } from '../users/users.service';\n\nimport { Commentary } from '../schemas/commentary.schema';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n/**\n * Service used to manage all action available in Commentaries Service\n */\n@Controller('commentaries')\nexport class CommentariesController {\n    /**\n   * Constructor for commentaries controller\n   * @param commentariesService\n   * @param usersService\n   * @param {Model} commentaryModel\n   */\n  constructor(private readonly commentariesService: CommentariesService,\n    private readonly usersService: UsersService,\n    @InjectModel(Commentary.name) private commentaryModel: Model) { }\n\n  /**\n   * Creator of commentary\n   * You need to be connected to access to this route\n   * @param {Request}\n   * @param {Body} createCommentaryDto\n   * @return {Commentary}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(@Request() req, @Body() createCommentaryDto: CreateCommentaryDto) {\n    if (createCommentaryDto.commentary && createCommentaryDto.newsId) {\n        const user = req.user;\n        return await this.commentariesService.create(user, createCommentaryDto);\n        } else {\n        throw new HttpException({\n            message: \"Commentary and news ID are mandatory.\"\n        }, HttpStatus.BAD_REQUEST)\n    }\n  }\n\n  /**\n   * Service used to give all commentary reported true in the database\n   * You need to be connected to access to this route and to be isAdmin\n   * @return {Commentary[]}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAllReported(@Request() req): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n        return this.commentariesService.findAllReported();\n    }\n  }\n\n  /**\n   * Service used to give all commentary for one newsId true in the database\n   * @return {Commentary[]}\n   */\n  @Get(\":newsId\")\n  async findAll(@Param('newsId') newsId: string): Promise {\n      return this.commentariesService.findAll(newsId);\n  }\n\n/**\n * Controller used to reset the field commentary for a specific pronostic\n * You need to be connected to access to this route and to be isAdmin\n * @return {Pronotic}\n */\n@UseGuards(JwtAuthGuard)\n@Delete(':commentaryId/delete')\nasync deleteCommentary(@Request() req, @Param('commentaryId') commentaryId: string): Promise {\n  const isAdmin = await this.usersService.isAdmin(req.user.id);\n  if (!isAdmin) {\n    throw new HttpException({\n      message: 'Unauthorized Access',\n    }, HttpStatus.UNAUTHORIZED);\n  }\n  else {\n    return this.commentariesService.deleteCommentary(commentaryId);\n  }\n}\n\n /**\n* Controller used to validate a commentary\n* You need to be connected to access to this route and to be isAdmin\n* @return {Pronotic}\n*/\n@UseGuards(JwtAuthGuard)\n@Get(':commentaryId/validate')\nasync validateCommentary(@Request() req, @Param('commentaryId') commentaryId: string): Promise {\nconst isAdmin = await this.usersService.isAdmin(req.user.id);\nif (!isAdmin) {\n  throw new HttpException({\n    message: 'Unauthorized Access',\n  }, HttpStatus.UNAUTHORIZED);\n}\nelse {\n  return this.commentariesService.validateCommentary(commentaryId);\n}\n}\n\n /**\n* Controller used to report a specific commentary\n* You need to be connected to access to this route\n* @return {Pronotic}\n*/\n@UseGuards(JwtAuthGuard)\n@Get(':commentaryId/report')\nasync reportCommentary( @Param('commentaryId') commentaryId: string): Promise {\nreturn this.commentariesService.reportCommentary(commentaryId);\n\n}\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentariesModule.html":{"url":"modules/CommentariesModule.html","title":"module - CommentariesModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentariesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommentariesModule\n\n\n\ncluster_CommentariesModule_providers\n\n\n\ncluster_CommentariesModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nCommentariesModule\n\nCommentariesModule\n\nCommentariesModule -->\n\nUsersModule->CommentariesModule\n\n\n\n\n\nCommentariesService\n\nCommentariesService\n\nCommentariesModule -->\n\nCommentariesService->CommentariesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/commentaries/commentaries.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommentariesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CommentariesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { CommentariesService } from './commentaries.service';\nimport { CommentariesController } from './commentaries.controller';\nimport { Commentary, CommentarySchema } from '../schemas/commentary.schema';\nimport { User, UserSchema } from '../schemas/user.schema';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Commentary.name, schema: CommentarySchema }]),\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    UsersModule,\n  ],\n  providers: [CommentariesService],\n  controllers: [CommentariesController]\n})\nexport class CommentariesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommentariesService.html":{"url":"injectables/CommentariesService.html","title":"injectable - CommentariesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CommentariesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/commentaries/commentaries.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used to manage all action available in Commentaries Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteCommentary\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findAllReported\n                            \n                            \n                                    Async\n                                reportCommentary\n                            \n                            \n                                    Async\n                                validateCommentary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentaryModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/commentaries/commentaries.service.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor for NewsService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentaryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User, createCommentaryDto: CreateCommentaryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/commentaries/commentaries.service.ts:30\n                \n            \n\n\n            \n                \n                    Service used to create a news\nYou need to be connected in admin to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCommentaryDto\n                                    \n                                                CreateCommentaryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCommentary(commentaryId)\n                \n            \n\n\n            \n                \n                    Defined in src/commentaries/commentaries.service.ts:75\n                \n            \n\n\n            \n                \n                    Service used to delete\nYou need to be connected to access to this route and to be isAdmin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    commentaryId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the commentary\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(newsId)\n                \n            \n\n\n            \n                \n                    Defined in src/commentaries/commentaries.service.ts:59\n                \n            \n\n\n            \n                \n                    Service used to give all news in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newsId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAllReported\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllReported()\n                \n            \n\n\n            \n                \n                    Defined in src/commentaries/commentaries.service.ts:45\n                \n            \n\n\n            \n                \n                    Service used to give all news in the database\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reportCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportCommentary(pronosticId)\n                \n            \n\n\n            \n                \n                    Defined in src/commentaries/commentaries.service.ts:108\n                \n            \n\n\n            \n                \n                    Service used to report a commentary\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pronosticId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the pronostic\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCommentary(commentaryId)\n                \n            \n\n\n            \n                \n                    Defined in src/commentaries/commentaries.service.ts:94\n                \n            \n\n\n            \n                \n                    Service used to validate a commentary\nYou need to be connected to access to this route and to be isAdmin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    commentaryId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the commentary\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Commentary} from '../schemas/commentary.schema';\nimport { HttpException, HttpStatus } from '@nestjs/common'\n\nimport { CreateCommentaryDto } from '../dto/create-commentary.dto';\nimport { User } from '../schemas/user.schema';\n\n/**\n * Service used to manage all action available in Commentaries Service\n */\n@Injectable()\nexport class CommentariesService {\n\n /**\n   * Constructor for NewsService\n   */\n  constructor(@InjectModel(Commentary.name) private commentaryModel: Model,\n  @InjectModel(User.name) private userModel: Model,\n  ) {\n  }\n  /**\n   * Service used to create a news\n   * You need to be connected in admin to access to this route\n   * @param {User} userId\n   * @param {CreateCommentaryDto} createCommentaryDto\n   * @return {Commentary}\n   */\n  async create(user: User, createCommentaryDto: CreateCommentaryDto): Promise {\n    const createdCommentary = await new this.commentaryModel({\n      commentary: createCommentaryDto.commentary,\n      userId: user.id,\n      newsId: createCommentaryDto.newsId,\n      createdAt: Date.now(),\n      isReported: false\n    })\n    return createdCommentary.save();\n  } \n\n/**\n * Service used to give all news in the database\n * @return {News[]}\n */\n  async findAllReported(): Promise {\n    let commentary = await this.commentaryModel.find({isReported:true});\n    for (let i = 0; i  {\n    let commentary = await this.commentaryModel.find({newsId: newsId});\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Commentary.html":{"url":"classes/Commentary.html","title":"class - Commentary","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Commentary\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/commentary.schema.ts\n        \n\n            \n                Description\n            \n            \n                This collection collects all pronotics and the commentary associated\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentary\n                            \n                            \n                                createdAt\n                            \n                            \n                                isReported\n                            \n                            \n                                newsId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/commentary.schema.ts:15\n                            \n                        \n\n                \n                    \n                        User commentary for this pronostic\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/commentary.schema.ts:33\n                            \n                        \n\n                \n                    \n                        date of the creation of the commentary\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isReported\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/commentary.schema.ts:39\n                            \n                        \n\n                \n                    \n                        boolean true if the commentary is signaled\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newsId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/commentary.schema.ts:21\n                            \n                        \n\n                \n                    \n                        User commentary for this pronostic\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/commentary.schema.ts:27\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n\n/**\n * This collection collects all pronotics and the commentary associated\n */\n@Schema()\nexport class Commentary extends Document {\n\n /**\n  * User commentary for this pronostic\n  */\n @Prop()\n commentary: string;\n\n /**\n * User commentary for this pronostic\n */\n @Prop()\n newsId: string;\n\n /**\n  * Id given in the Model\n  */\n @Prop()\n userId: string;\n\n /**\n  * date of the creation of the commentary\n  */\n @Prop()\n createdAt: string;\n\n /**\n * boolean true if the commentary is signaled\n */\n @Prop()\n isReported: boolean;\n\n\n}\n\n/**\n * SchemaFactory for the class \n */\nexport const CommentarySchema = SchemaFactory.createForClass(Commentary);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentaryDto.html":{"url":"classes/CreateCommentaryDto.html","title":"class - CreateCommentaryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentaryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-commentary.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a new commentary.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                commentary\n                            \n                            \n                                createdAt\n                            \n                            \n                                isReported\n                            \n                            \n                                newsId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-commentary.dto.ts:13\n                            \n                        \n\n                \n                    \n                        User commentary for this pronostic\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-commentary.dto.ts:30\n                            \n                        \n\n                \n                    \n                        date of the creation of the commentary\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isReported\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-commentary.dto.ts:36\n                            \n                        \n\n                \n                    \n                        boolean true if the commentary is signaled\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            newsId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-commentary.dto.ts:18\n                            \n                        \n\n                \n                    \n                        User commentary for this pronostic\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-commentary.dto.ts:24\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\nimport { User } from '../schemas/user.schema';\n\n\n/**\n * This Dto is used to create a new commentary.\n */\nexport class CreateCommentaryDto {\n\n /**\n  * User commentary for this pronostic\n  */\n  commentary: string;\n\n  /**\n  * User commentary for this pronostic\n  */\n  newsId: string;\n\n  /**\n   * Id given in the Model\n   */\n  @IsOptional()\n  userId: string;\n\n  /**\n   * date of the creation of the commentary\n   */\n  @IsOptional()\n  createdAt: string;\n\n  /**\n  * boolean true if the commentary is signaled\n  */\n  @IsOptional()\n  isReported: boolean;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMyFavoriteDto.html":{"url":"classes/CreateMyFavoriteDto.html","title":"class - CreateMyFavoriteDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMyFavoriteDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-myFavorite.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a new MyFavorite.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:19\n                            \n                        \n\n                \n                    \n                        data \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:14\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-myFavorite.dto.ts:9\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n/**\n * This Dto is used to create a new MyFavorite.\n */\nexport class CreateMyFavoriteDto {\n  /**\n   * Id given in the Model\n   */\n  userId: string;\n\n  /**\n   * Id given in the Model\n   */\n  sportFavoriteId: string;\n\n  /**\n   * data \n   */\n  data: string[];\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMySportDto.html":{"url":"classes/CreateMySportDto.html","title":"class - CreateMySportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMySportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-mySport.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a new MySport.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     string[]\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:19\n                            \n                        \n\n                \n                    \n                        data \n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:14\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-mySport.dto.ts:9\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n/**\n * This Dto is used to create a new MySport.\n */\nexport class CreateMySportDto {\n  /**\n   * Id given in the Model\n   */\n  userId: string;\n\n  /**\n   * Id given in the Model\n   */\n  sportFavoriteId: string;\n\n  /**\n   * data \n   */\n  data: string[];\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNewsDto.html":{"url":"classes/CreateNewsDto.html","title":"class - CreateNewsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNewsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-news.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a news.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                content\n                            \n                            \n                                createdAt\n                            \n                            \n                                modifiedAt\n                            \n                            \n                                sport\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            author\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-news.dto.ts:28\n                            \n                        \n\n                \n                    \n                        User name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-news.dto.ts:17\n                            \n                        \n\n                \n                    \n                        Content of the news\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-news.dto.ts:34\n                            \n                        \n\n                \n                    \n                        date of the creation of the news\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-news.dto.ts:40\n                            \n                        \n\n                \n                    \n                        date of the update of the news\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-news.dto.ts:22\n                            \n                        \n\n                \n                    \n                        Name of the sport\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-news.dto.ts:12\n                            \n                        \n\n                \n                    \n                        Title of the news\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\nimport { User } from '../schemas/user.schema';\n\n\n/**\n * This Dto is used to create a news.\n */\nexport class CreateNewsDto {\n  /**\n   * Title of the news\n   */\n  title: string;\n\n  /**\n   * Content of the news\n   */\n  content: string;\n\n  /**\n   * Name of the sport\n   */\n  sport: string;\n\n  /**\n   * User name\n   */\n  @IsOptional()\n  author: string;\n\n  /**\n   * date of the creation of the news\n   */\n  @IsOptional()\n  createdAt: string;\n\n  /**\n   * date of the update of the news\n   */\n  @IsOptional()\n  modifiedAt: string;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePronosticDto.html":{"url":"classes/CreatePronosticDto.html","title":"class - CreatePronosticDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePronosticDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-pronostic.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a new pronostic.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorName\n                            \n                            \n                                commentary\n                            \n                            \n                                createdAt\n                            \n                            \n                                matchId\n                            \n                            \n                                type\n                            \n                            \n                                userId\n                            \n                            \n                                winnerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:39\n                            \n                        \n\n                \n                    \n                        User name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:33\n                            \n                        \n\n                \n                    \n                        User commentary for this pronostic\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:45\n                            \n                        \n\n                \n                    \n                        date of the creation of the commentary\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            matchId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:17\n                            \n                        \n\n                \n                    \n                        Id given by the API\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:22\n                            \n                        \n\n                \n                    \n                        Name of the sport\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:12\n                            \n                        \n\n                \n                    \n                        Id given in the Model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            winnerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-pronostic.dto.ts:27\n                            \n                        \n\n                \n                    \n                        Name of the pronostic winner\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\nimport { User } from '../schemas/user.schema';\n\n\n/**\n * This Dto is used to create a new pronostic.\n */\nexport class CreatePronosticDto {\n  /**\n   * Id given in the Model\n   */\n  userId: string;\n\n  /**\n   * Id given by the API\n   */\n  matchId: string;\n\n  /**\n   * Name of the sport\n   */\n  type: string;\n\n  /**\n   * Name of the pronostic winner\n   */\n  winnerId: string;\n\n  /**\n   * User commentary for this pronostic\n   */\n  @IsOptional()\n  commentary: string;\n\n  /**\n   * User name\n   */\n  @IsOptional()\n  authorName: User;\n\n  /**\n   * date of the creation of the commentary\n   */\n  @IsOptional()\n  createdAt: string;\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSportDto.html":{"url":"classes/CreateSportDto.html","title":"class - CreateSportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-sport.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a new Sport.\nThis collection is used to display the sports in the app\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-sport.dto.ts:9\n                            \n                        \n\n                \n                    \n                        Name of the sport. This name is display in the tab\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSportDto {\n    /**\n     * Name of the sport. This name is display in the tab\n     */\n    name: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-user.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to create a users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:28\n                            \n                        \n\n                \n                    \n                        Email of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:16\n                            \n                        \n\n                \n                    \n                        firstname of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:46\n                            \n                        \n\n                \n                    \n                        Status administrator for this user (optionnal)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:22\n                            \n                        \n\n                \n                    \n                        Lastname of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Matches(passwordRegex)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:40\n                            \n                        \n\n                \n                    \n                        Password of the user using regex\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(10)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/create-user.dto.ts:34\n                            \n                        \n\n                \n                    \n                        Phone of the user (min 10)\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, IsOptional} from 'class-validator';\n\n/**\n * Regex used to check if password is validated.\n */\nconst passwordRegex = new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})');\n\n/**\n * This Dto is used to create a users.\n */\nexport class CreateUserDto {\n /**\n   * firstname of the user\n   */\n  @MinLength(1)\n  firstName: string;\n\n  /**\n   * Lastname of the user\n   */\n  @MinLength(1)\n  lastName: string;\n\n  /**\n   * Email of the user\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * Phone of the user (min 10)\n   */\n  @MinLength(10)\n  phone: string;\n\n  /**\n   * Password of the user using regex\n   */\n  @Matches(passwordRegex)\n  password: string;\n\n  /**\n   * Status administrator for this user (optionnal)\n   */\n  @IsOptional()\n  isAdmin: boolean;\n\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n            \n                Description\n            \n            \n                Guard used to protect the JWT\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * Guard used to protect the JWT\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Strategy used to define the JWT strategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor for the JWTStrategy\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:27\n                \n            \n\n\n            \n                \n                    Method used to validate the payload of the JWT\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { jwtConstants } from './constants';\n\n/**\n *Strategy used to define the JWT strategy\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n    /**\n * Constructor for the JWTStrategy\n */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: jwtConstants.secret,\n    });\n  }\n\n    /**\n * Method used to validate the payload of the JWT\n * @param {} payload\n * @return {}\n */\n  async validate(payload: any) {\n    return { id: payload.id, email: payload.email, firstName: payload.firstName, lastName: payload.lastName, phone: payload.phone , isAdmin: payload.isAdmin};\n  }\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Strategy used to define the passport Strategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/local.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            Constructor for the localStrategy\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:25\n                \n            \n\n\n            \n                \n                    Method used to check if a user is validated to access to other elements\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n/**\n *Strategy used to define the passport Strategy\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  /**\n * Constructor for the localStrategy\n * @param {AuthService} authService\n */\n  constructor(private authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  /**\n * Method used to check if a user is validated to access to other elements\n * @param {string} email\n * @param {string} password\n * @return {}\n */\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MyFavorite.html":{"url":"classes/MyFavorite.html","title":"class - MyFavorite","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MyFavorite\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/myFavorite.schema.ts\n        \n\n            \n                Description\n            \n            \n                This collection collects all widgets for all users.\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportFavoriteId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:25\n                            \n                        \n\n                \n                    \n                        data\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportFavoriteId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:19\n                            \n                        \n\n                \n                    \n                        sportFavoriteId corresponds to a specific id sport\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/myFavorite.schema.ts:13\n                            \n                        \n\n                \n                    \n                        id user given in Model\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * This collection collects all widgets for all users.\n */\n@Schema()\nexport class MyFavorite extends Document {\n  /**\n   * id user given in Model\n   */\n  @Prop()\n  userId: string;\n\n  /**\n   * sportFavoriteId corresponds to a specific id sport\n   */\n  @Prop()\n  sportFavoriteId: string;\n\n  /**\n   * data\n   */\n  @Prop()\n  data: [string];\n\n}\n\n/**\n * SchemaFactory for the class \n */\nexport const MyFavoriteSchema = SchemaFactory.createForClass(MyFavorite);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MyFavoritesController.html":{"url":"controllers/MyFavoritesController.html","title":"controller - MyFavoritesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MyFavoritesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                myfavorites\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'myfavorites'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMyFavorite\n                            \n                            \n                                    Async\n                                delMyFavorite\n                            \n                            \n                                    Async\n                                getMyFavorite\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:37\n                \n            \n\n\n            \n                \n                    Controller to add a favorite\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:55\n                \n            \n\n\n            \n                \n                    Controller to delete a favorite\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyFavorite(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.controller.ts:24\n                \n            \n\n\n            \n                \n                    Controller to get all favorites for the current user\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete, Post, Request, UseGuards, Put } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { MyFavoritesService } from './MyFavorites.service';\n\n/**\n * Controller used for the route 'myfavorites'\n */\n@Controller('myfavorites')\nexport class MyFavoritesController {\n  /**\n   * Constructor for MyFavorites controller\n   * @param {MyFavoritesService} myFavoritesService\n   */\n  constructor(private readonly myFavoritesService: MyFavoritesService) { }\n\n  /**\n   * Controller to get all favorites for the current user\n   * You need to be connected to access to this route\n   * @param req\n   * @return {Model}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async getMyFavorite(@Request() req) {\n    const list = await this.myFavoritesService.getMyFavorites(req.user.id)\n    return list;\n  }\n\n  /**\n   * Controller to add a favorite\n   * You need to be connected to access to this route\n   * @param req\n   * @return {Model}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async addMyFavorite(@Request() req) {\n    let list\n    if (req.body.sportFavoriteId, req.body.data) {\n      list = await this.myFavoritesService.addMyFavorite(req.user.id, req.body.sportFavoriteId, req.body.data)\n    } else {\n      list = { error: \"sportFavoriteId and data are mandatory\" }\n    }\n    return list;\n  }\n\n  /**\n   * Controller to delete a favorite\n   * You need to be connected to access to this route\n   * @param req\n   * @return {}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  async delMyFavorite(@Request() req) {\n    if (req.body.sportFavoriteId) {\n      return await this.myFavoritesService.delMyFavorite(req.body.sportFavoriteId)\n    } else {\n      return {\n        error: \"sportFavoriteId is mandatory\"\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MyFavoritesModule.html":{"url":"modules/MyFavoritesModule.html","title":"module - MyFavoritesModule","body":"\n                   \n\n\n\n\n    Modules\n    MyFavoritesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MyFavoritesModule\n\n\n\ncluster_MyFavoritesModule_providers\n\n\n\ncluster_MyFavoritesModule_exports\n\n\n\n\nMyFavoritesService \n\nMyFavoritesService \n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nMyFavoritesService  -->\n\nMyFavoritesModule->MyFavoritesService \n\n\n\n\n\nMyFavoritesService\n\nMyFavoritesService\n\nMyFavoritesModule -->\n\nMyFavoritesService->MyFavoritesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module for Model\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MyFavoritesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MyFavoritesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MyFavoritesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MyFavoritesService } from './MyFavorites.service';\nimport { MyFavoritesController } from './MyFavorites.controller';\nimport { MyFavorite, MyFavoriteSchema } from '../schemas/myFavorite.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n/**\n * Module for Model\n */\n@Module({\n  imports:[MongooseModule.forFeature([{ name: MyFavorite.name, schema: MyFavoriteSchema }])],\n  providers: [MyFavoritesService],\n  controllers: [MyFavoritesController],\n  exports: [MyFavoritesService],\n})\nexport class MyFavoritesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MyFavoritesService.html":{"url":"injectables/MyFavoritesService.html","title":"injectable - MyFavoritesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MyFavoritesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyFavorites/MyFavorites.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used for managing the actions available in Model\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMyFavorite\n                            \n                            \n                                    Async\n                                delMyFavorite\n                            \n                            \n                                    Async\n                                getMyFavorites\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(myFavoriteModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MyFavorites/MyFavorites.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor of MyFavoritesService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        myFavoriteModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMyFavorite(userId, favoriteId, data)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:37\n                \n            \n\n\n            \n                \n                    Service used to add a favorite for the current user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    favoriteId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMyFavorite\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMyFavorite(id)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:48\n                \n            \n\n\n            \n                \n                    Service used to delete a specific favorite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMyFavorites\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMyFavorites(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/MyFavorites/MyFavorites.service.ts:25\n                \n            \n\n\n            \n                \n                    Service used to get all favorites for the current user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MyFavorite } from '../schemas/myFavorite.schema';\nimport { CreateMyFavoriteDto } from '../dto/create-myFavorite.dto';\n\n\n/**\n * Service used for managing the actions available in Model\n */\n\n@Injectable()\nexport class MyFavoritesService {\n    /**\n     * Constructor of MyFavoritesService\n     * @param {Model} myFavoriteModel\n     */\n    constructor( @InjectModel(MyFavorite.name) private myFavoriteModel: Model){}\n\n    /**\n     * Service used to get all favorites for the current user\n     * @param {string} userId\n     * @return {Model}\n     */\n    async getMyFavorites(userId:string){\n        const favorites = await this.myFavoriteModel.find({'userId':userId}).exec();\n        return favorites;\n    }\n\n    /**\n     * Service used to add a favorite for the current user\n     * @param {string} userId\n     * @param {string} favoriteId\n     * @param {string[]} data\n     * @return {Model}\n     */\n    async addMyFavorite(userId,favoriteId, data){\n        const newFavorite = await this.myFavoriteModel.create({'userId':userId, sportFavoriteId:favoriteId,data:data})\n        newFavorite.save()\n        return newFavorite\n    }\n\n    /**\n     * Service used to delete a specific favorite\n     * @param {string} id\n     * @return {}\n     */\n    async delMyFavorite(id){\n        await this.myFavoriteModel.findByIdAndDelete(id);\n        return {\n            message: \"Deleted\"\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MySport.html":{"url":"classes/MySport.html","title":"class - MySport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MySport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/mySport.schema.ts\n        \n\n            \n                Description\n            \n            \n                This collection collects all sports followed for all users. The propery data is not used\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                sportId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            data\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     [string]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:26\n                            \n                        \n\n                \n                    \n                        data\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sportId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:20\n                            \n                        \n\n                \n                    \n                        id sport given in the Model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/mySport.schema.ts:13\n                            \n                        \n\n                \n                    \n                        id user given in the Model \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * This collection collects all sports followed for all users. The propery data is not used\n */\n@Schema()\nexport class MySport extends Document {\n  /**\n   * id user given in the Model \n   */\n  @Prop()\n  userId: string;\n\n\n  /**\n   * id sport given in the Model\n   */\n  @Prop()\n  sportId: string;\n\n  /**\n   *  data\n   */\n  @Prop()\n  data: [string];\n}\n\n/**\n * SchemaFactory for the class \n */\nexport const MySportSchema = SchemaFactory.createForClass(MySport);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MySportsController.html":{"url":"controllers/MySportsController.html","title":"controller - MySportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MySportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MySports/MySports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                mysports\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'mysports'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMySport\n                            \n                            \n                                    Async\n                                delMySport\n                            \n                            \n                                    Async\n                                getMySports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMySport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:34\n                \n            \n\n\n            \n                \n                    Controller to add a sport in the model MySports\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMySport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:54\n                \n            \n\n\n            \n                \n                    Controller to delete a sport to the model MySports\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMySports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMySports(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MySports/MySports.controller.ts:21\n                \n            \n\n\n            \n                \n                    Controller to get all MySports for a specific user\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete, Post, Request, UseGuards, Put, Body } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { MySportsService } from './MySports.service';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n/**\n * Controller used for the route 'mysports'\n */\n@Controller('mysports')\nexport class MySportsController {\n  constructor(private readonly mySportsService: MySportsService) { }\n\n  /**\n   * Controller to get all MySports for a specific user\n   * You need to be connected to access to this route\n   * @param req\n   * @return {Model[]}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async getMySports(@Request() req) {\n    const list = await this.mySportsService.getMySports(req.user.id)\n    return list;\n  }\n\n  /**\n   * Controller to add a sport in the model MySports\n   * You need to be connected to access to this route\n   * @param req\n   * @return {Model}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async addMySport(@Request() req) {\n    let list\n    if (req.body.sportId) {\n      list = await this.mySportsService.addMySport(req.user.id, req.body.sportId)\n    }\n    else {\n      list = {\n        error: \"sportId is mandatory\"\n      }\n    }\n    return list;\n  }\n\n  /**\n   * Controller to delete a sport to the model MySports\n   * @param req\n   * @return {}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Delete()\n  async delMySport(@Request() req) {\n    if (req.body.id) {\n      return await this.mySportsService.delMySport(req.body.id)\n    } else {\n      throw new HttpException({\n        message: 'Id is Mandatory',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MySportsModule.html":{"url":"modules/MySportsModule.html","title":"module - MySportsModule","body":"\n                   \n\n\n\n\n    Modules\n    MySportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MySportsModule\n\n\n\ncluster_MySportsModule_providers\n\n\n\ncluster_MySportsModule_exports\n\n\n\n\nMySportsService \n\nMySportsService \n\n\n\nMySportsModule\n\nMySportsModule\n\nMySportsService  -->\n\nMySportsModule->MySportsService \n\n\n\n\n\nMySportsService\n\nMySportsService\n\nMySportsModule -->\n\nMySportsService->MySportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MySports/MySports.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module used for manage all elements necessary to use Model\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MySportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MySportsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MySportsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MySportsService } from './MySports.service';\nimport { MySportsController } from './MySports.controller';\nimport { MySport, MySportSchema } from '../schemas/mySport.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n/**\n * Module used for manage all elements necessary to use Model\n */\n\n@Module({\n  imports:[MongooseModule.forFeature([{ name: MySport.name, schema: MySportSchema }])],\n  providers: [MySportsService],\n  controllers: [MySportsController],\n  exports: [MySportsService],\n})\nexport class MySportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MySportsService.html":{"url":"injectables/MySportsService.html","title":"injectable - MySportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MySportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MySports/MySports.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used for manage the actions in the Model\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addMySport\n                            \n                            \n                                    Async\n                                delMySport\n                            \n                            \n                                    Async\n                                getMySports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mySportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MySports/MySports.service.ts:11\n                            \n                        \n\n                \n                    \n                            Constructor for MySPortsService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mySportModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addMySport(userId, sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:34\n                \n            \n\n\n            \n                \n                    Service used to add a sport in the user's favorite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delMySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delMySport(sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:45\n                \n            \n\n\n            \n                \n                    Service used to delete a sport in the user's favorite\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Id presents in the Model\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMySports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMySports(userId)\n                \n            \n\n\n            \n                \n                    Defined in src/MySports/MySports.service.ts:23\n                \n            \n\n\n            \n                \n                    Service used to get all sports for a specific user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { MySport } from '../schemas/mySport.schema';\nimport { CreateMySportDto } from '../dto/create-mySport.dto';\n\n/**\n * Service used for manage the actions in the Model\n */\n@Injectable()\nexport class MySportsService {\n    /**\n     * Constructor for MySPortsService\n     * @param {Model} mySportModel\n     */\n    constructor( @InjectModel(MySport.name) private mySportModel: Model){}\n\n    /**\n     * Service used to get all sports for a specific user\n     * @param {string} userId\n     * @return {Model[]}\n     */\n    async getMySports(userId){\n        const datas = await this.mySportModel.find({userId:userId}).exec();\n        return datas;\n    }\n\n    /**\n     * Service used to add a sport in the user's favorite\n     * @param {string} userId\n     * @param {string} sportId\n     * @return {Model}\n     */\n    async addMySport(userId, sportId){\n        const newMySport = await this.mySportModel.create({userId:userId, sportId:sportId, data:[]});\n        newMySport.save()\n        return newMySport\n    }\n\n    /**\n     * Service used to delete a sport in the user's favorite\n     * @param {string} sportId Id presents in the Model\n     * @return {}\n     */\n    async delMySport(sportId){\n        await this.mySportModel.findByIdAndDelete(sportId);\n        return {\n            message: \"Deleted ok\"\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/News.html":{"url":"classes/News.html","title":"class - News","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  News\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/news.schema.ts\n        \n\n            \n                Description\n            \n            \n                This collection collects all news\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                author\n                            \n                            \n                                content\n                            \n                            \n                                createdAt\n                            \n                            \n                                modifiedAt\n                            \n                            \n                                sport\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            author\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/news.schema.ts:32\n                            \n                        \n\n                \n                    \n                        User name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            content\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/news.schema.ts:20\n                            \n                        \n\n                \n                    \n                        Content of the news\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/news.schema.ts:38\n                            \n                        \n\n                \n                    \n                        date of the creation of the news\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modifiedAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/news.schema.ts:44\n                            \n                        \n\n                \n                    \n                        date of the update of the news\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/news.schema.ts:26\n                            \n                        \n\n                \n                    \n                        Name of the sport\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/news.schema.ts:14\n                            \n                        \n\n                \n                    \n                        Title of the news\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { User } from '../schemas/user.schema';\n\n/**\n * This collection collects all news\n */\n@Schema()\nexport class News extends Document {\n  /**\n   * Title of the news\n   */\n  @Prop()\n  title: string;\n\n  /**\n   * Content of the news\n   */\n  @Prop()\n  content: string;\n\n  /**\n   * Name of the sport\n   */\n  @Prop()\n  sport: string;\n\n  /**\n   * User name\n   */\n  @Prop()\n  author: string;\n\n  /**\n   * date of the creation of the news\n   */\n  @Prop()\n  createdAt: number;\n\n  /**\n   * date of the update of the news\n   */\n  @Prop()\n  modifiedAt: number;\n\n}\n\n/**\n * SchemaFactory for the class \n */\nexport const NewsSchema = SchemaFactory.createForClass(News);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/NewsController.html":{"url":"controllers/NewsController.html","title":"controller - NewsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  NewsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/news/news.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                news\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'news'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findBySport\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req, createNewsDto: CreateNewsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/news/news.controller.ts:39\n                \n            \n\n\n            \n                \n                    Creator of news\nYou need to be connected in admin to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createNewsDto\n                                    \n                                                CreateNewsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/news/news.controller.ts:93\n                \n            \n\n\n            \n                \n                    Controller delete a specific news\nYou need to be connected in admin to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/news/news.controller.ts:63\n                \n            \n\n\n            \n                \n                    Controller give all news in the database\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/news/news.controller.ts:81\n                \n            \n\n\n            \n                \n                    Controller give one news in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findBySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySport(sport: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/filter/:sport')\n                \n            \n\n            \n                \n                    Defined in src/news/news.controller.ts:72\n                \n            \n\n\n            \n                \n                    Controller give all news in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sport\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(req, body, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/news/news.controller.ts:119\n                \n            \n\n\n            \n                \n                    Controller patch a specific news\nYou need to be connected in admin to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Param, Delete,Patch, UseGuards, Request } from '@nestjs/common';\nimport { NewsService } from './news.service';\nimport { CreateNewsDto } from '../dto/create-news.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\nimport { UsersService } from '../users/users.service';\n\nimport { News } from '../schemas/news.schema';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n/**\n * Controller used for the route 'news'\n */\n@Controller('news')\nexport class NewsController {\n    \n  /**\n   * Constructor for news controller\n   * @param newsService\n   * @param usersService\n   * @param {Model} newsModel\n   */\n  constructor(private readonly newsService: NewsService,\n    private readonly usersService: UsersService,\n    @InjectModel(News.name) private pronosticModel: Model) { }\n\n\n  /**\n   * Creator of news\n   * You need to be connected in admin to access to this route\n   * @param {Request}\n   * @param {Body} createPronosticDto\n   * @return {News}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(@Request() req, @Body() createNewsDto: CreateNewsDto) {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n        if (createNewsDto.title && createNewsDto.content && createNewsDto.sport) {\n            const user = req.user;\n            return await this.newsService.create(user, createNewsDto);\n          } else {\n            throw new HttpException({\n              message: \"Title, content and sport are mandatory.\"\n            }, HttpStatus.BAD_REQUEST)\n          }\n    }\n  }\n\n /**\n   * Controller give all news in the database\n   * @return {News[]}\n   */\n  @Get()\n  async findAll(): Promise {\n      return this.newsService.findAll();\n  }\n\n  /**\n   * Controller give all news in the database\n   * @return {News[]}\n   */\n  @Get(\"/filter/:sport\")\n  async findBySport(@Param('sport') sport: string): Promise {\n      return this.newsService.findBySport(sport);\n  }\n\n  /**\n   * Controller give one news in the database\n   * @return {News}\n   */\n  @Get(\":id\")\n  async findById(@Param('id') id: string): Promise {\n      return this.newsService.findById(id);\n  }\n\n  /**\n   * Controller delete a specific news\n   * You need to be connected in admin to access to this route\n   * @param {string} news id\n   * @return  {}\n  */\n @UseGuards(JwtAuthGuard)\n @Delete(':id')\n async delete(@Request() req, @Param('id') id: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n        if (id) {\n            return this.newsService.deleteOne(id);\n          } else {\n            throw new HttpException({\n              message: \"id is mandatory\"\n            }, HttpStatus.BAD_REQUEST)\n          }\n    }\n }\n\n /**\n   * Controller patch a specific news\n   * You need to be connected in admin to access to this route\n   * @param {string} news id\n   * @return  {}\n  */\n @UseGuards(JwtAuthGuard)\n @Patch(':id')\n async patch(@Request() req, @Body() body, @Param('id') id: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n        if (id) {\n            return this.newsService.patch(id, body);\n          } else {\n            throw new HttpException({\n              message: \"id is mandatory\"\n            }, HttpStatus.BAD_REQUEST)\n          }\n    }\n }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/NewsModule.html":{"url":"modules/NewsModule.html","title":"module - NewsModule","body":"\n                   \n\n\n\n\n    Modules\n    NewsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_NewsModule\n\n\n\ncluster_NewsModule_imports\n\n\n\ncluster_NewsModule_providers\n\n\n\ncluster_NewsModule_exports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nNewsModule\n\nNewsModule\n\nNewsModule -->\n\nUsersModule->NewsModule\n\n\n\n\n\nNewsService \n\nNewsService \n\nNewsService  -->\n\nNewsModule->NewsService \n\n\n\n\n\nNewsService\n\nNewsService\n\nNewsModule -->\n\nNewsService->NewsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/news/news.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            NewsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            NewsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            NewsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { NewsController } from './news.controller';\nimport { NewsService } from './news.service';\nimport { News, NewsSchema } from '../schemas/news.schema';\nimport { User, UserSchema } from '../schemas/user.schema';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: News.name, schema: NewsSchema }]),\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    UsersModule,\n  ],\n  controllers: [NewsController],\n  providers: [NewsService],\n  exports: [NewsService],\n})\nexport class NewsModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NewsService.html":{"url":"injectables/NewsService.html","title":"injectable - NewsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  NewsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/news/news.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used to manage all action available in NewsService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteOne\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findBySport\n                            \n                            \n                                    Async\n                                patch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(newsModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/news/news.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for NewsService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        newsModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(user: User, createNewsDto: CreateNewsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/news/news.service.ts:29\n                \n            \n\n\n            \n                \n                    Service used to create a news\nYou need to be connected in admin to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createNewsDto\n                                    \n                                                CreateNewsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(id)\n                \n            \n\n\n            \n                \n                    Defined in src/news/news.service.ts:83\n                \n            \n\n\n            \n                \n                    Service used to delete a specific pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        pronostic id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/news/news.service.ts:44\n                \n            \n\n\n            \n                \n                    Service used to give all news in the database\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id)\n                \n            \n\n\n            \n                \n                    Defined in src/news/news.service.ts:72\n                \n            \n\n\n            \n                \n                    Service used to give one news\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findBySport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findBySport(sport)\n                \n            \n\n\n            \n                \n                    Defined in src/news/news.service.ts:58\n                \n            \n\n\n            \n                \n                    Service used to give all news for one sport in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sport\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            patch\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    patch(id, body)\n                \n            \n\n\n            \n                \n                    Defined in src/news/news.service.ts:101\n                \n            \n\n\n            \n                \n                    Service used to patch a specific news\nYou need to be connected in admin to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        news id\n\n                                    \n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { News} from '../schemas/news.schema';\nimport { HttpException, HttpStatus } from '@nestjs/common'\nimport { CreateNewsDto } from '../dto/create-news.dto';\nimport { User } from '../schemas/user.schema';\n\n/**\n * Service used to manage all action available in NewsService\n */\n@Injectable()\nexport class NewsService {\n\n /**\n   * Constructor for NewsService\n   */\n  constructor(@InjectModel(News.name) private newsModel: Model,\n  @InjectModel(User.name) private userModel: Model,\n  ) {\n  }\n  /**\n   * Service used to create a news\n   * You need to be connected in admin to access to this route\n   * @param {User} userId\n   * @param {CreateNewsDto} createNewsDto\n   * @return {News}\n   */\n  async create(user: User, createNewsDto: CreateNewsDto): Promise {\n    const createdNews = await new this.newsModel({\n      title: createNewsDto.title,\n      content: createNewsDto.content,\n      sport: createNewsDto.sport,\n      author: user.id,\n      createdAt: Date.now(),\n    })\n    return createdNews.save();\n  }\n\n  /**\n   * Service used to give all news in the database\n   * @return {News[]}\n   */\n  async findAll(): Promise {\n    let news = await this.newsModel.find();\n    for (let i = 0; i  {\n    let news = await this.newsModel.find({ 'sport': sport});\n    for (let i = 0; i  {\n    return this.newsModel.findById(id);\n  }\n\n\n   /**\n   * Service used to delete a specific pronostic\n   * You need to be connected to access to this route\n   * @param {string} id pronostic id\n   * @returns  {JSON}\n   */\n  async deleteOne(id): Promise {\n    const result = await this.newsModel.findByIdAndDelete(id);\n    if (!result) {\n      throw new HttpException({\n        message: 'No news deleted',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    else return {\n      message: \"News Deleted !\",\n    }\n  }\n\n  /**\n   * Service used to patch a specific news\n   * You need to be connected in admin to access to this route\n   * @param {string} id news id\n   * @returns  {JSON}\n   */\n  async patch(id, body): Promise {\n    const news = await this.newsModel.findById(id);\n    let newsUpdated = news;\n    let updated = true;\n    \n    if (body.hasOwnProperty(\"title\")){\n      newsUpdated = await this.newsModel.findByIdAndUpdate( id,{\"title\": body.title},{new:true,useFindAndModify:false}); \n      updated = true;\n    }\n    if (body.hasOwnProperty(\"content\")){\n      newsUpdated = await this.newsModel.findByIdAndUpdate( id,{\"content\": body.content},{new:true,useFindAndModify:false});\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"sport\")){\n      newsUpdated = await this.newsModel.findByIdAndUpdate( id,{\"sport\": body.sport},{new:true,useFindAndModify:false}); \n      updated = true;\n    } \n    if(updated){\n      newsUpdated = await this.newsModel.findByIdAndUpdate( id,{\"modifiedAt\": Date.now()},{new:true,useFindAndModify:false}); \n      return newsUpdated;\n    }\n    else{\n      throw new HttpException({\n        message: 'Nothing Updated',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Pronostic.html":{"url":"classes/Pronostic.html","title":"class - Pronostic","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Pronostic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/pronostic.schema.ts\n        \n\n            \n                Description\n            \n            \n                This collection collects all pronotics and the commentary associated\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorName\n                            \n                            \n                                commentary\n                            \n                            \n                                createdAt\n                            \n                            \n                                isReported\n                            \n                            \n                                matchId\n                            \n                            \n                                type\n                            \n                            \n                                userId\n                            \n                            \n                                winnerId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            authorName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:51\n                            \n                        \n\n                \n                    \n                        name of the author\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            commentary\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:39\n                            \n                        \n\n                \n                    \n                        commentary optional given when a pronostic is send\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdAt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:57\n                            \n                        \n\n                \n                    \n                        date of creation of the commentary\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isReported\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:45\n                            \n                        \n\n                \n                    \n                        boolean true if the commentary is signaled\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            matchId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:21\n                            \n                        \n\n                \n                    \n                        id match given in the API used\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:27\n                            \n                        \n\n                \n                    \n                        name of the sport\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:15\n                            \n                        \n\n                \n                    \n                        id user given in Model\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            winnerId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/pronostic.schema.ts:33\n                            \n                        \n\n                \n                    \n                        name of the winner\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\nimport { User } from '../schemas/user.schema';\n\n\n/**\n * This collection collects all pronotics and the commentary associated\n */\n@Schema()\nexport class Pronostic extends Document {\n  /**\n   * id user given in Model\n   */\n  @Prop()\n  userId: string;\n\n  /**\n   * id match given in the API used\n   */\n  @Prop()\n  matchId: string;\n\n  /**\n   * name of the sport\n   */\n  @Prop()\n  type: string;\n\n  /**\n   * name of the winner\n   */\n  @Prop()\n  winnerId: string;\n\n  /**\n   * commentary optional given when a pronostic is send\n   */\n  @Prop()\n  commentary: string;\n\n  /**\n   * boolean true if the commentary is signaled\n   */\n  @Prop()\n  isReported: boolean;\n\n  /**\n   * name of the author\n   */\n  @Prop()\n  authorName: User;\n\n  /**\n   * date of creation of the commentary\n   */\n  @Prop()\n  createdAt: string;\n\n}\n\n/**\n * SchemaFactory for the class \n */\nexport const PronosticSchema = SchemaFactory.createForClass(Pronostic);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PronosticsController.html":{"url":"controllers/PronosticsController.html","title":"controller - PronosticsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PronosticsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyPronostics/pronostics.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                pronostics\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'pronostics'\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                reportCommentary\n                            \n                            \n                                    Async\n                                resetCommentary\n                            \n                            \n                                    Async\n                                validateCommentary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(req, createPronosticDto: CreatePronosticDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:40\n                \n            \n\n\n            \n                \n                    Controller check if the matchId userId doesn't matchs in the pronostics:\n\nif match : update the matchId userId\nif not : create a new pronostic\nYou need to be connected to access to this route\n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPronosticDto\n                                    \n                                                CreatePronosticDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:86\n                \n            \n\n\n            \n                \n                    Controller delete a specific pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:64\n                \n            \n\n\n            \n                \n                    Controller give all pronostics in the database\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(matchId: string, apiName: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':apiName/:matchId')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:154\n                \n            \n\n\n            \n                \n                    Controller give all pronostics for one match id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    matchId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    apiName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reportCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportCommentary(pronosticId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':pronosticId/report')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:142\n                \n            \n\n\n            \n                \n                    Controller used to report a specific commentary\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    pronosticId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetCommentary(req, pronosticId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':pronosticId/reset')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:104\n                \n            \n\n\n            \n                \n                    Controller used to reset the field commentary for a specific pronostic\nYou need to be connected to access to this route and to be isAdmin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pronosticId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCommentary(req, pronosticId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':pronosticId/validate')\n                \n            \n\n            \n                \n                    Defined in src/MyPronostics/pronostics.controller.ts:123\n                \n            \n\n\n            \n                \n                    Controller used to validate a commentary\nYou need to be connected to access to this route and to be isAdmin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pronosticId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, Param, Delete, UseGuards, Request } from '@nestjs/common';\nimport { PronosticsService } from './pronostics.service';\nimport { CreatePronosticDto } from '../dto/create-pronostic.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\n\nimport { UsersService } from '../users/users.service';\n\nimport { Pronostic } from '../schemas/pronostic.schema';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n/**\n * Controller used for the route 'pronostics'\n */\n@Controller('pronostics')\nexport class PronosticsController {\n  /**\n   * Constructor for Pronostics controller\n   * @param pronosticsService\n   * @param usersService\n   * @param {Model} pronosticModel\n   */\n  constructor(private readonly pronosticsService: PronosticsService,\n    private readonly usersService: UsersService,\n    @InjectModel(Pronostic.name) private pronosticModel: Model) { }\n\n\n  /**\n * Controller check if the matchId userId doesn't matchs in the pronostics:\n * - if match : update the matchId userId\n * - if not : create a new pronostic\n * You need to be connected to access to this route\n * @param {Request}\n * @param {Body} createPronosticDto\n * @return {Pronostic}\n */\n  @UseGuards(JwtAuthGuard)\n  @Post()\n  async create(@Request() req, @Body() createPronosticDto: CreatePronosticDto) {\n    const user = req.user.id\n    if (createPronosticDto.matchId && createPronosticDto.winnerId && createPronosticDto.type) {\n      const matchesUserIdMatchId = await this.pronosticModel.find({ userId: user, matchId: createPronosticDto.matchId, type: createPronosticDto.type });\n      if (matchesUserIdMatchId.length != 0) {\n        return await this.pronosticsService.updateOne(user, createPronosticDto);\n      } else {\n        return await this.pronosticsService.create(user, createPronosticDto);\n      }\n    } else {\n      throw new HttpException({\n        error: 404,\n        message: \"matchId, winnerId and type are mandatory. Only commentary is optional\"\n      }, HttpStatus.BAD_REQUEST)\n    }\n  }\n\n  /**\n   * Controller give all pronostics in the database\n   * You need to be connected to access to this route\n   * @return {Pronotic[]}\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(@Request() req): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n      return this.pronosticsService.findAll();\n    }\n  }\n\n\n\n  /**\n   * Controller delete a specific pronostic\n   * You need to be connected to access to this route\n   * @param {string} pronostic id\n   * @return  {}\n  */\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async delete(@Param('id') id: string): Promise {\n    if (id) {\n      return this.pronosticsService.deleteOne(id);\n\n    }\n    throw new HttpException({\n      error: 404,\n      message: \"id is mandatory\"\n    }, HttpStatus.BAD_REQUEST)\n  }\n\n  /**\n * Controller used to reset the field commentary for a specific pronostic\n * You need to be connected to access to this route and to be isAdmin\n * @return {Pronotic}\n */\n  @UseGuards(JwtAuthGuard)\n  @Get(':pronosticId/reset')\n  async resetCommentary(@Request() req, @Param('pronosticId') pronosticId: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n      return this.pronosticsService.resetCommentary(pronosticId);\n    }\n  }\n\n   /**\n * Controller used to validate a commentary\n * You need to be connected to access to this route and to be isAdmin\n * @return {Pronotic}\n */\n@UseGuards(JwtAuthGuard)\n@Get(':pronosticId/validate')\nasync validateCommentary(@Request() req, @Param('pronosticId') pronosticId: string): Promise {\n  const isAdmin = await this.usersService.isAdmin(req.user.id);\n  if (!isAdmin) {\n    throw new HttpException({\n      message: 'Unauthorized Access',\n    }, HttpStatus.UNAUTHORIZED);\n  }\n  else {\n    return this.pronosticsService.validateCommentary(pronosticId);\n  }\n}\n\n   /**\n * Controller used to report a specific commentary\n * You need to be connected to access to this route\n * @return {Pronotic}\n */\n@UseGuards(JwtAuthGuard)\n@Get(':pronosticId/report')\nasync reportCommentary( @Param('pronosticId') pronosticId: string): Promise {\n  return this.pronosticsService.reportCommentary(pronosticId);\n\n}\n\n\n/**\n  * Controller give all pronostics for one match id\n  * @param {string} matchId\n  * @return {Pronostic[]}\n  */\n @Get(':apiName/:matchId')\n async findOne(@Param('matchId') matchId: string, @Param('apiName') apiName: string): Promise {\n   return this.pronosticsService.findPronosticForOneMatchId(apiName,matchId);\n }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PronosticsModule.html":{"url":"modules/PronosticsModule.html","title":"module - PronosticsModule","body":"\n                   \n\n\n\n\n    Modules\n    PronosticsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PronosticsModule\n\n\n\ncluster_PronosticsModule_exports\n\n\n\ncluster_PronosticsModule_providers\n\n\n\ncluster_PronosticsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPronosticsModule\n\nPronosticsModule\n\nPronosticsModule -->\n\nUsersModule->PronosticsModule\n\n\n\n\n\nPronosticsService \n\nPronosticsService \n\nPronosticsService  -->\n\nPronosticsModule->PronosticsService \n\n\n\n\n\nPronosticsService\n\nPronosticsService\n\nPronosticsModule -->\n\nPronosticsService->PronosticsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/MyPronostics/pronostics.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PronosticsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PronosticsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PronosticsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { PronosticsController } from './pronostics.controller';\nimport { PronosticsService } from './pronostics.service';;\nimport { Pronostic, PronosticSchema } from '../schemas/pronostic.schema';\nimport { User, UserSchema } from '../schemas/user.schema';\n\n\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Pronostic.name, schema: PronosticSchema }]),\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    UsersModule,\n  ],\n  controllers: [PronosticsController],\n  providers: [PronosticsService],\n  exports: [PronosticsService],\n})\nexport class PronosticsModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PronosticsService.html":{"url":"injectables/PronosticsService.html","title":"injectable - PronosticsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PronosticsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MyPronostics/pronostics.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used to manage all action available in PronosticsService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteOne\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findPronosticForOneMatchId\n                            \n                            \n                                    Async\n                                reportCommentary\n                            \n                            \n                                    Async\n                                resetCommentary\n                            \n                            \n                                    Async\n                                updateOne\n                            \n                            \n                                    Async\n                                validateCommentary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(pronosticModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/MyPronostics/pronostics.service.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor for PronosticsService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        pronosticModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userId: string, createPronosticDto: CreatePronosticDto)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:31\n                \n            \n\n\n            \n                \n                    Service used to create a pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createPronosticDto\n                                    \n                                                CreatePronosticDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteOne(id)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:74\n                \n            \n\n\n            \n                \n                    Service used to delete a specific pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        pronostic id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:49\n                \n            \n\n\n            \n                \n                    Service used to give all pronostics in the database\nYou need to be connected to access to this route\n\n\n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findPronosticForOneMatchId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findPronosticForOneMatchId(apiName: string, matchId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:59\n                \n            \n\n\n            \n                \n                    Service used to give all pronostics for a specific match\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    apiName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    matchId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            reportCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    reportCommentary(pronosticId)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:135\n                \n            \n\n\n            \n                \n                    Service used to report a commentary\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pronosticId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the pronostic\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            resetCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    resetCommentary(pronosticId)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:106\n                \n            \n\n\n            \n                \n                    Service used to reset the field commentary for a specific pronostic\nYou need to be connected to access to this route and to be isAdmin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pronosticId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the pronostic\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateOne(userId, createPronosticDto)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:92\n                \n            \n\n\n            \n                \n                    Service used to update a specific pronostic\nYou need to be connected to access to this route\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the user\n\n                                    \n                                \n                                \n                                    createPronosticDto\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateCommentary\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateCommentary(pronosticId)\n                \n            \n\n\n            \n                \n                    Defined in src/MyPronostics/pronostics.service.ts:121\n                \n            \n\n\n            \n                \n                    Service used to validate a commentary\nYou need to be connected to access to this route and to be isAdmin\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    pronosticId\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the pronostic\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Pronostic } from '../schemas/pronostic.schema';\nimport { HttpException, HttpStatus } from '@nestjs/common'\n\nimport { CreatePronosticDto } from '../dto/create-pronostic.dto';\nimport { User } from '../schemas/user.schema';\n\n\n/**\n * Service used to manage all action available in PronosticsService\n */\n@Injectable()\nexport class PronosticsService {\n  /**\n   * Constructor for PronosticsService\n   */\n  constructor(@InjectModel(Pronostic.name) private pronosticModel: Model,\n  @InjectModel(User.name) private userModel: Model,\n  ) {\n  }\n\n  /**\n   * Service used to create a pronostic\n   * You need to be connected to access to this route\n   * @param {string} userId\n   * @param {CreatePronosticDto} createPronosticDto\n   * @return {Pronostic}\n   */\n  async create(userId: string, createPronosticDto: CreatePronosticDto): Promise {\n    const createdPronostic = await new this.pronosticModel({\n      userId: userId,\n      matchId: createPronosticDto.matchId,\n      type: createPronosticDto.type,\n      winnerId: createPronosticDto.winnerId,\n      commentary: (createPronosticDto.commentary ? createPronosticDto.commentary : \"\"),\n      isReported: false,\n      createdAt:createPronosticDto.createdAt\n    })\n    return createdPronostic.save();\n  }\n\n  /**\n   * Service used to give all pronostics in the database\n   * You need to be connected to access to this route\n   * @return {Pronotic[]}\n   */\n  async findAll(): Promise {\n    return this.pronosticModel.find({isReported:true});\n  }\n\n  /**\n   * Service used to give all pronostics for a specific match\n   * You need to be connected to access to this route\n   * @param {string} matchId\n   * @returns {Pronostic[]}\n   */\n  async findPronosticForOneMatchId(apiName:string, matchId: string): Promise {\n    let pronostics = await this.pronosticModel.find({ 'matchId': matchId, 'type':apiName});\n    for (let i = 0; i  {\n    const result = await this.pronosticModel.findByIdAndDelete(id);\n    if (!result) {\n      throw new HttpException({\n        message: 'No pronostic deleted',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    else return {\n      message: \"Pronostic Deleted !\",\n    }\n  }\n\n  /**\n   * Service used to update a specific pronostic\n   * You need to be connected to access to this route\n   * @param {String} userId id of the user\n   * @return  {Pronostic}\n   */\n  async updateOne(userId, createPronosticDto): Promise {\n    const newPronostic = await this.pronosticModel.findOne({ userId: userId, matchId: createPronosticDto.matchId, type: createPronosticDto.type });\n    newPronostic.winnerId = createPronosticDto.winnerId\n    newPronostic.commentary = (createPronosticDto.commentary ? createPronosticDto.commentary : \"\")\n    newPronostic.isReported = false\n    return newPronostic.save();\n  }\n\n  /**\n  * Service used to reset the field commentary for a specific pronostic\n  * You need to be connected to access to this route and to be isAdmin\n  * @param {String} pronosticId id of the pronostic\n  * @return  {Pronostic}\n  */\n  async resetCommentary(pronosticId) {\n    const newPronostic = await this.pronosticModel.findById(pronosticId);\n    newPronostic.commentary = \"\"\n    newPronostic.isReported = false\n    return newPronostic.save();\n\n  }\n\n\n  /**\n  * Service used to validate a commentary\n  * You need to be connected to access to this route and to be isAdmin\n  * @param {String} pronosticId id of the pronostic\n  * @return  {Pronostic}\n  */\n  async validateCommentary(pronosticId) {\n    const newPronostic = await this.pronosticModel.findById(pronosticId);\n    newPronostic.isReported = false\n    return newPronostic.save();\n\n  }\n\n\n  /**\n  * Service used to report a commentary\n  * You need to be connected to access to this route\n  * @param {String} pronosticId id of the pronostic\n  * @return  {Pronostic}\n  */\n  async reportCommentary(pronosticId) {\n    const newPronostic = await this.pronosticModel.findById(pronosticId);\n    newPronostic.isReported = true\n    return newPronostic.save();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Sport.html":{"url":"classes/Sport.html","title":"class - Sport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Sport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/sport.schema.ts\n        \n\n            \n                Description\n            \n            \n                Schema used to collect all sports available in the application\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/sport.schema.ts:14\n                            \n                        \n\n                \n                    \n                        name of the sport. \n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * Schema used to collect all sports available in the application\n */\n@Schema()\nexport class Sport extends Document {\n\n  /**\n   * name of the sport. \n   */\n  @Prop()\n  name: string;\n\n}\n\n/**\n * SchemaFactory for the class \n */\nexport const SportSchema = SchemaFactory.createForClass(Sport);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SportsController.html":{"url":"controllers/SportsController.html","title":"controller - SportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports/sports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sports\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'sports'\nThis routes are used to add or delete a sport to display\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSport\n                            \n                            \n                                    Async\n                                delSport\n                            \n                            \n                                    Async\n                                getSport\n                            \n                            \n                                    Async\n                                getSports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:47\n                \n            \n\n\n            \n                \n                    Controller used to add a sport in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delSport(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:67\n                \n            \n\n\n            \n                \n                    Controller used to delete a specific sport in the Model\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSport(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:25\n                \n            \n\n\n            \n                \n                    Controller used to have all details for a specific sport\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id given in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSports()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/sports/sports.controller.ts:35\n                \n            \n\n\n            \n                \n                    Controller used to have all sports in the database\n\n\n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Delete,Post,Request, UseGuards,Put, Param } from '@nestjs/common';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { SportsService } from './sports.service';\n\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n/**\n * Controller used for the route 'sports'\n * This routes are used to add or delete a sport to display\n */\n@Controller('sports')\nexport class SportsController {\n    /**\n     * Constructor for SportsController\n     */\n    constructor(private readonly SportsService: SportsService) {}\n\n    /**\n     * Controller used to have all details for a specific sport\n     * @param {string} id The id given in the database\n     * @return {Model}\n     */\n    @UseGuards(JwtAuthGuard)\n    @Get(':id')\n    async getSport(@Param('id') id: string) {\n        const sport = await this.SportsService.getSport(id)\n        return sport;\n    }\n\n    /**\n     * Controller used to have all sports in the database\n     * @return {Model[]}\n     */\n    @Get()\n    async getSports() {\n        const sports = await this.SportsService.getSports()\n        return sports;\n    }\n\n    /**\n     * Controller used to add a sport in the database\n     * @param {Request} req\n     * @return {Model}\n     */\n    @UseGuards(JwtAuthGuard)\n    @Post()\n    async addSport(@Request() req) {\n        let list\n        if (req.body.name){\n            list = await this.SportsService.addSport(req.body.name)\n        }\n        else {\n            throw new HttpException({\n                message: 'Name is Mandatory',\n            }, HttpStatus.BAD_REQUEST);\n        }\n        return list;\n    }\n\n    /**\n     * Controller used to delete a specific sport in the Model\n     * @param {Request} req\n     * @return {}\n     */\n    @UseGuards(JwtAuthGuard)\n    @Delete()\n    async delSport(@Request() req) {\n        if (req.body.id){\n            return await this.SportsService.delSport(req.body.id)\n        } else {\n            throw new HttpException({\n                message: 'Id is Mandatory',\n            }, HttpStatus.BAD_REQUEST);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SportsModule.html":{"url":"modules/SportsModule.html","title":"module - SportsModule","body":"\n                   \n\n\n\n\n    Modules\n    SportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SportsModule\n\n\n\ncluster_SportsModule_providers\n\n\n\n\nSportsService\n\nSportsService\n\n\n\nSportsModule\n\nSportsModule\n\nSportsModule -->\n\nSportsService->SportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sports/sports.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module for Model\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SportsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SportsController } from './sports.controller';\nimport { SportsService } from './sports.service';\nimport { Sport, SportSchema } from '../schemas/sport.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n/**\n * Module for Model\n */\n@Module({\n  imports:[MongooseModule.forFeature([{ name: Sport.name, schema: SportSchema }])],\n  controllers: [SportsController],\n  providers: [SportsService]\n})\nexport class SportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SportsService.html":{"url":"injectables/SportsService.html","title":"injectable - SportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sports/sports.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used for managing the actions available in Model\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSport\n                            \n                            \n                                    Async\n                                delSport\n                            \n                            \n                                    Async\n                                getSport\n                            \n                            \n                                    Async\n                                getSports\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(SportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/sports/sports.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor of SportsService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        SportModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addSport(name)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:51\n                \n            \n\n\n            \n                \n                    Service used to add a sport\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delSport(sportId)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:62\n                \n            \n\n\n            \n                \n                    Service used to delete a specific sport\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sportId\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSport(id)\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:25\n                \n            \n\n\n            \n                \n                    Service used to get a specific sport\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getSports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSports()\n                \n            \n\n\n            \n                \n                    Defined in src/sports/sports.service.ts:40\n                \n            \n\n\n            \n                \n                    Service used to get all sports available in the database\n\n\n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Sport } from '../schemas/sport.schema';\nimport { CreateMySportDto } from '../dto/create-mySport.dto';\nimport { HttpException, HttpStatus , HttpCode} from '@nestjs/common'\n\n\n/**\n * Service used for managing the actions available in Model\n */\n@Injectable()\nexport class SportsService {\n    /**\n     * Constructor of SportsService\n     * @param {Model} SportModel\n     */\n    constructor( @InjectModel(Sport.name) private SportModel: Model){}\n\n    /**\n     * Service used to get a specific sport\n     * @param {string} id\n     * @return {Model}\n     */\n    async getSport(id){\n        try {\n            const sport = await this.SportModel.findById(id).orFail();\n            return sport;\n        } catch (error) {\n            throw new HttpException({\n                message: 'Invalid Sport ID',\n              }, HttpStatus.BAD_REQUEST);\n        }\n    }\n\n    /**\n     * Service used to get all sports available in the database\n     * @return {Model[]}\n     */\n    async getSports(){\n            const sport = await this.SportModel.find({});\n            return sport;\n\n    }\n\n    /**\n     * Service used to add a sport\n     * @param {string} name\n     * @return {Model}\n     */\n    async addSport(name){\n        const newSport = await this.SportModel.create({name: name});\n        newSport.save()\n        return newSport\n    }\n\n    /**\n     * Service used to delete a specific sport\n     * @param {string} id\n     * @return {}\n     */\n    async delSport(sportId){\n        await this.SportModel.findByIdAndDelete(sportId);\n        return {\n            message: \"Deleted ok\"\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/update-user.dto.ts\n        \n\n            \n                Description\n            \n            \n                This Dto is used to update a users.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:28\n                            \n                        \n\n                \n                    \n                        Email of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:16\n                            \n                        \n\n                \n                    \n                        firstname of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(1)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:22\n                            \n                        \n\n                \n                    \n                        Lastname of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Matches(passwordRegex)@ValidateIf(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:41\n                            \n                        \n\n                \n                    \n                        Password of the user using regex only if password !=''\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @MinLength(10)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/dto/update-user.dto.ts:34\n                            \n                        \n\n                \n                    \n                        Phone of the user (min 10)\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, Matches , MinLength, ValidateIf} from 'class-validator';\n\n/**\n * Regex used to check if password is validated.\n */\nconst passwordRegex = new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})');\n\n/**\n * This Dto is used to update a users.\n */\nexport class UpdateUserDto {\n/**\n   * firstname of the user\n   */\n  @MinLength(1)\n  firstName: string;\n\n  /**\n   * Lastname of the user\n   */\n  @MinLength(1)\n  lastName: string;\n\n  /**\n   * Email of the user\n   */\n  @IsEmail()\n  email: string;\n\n  /**\n   * Phone of the user (min 10)\n   */\n  @MinLength(10)\n  phone: string;\n\n  /**\n   * Password of the user using regex only if password !=''\n   */\n  @Matches(passwordRegex)\n  @ValidateIf( p => p.password !== \"\")\n  password: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/user.schema.ts\n        \n\n            \n                Description\n            \n            \n                This collection collects all users\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                isAdmin\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:25\n                            \n                        \n\n                \n                    \n                        Email of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:13\n                            \n                        \n\n                \n                    \n                        firstname of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isAdmin\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:43\n                            \n                        \n\n                \n                    \n                        Status administrator for this user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:19\n                            \n                        \n\n                \n                    \n                        Lastname of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:31\n                            \n                        \n\n                \n                    \n                        Password of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Prop()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/schemas/user.schema.ts:37\n                            \n                        \n\n                \n                    \n                        Phone of the user\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n/**\n * This collection collects all users\n */\n@Schema()\nexport class User extends Document {\n  /**\n   * firstname of the user\n   */\n  @Prop()\n  firstName: string;\n\n  /**\n   * Lastname of the user\n   */\n  @Prop()\n  lastName: string;\n\n  /**\n   * Email of the user\n   */\n  @Prop()\n  email: string;\n\n  /**\n   * Password of the user\n   */\n  @Prop()\n  password: string;\n\n  /**\n   * Phone of the user\n   */\n  @Prop()\n  phone: string;\n\n  /**\n   * Status administrator for this user\n   */\n  @Prop()\n  isAdmin: boolean;\n\n}\n/**\n * SchemaFactory for the class \n */\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n            \n                Description\n            \n            \n                Controller used for the route 'users'\nThis routes are manage the users\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminCreate\n                            \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminCreate(req, createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Post('admin/createUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:115\n                \n            \n\n\n            \n                \n                    Controller used to add a user in the database from admin user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminUpdate(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch('admin/updateUser')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:140\n                \n            \n\n\n            \n                \n                    Controller used to update a specific user in the Model from admin user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:29\n                \n            \n\n\n            \n                \n                    Controller used to add a user in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    delete(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:82\n                \n            \n\n\n            \n                \n                    Controller used to delete a specific user in the Model\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:44\n                \n            \n\n\n            \n                \n                    Controller used to have all users in the database\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(req, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:63\n                \n            \n\n\n            \n                \n                    Controller used to have all details for a specific user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The id given in the database\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(req, body)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Patch()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:102\n                \n            \n\n\n            \n                \n                    Controller used to patch a specific user in the Model\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Put, Post, Param, Delete, Patch, UseGuards, Request } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\n\nimport { User } from '../schemas/user.schema';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\n\n/**\n * Controller used for the route 'users'\n * This routes are manage the users\n */\n@Controller('users')\nexport class UsersController {\n  /**\n     * Constructor for UsersController\n     * @param {UsersService} usersService\n     */\n  constructor(private readonly usersService: UsersService) { }\n\n  /**\n      * Controller used to add a user in the database\n      * @param {CreateUserDto} createUserDto\n      * @return {Model}\n      */\n  @Post()\n  async create(@Body() createUserDto: CreateUserDto) {\n    if (await this.usersService.userExists(createUserDto)) {\n      throw new HttpException({\n        message: 'User already Exist',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    return await this.usersService.create(createUserDto);\n  }\n\n  /**\n     * Controller used to have all users in the database\n     * @return {Model}\n     */\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findAll(@Request() req): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n      return this.usersService.findAll();\n    }\n  }\n\n  /**\n     * Controller used to have all details for a specific user\n     * @param {string} id The id given in the database\n     * @return {Model}\n     */\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async findOne(@Request() req, @Param('id') id: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n      return this.usersService.findUserById(id);\n    }\n  }\n\n  /**\n     * Controller used to delete a specific user in the Model\n     * @param {Request} req\n     * @return {}\n     */\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async delete(@Request() req, @Param('id') id: string): Promise {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n      return this.usersService.deleteUser(id);\n    }\n  }\n\n  /**\n     * Controller used to patch a specific user in the Model\n     * @param {Request} req\n     * @param {} body\n     * @return {Model}\n     */\n  @UseGuards(JwtAuthGuard)\n  @Patch()\n  async update(@Request() req, @Body() body) {\n    const id = req.user.id\n    return this.usersService.update(id, body);\n  }\n\n  /**\n     * Controller used to add a user in the database from admin user\n     * @param {CreateUserDto} createUserDto\n     * @param {Request} req\n     * @return {Model}\n     */\n  @UseGuards(JwtAuthGuard)\n  @Post('admin/createUser')\n  async adminCreate(@Request() req, @Body() createUserDto: CreateUserDto) {\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n      if (await this.usersService.userExists(createUserDto)) {\n        throw new HttpException({\n          message: 'User already Exist',\n        }, HttpStatus.BAD_REQUEST);\n      }\n      return await this.usersService.adminCreate(createUserDto);\n    }\n  }\n\n  /**\n    * Controller used to update a specific user in the Model from admin user\n    * @param {Request} req\n    * @param {} body\n    * @return {Model}\n    */\n  @UseGuards(JwtAuthGuard)\n  @Patch('admin/updateUser')\n  async adminUpdate(@Request() req, @Body() body) {\n    const id = req.user.id\n    const isAdmin = await this.usersService.isAdmin(req.user.id);\n    if (!isAdmin) {\n      throw new HttpException({\n        message: 'Unauthorized Access',\n      }, HttpStatus.UNAUTHORIZED);\n    }\n    else {\n      return this.usersService.adminUpdate(body.id, body);\n    }\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Module for Model\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';;\nimport { User, UserSchema } from '../schemas/user.schema';\nimport { MySport, MySportSchema } from '../schemas/mySport.schema';\nimport { MyFavorite, MyFavoriteSchema } from '../schemas/myFavorite.schema';\n\n\n/**\n * Module for Model\n */\n@Module({\n    imports: [\n      MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n      MongooseModule.forFeature([{ name: MySport.name, schema: MySportSchema }]),\n      MongooseModule.forFeature([{ name: MyFavorite.name, schema: MyFavoriteSchema }])\n\n    ],\n    controllers: [UsersController],\n    providers: [UsersService],\n    exports: [UsersService],\n  })\n  export class UsersModule {}\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n            \n                Description\n            \n            \n                Service used for managing the actions available in Model\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                adminCreate\n                            \n                            \n                                    Async\n                                adminUpdate\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findUserById\n                            \n                            \n                                    Async\n                                isAdmin\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                userExists\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, mySportModel: Model, myFavoriteModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor of UsersService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mySportModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        myFavoriteModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminCreate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminCreate(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:166\n                \n            \n\n\n            \n                \n                    Service used to create un new user  from manageUser\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        object of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            adminUpdate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    adminUpdate(id, body)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:183\n                \n            \n\n\n            \n                \n                    Service used to update a specific user from manageUser\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the user to update\n\n                                    \n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        body used to update the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            create\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n                    Service used to create un new user regsiter\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        object of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:107\n                \n            \n\n\n            \n                \n                    Service used to delete a specific user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the user to delete\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n                    Service used to get all users\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:87\n                \n            \n\n\n            \n                \n                    Service used to get a specific user from email\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Email of the user to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserById(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:97\n                \n            \n\n\n            \n                \n                    Service used to get a specific user from id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the user to find\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            isAdmin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isAdmin(id)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:37\n                \n            \n\n\n            \n                \n                    Service used to check if a user is admin or not\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the user to check\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            update\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    update(id, body)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:125\n                \n            \n\n\n            \n                \n                    Service used to update a specific user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the user to update\n\n                                    \n                                \n                                \n                                    body\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        body used to update the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            userExists\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    userExists(createUserDTO: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n                    Service used to check if a user exists or not\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Model, Mongoose, model } from 'mongoose';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from '../schemas/user.schema';\nimport { MySport } from '../schemas/mySport.schema';\nimport { MyFavorite } from '../schemas/myFavorite.schema';\nimport { HttpException, HttpStatus, HttpCode } from '@nestjs/common'\n\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\n\nimport { isNull, isError } from 'util';\nimport * as bcrypt from 'bcrypt';\n\n/**\n * Service used for managing the actions available in Model\n */\n@Injectable()\nexport class UsersService {\n  /**\n     * Constructor of UsersService\n     * @param {Model} mySportModel\n     * @param {Model} myFavoriteModel\n     * @param {Model} userModel\n     */\n  constructor(@InjectModel(User.name) private userModel: Model,\n    @InjectModel(MySport.name) private mySportModel: Model,\n    @InjectModel(MyFavorite.name) private myFavoriteModel: Model,\n  ) {\n  }\n\n  /**\n     * Service used to check if a user is admin or not\n     * @param {string} id id of the user to check\n     * @return  {boolean}\n     */\n  async isAdmin(id): Promise {\n    const user = await this.userModel.findById(id);\n    if (!user) {\n      return user.isAdmin\n    }\n    return false;\n  }\n\n  /**\n       * Service used to check if a user exists or not\n       * @param {CreateUserDto} createUserDto object of the user\n       * @return  {boolean}\n       */\n  async userExists(createUserDTO: CreateUserDto): Promise {\n    const user = await this.userModel.findOne({ email: createUserDTO.email });\n    if (user) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n     * Service used to create un new user regsiter\n     * @param {CreateUserDto} createUserDto object of the user\n     * @return  {Promise}\n     */\n  async create(createUserDto: CreateUserDto): Promise {\n    const email = createUserDto.email;\n    const firstName = createUserDto.firstName;\n    const lastName = createUserDto.lastName;\n    const phone = createUserDto.phone;\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n    const createdUser = await new this.userModel({ firstName: firstName, lastName: lastName, phone: phone, email: email, password: hashedPassword, isAdmin: false });\n    return createdUser.save();\n  }\n\n\n  /**\n    * Service used to get all users\n    * @return  {Promise}\n    */\n  async findAll(): Promise {\n    return this.userModel.find().exec();\n  }\n\n  /**\n     * Service used to get a specific user from email\n     * @param {string} email Email of the user to find\n     * @return  {Promise}\n     */\n  async findOne(email: string): Promise {\n    const user = await this.userModel.find({ 'email': email }).exec();\n    return user;\n  }\n\n  /**\n     * Service used to get a specific user from id\n     * @param {string} id id of the user to find\n     * @return  {Promise}\n     */\n  async findUserById(id: string): Promise {\n    const user = await this.userModel.findById(id);\n    return user;\n  }\n\n  /**\n     * Service used to delete a specific user\n     * @param {string} id id of the user to delete\n     * @return  {Promise}\n     */\n  async deleteUser(id): Promise {\n    const result = await this.userModel.deleteOne({ '_id': id }).exec();\n    if (result.deletedCount === 0) {\n      throw new HttpException({\n        message: 'No user deleted',\n      }, HttpStatus.BAD_REQUEST);\n    }\n    else return {\n      message: \"User Deleted !\",\n    }\n  }\n\n  /**\n       * Service used to update a specific user\n       * @param {string} id id of the user to update\n       * @param {string} body body used to update the user\n       * @return  {Promise}\n       */\n  async update(id, body): Promise {\n    const user = await this.userModel.findById(id);\n    let userUpdated = user;\n    let updated = true;\n\n    if (body.hasOwnProperty(\"firstName\")) {\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"firstName\": body.firstName }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"lastName\")) {\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"lastName\": body.lastName }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"email\")) {\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"email\": body.email }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"password\")) {\n      const hashedPassword = await bcrypt.hash(body.password, 10);\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"password\": hashedPassword }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"phone\")) {\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"phone\": body.phone }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (updated) {\n      return userUpdated;\n    }\n    else {\n      throw new HttpException({\n        message: 'Nothing Updated',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  /**\n    * Service used to create un new user  from manageUser\n    * @param {CreateUserDto} createUserDto object of the user\n    * @return  {Promise}\n    */\n  async adminCreate(createUserDto: CreateUserDto): Promise {\n    const email = createUserDto.email;\n    const firstName = createUserDto.firstName;\n    const lastName = createUserDto.lastName;\n    const phone = createUserDto.phone;\n    const isAdmin = createUserDto.isAdmin;\n    const hashedPassword = await bcrypt.hash(createUserDto.password, 10);\n    const createdUser = await new this.userModel({ firstName: firstName, lastName: lastName, phone: phone, email: email, password: hashedPassword, isAdmin: isAdmin });\n    return createdUser.save();\n  }\n\n  /**\n     * Service used to update a specific user from manageUser\n     * @param {string} id id of the user to update\n     * @param {string} body body used to update the user\n     * @return  {Promise}\n     */\n  async adminUpdate(id, body): Promise {\n    const user = await this.userModel.findById(id);\n    let userUpdated = user;\n    let updated = false;\n    if (body.hasOwnProperty(\"firstName\")) {\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"firstName\": body.firstName }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"lastName\")) {\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"lastName\": body.lastName }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"email\")) {\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"email\": body.email }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"password\")) {\n      const hashedPassword = await bcrypt.hash(body.password, 10);\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"password\": hashedPassword }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"phone\")) {\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"phone\": body.phone }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (body.hasOwnProperty(\"isAdmin\")) {\n      userUpdated = await this.userModel.findByIdAndUpdate(id, { \"isAdmin\": body.isAdmin }, { new: true, useFindAndModify: false });\n      updated = true;\n    }\n    if (updated) {\n      return userUpdated;\n    }\n    else {\n      throw new HttpException({\n        message: 'Nothing Updated',\n      }, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/MyFavorites/MyFavorites.controller.ts\n            \n            controller\n            MyFavoritesController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/MyFavorites/MyFavorites.service.ts\n            \n            injectable\n            MyFavoritesService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/MyPronostics/pronostics.controller.ts\n            \n            controller\n            PronosticsController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/MyPronostics/pronostics.service.ts\n            \n            injectable\n            PronosticsService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/MySports/MySports.controller.ts\n            \n            controller\n            MySportsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/MySports/MySports.service.ts\n            \n            injectable\n            MySportsService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/constants.ts\n            \n            variable\n            jwtConstants\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/commentaries/commentaries.controller.ts\n            \n            controller\n            CommentariesController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/commentaries/commentaries.service.ts\n            \n            injectable\n            CommentariesService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/dto/create-commentary.dto.ts\n            \n            class\n            CreateCommentaryDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/dto/create-myFavorite.dto.ts\n            \n            class\n            CreateMyFavoriteDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/dto/create-mySport.dto.ts\n            \n            class\n            CreateMySportDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/dto/create-news.dto.ts\n            \n            class\n            CreateNewsDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/dto/create-pronostic.dto.ts\n            \n            class\n            CreatePronosticDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/dto/create-sport.dto.ts\n            \n            class\n            CreateSportDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/dto/create-user.dto.ts\n            \n            variable\n            passwordRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/dto/update-user.dto.ts\n            \n            variable\n            passwordRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/news/news.controller.ts\n            \n            controller\n            NewsController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/news/news.service.ts\n            \n            injectable\n            NewsService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/schemas/commentary.schema.ts\n            \n            class\n            Commentary\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/schemas/commentary.schema.ts\n            \n            variable\n            CommentarySchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/myFavorite.schema.ts\n            \n            class\n            MyFavorite\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/schemas/myFavorite.schema.ts\n            \n            variable\n            MyFavoriteSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/mySport.schema.ts\n            \n            class\n            MySport\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/schemas/mySport.schema.ts\n            \n            variable\n            MySportSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/news.schema.ts\n            \n            class\n            News\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/schemas/news.schema.ts\n            \n            variable\n            NewsSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/pronostic.schema.ts\n            \n            class\n            Pronostic\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/schemas/pronostic.schema.ts\n            \n            variable\n            PronosticSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/sport.schema.ts\n            \n            class\n            Sport\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/schemas/sport.schema.ts\n            \n            variable\n            SportSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            class\n            User\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/sports/sports.controller.ts\n            \n            controller\n            SportsController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/sports/sports.service.ts\n            \n            injectable\n            SportsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (12/12)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/mongoose : ^7.0.2\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @types/bcrypt : ^3.0.0\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.3.1\n        \n            class-validator : ^0.12.2\n        \n            cookie-parser : ^1.4.5\n        \n            dotenv : ^8.2.0\n        \n            fs : 0.0.1-security\n        \n            mongoose : ^5.10.3\n        \n            passport : ^0.4.1\n        \n            passport-google-oauth20 : ^2.0.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Launcher of this application on port 3000\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nFunSport - Back end\nDescription\nThis application is a REST API.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covTeam\nLotfi DoucanefGacem Ben ayadYohannEpitechKevin Bridonneau  \nLicense\n  FunSport is GNU3 licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentariesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MyFavoritesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MySportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        NewsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PronosticsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommentariesModule\n\n\n\ncluster_CommentariesModule_providers\n\n\n\ncluster_MyFavoritesModule\n\n\n\ncluster_MyFavoritesModule_exports\n\n\n\ncluster_MyFavoritesModule_providers\n\n\n\ncluster_MySportsModule\n\n\n\ncluster_MySportsModule_exports\n\n\n\ncluster_MySportsModule_providers\n\n\n\ncluster_NewsModule\n\n\n\ncluster_NewsModule_exports\n\n\n\ncluster_NewsModule_providers\n\n\n\ncluster_PronosticsModule\n\n\n\ncluster_PronosticsModule_exports\n\n\n\ncluster_PronosticsModule_providers\n\n\n\ncluster_SportsModule\n\n\n\ncluster_SportsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommentariesModule\n\nCommentariesModule\n\nAppModule -->\n\nCommentariesModule->AppModule\n\n\n\n\n\nMyFavoritesModule\n\nMyFavoritesModule\n\nAppModule -->\n\nMyFavoritesModule->AppModule\n\n\n\n\n\nMyFavoritesService \n\nMyFavoritesService \n\nMyFavoritesService  -->\n\nMyFavoritesModule->MyFavoritesService \n\n\n\n\n\nMySportsModule\n\nMySportsModule\n\nAppModule -->\n\nMySportsModule->AppModule\n\n\n\n\n\nMySportsService \n\nMySportsService \n\nMySportsService  -->\n\nMySportsModule->MySportsService \n\n\n\n\n\nNewsModule\n\nNewsModule\n\nAppModule -->\n\nNewsModule->AppModule\n\n\n\n\n\nNewsService \n\nNewsService \n\nNewsService  -->\n\nNewsModule->NewsService \n\n\n\n\n\nPronosticsModule\n\nPronosticsModule\n\nAppModule -->\n\nPronosticsModule->AppModule\n\n\n\n\n\nPronosticsService \n\nPronosticsService \n\nPronosticsService  -->\n\nPronosticsModule->PronosticsService \n\n\n\n\n\nSportsModule\n\nSportsModule\n\nAppModule -->\n\nSportsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nCommentariesModule -->\n\nUsersModule->CommentariesModule\n\n\n\nNewsModule -->\n\nUsersModule->NewsModule\n\n\n\nPronosticsModule -->\n\nUsersModule->PronosticsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCommentariesService\n\nCommentariesService\n\nCommentariesModule -->\n\nCommentariesService->CommentariesModule\n\n\n\n\n\nMyFavoritesService\n\nMyFavoritesService\n\nMyFavoritesModule -->\n\nMyFavoritesService->MyFavoritesModule\n\n\n\n\n\nMySportsService\n\nMySportsService\n\nMySportsModule -->\n\nMySportsService->MySportsModule\n\n\n\n\n\nNewsService\n\nNewsService\n\nNewsModule -->\n\nNewsService->NewsModule\n\n\n\n\n\nPronosticsService\n\nPronosticsService\n\nPronosticsModule -->\n\nPronosticsService->PronosticsModule\n\n\n\n\n\nSportsService\n\nSportsService\n\nSportsModule -->\n\nSportsService->SportsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    15 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CommentarySchema   (src/.../commentary.schema.ts)\n                        \n                        \n                            jwtConstants   (src/.../constants.ts)\n                        \n                        \n                            MyFavoriteSchema   (src/.../myFavorite.schema.ts)\n                        \n                        \n                            MySportSchema   (src/.../mySport.schema.ts)\n                        \n                        \n                            NewsSchema   (src/.../news.schema.ts)\n                        \n                        \n                            passwordRegex   (src/.../create-user.dto.ts)\n                        \n                        \n                            passwordRegex   (src/.../update-user.dto.ts)\n                        \n                        \n                            PronosticSchema   (src/.../pronostic.schema.ts)\n                        \n                        \n                            SportSchema   (src/.../sport.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/schemas/commentary.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CommentarySchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Commentary)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n    src/auth/constants.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConstants\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n    secret: 'secretKey',\n  }\n                        \n                    \n\n                \n                    \n                        Secret key used to protect the JWT\n\n                    \n                \n\n            \n        \n\n    src/schemas/myFavorite.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MyFavoriteSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(MyFavorite)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n    src/schemas/mySport.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            MySportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(MySport)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n    src/schemas/news.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            NewsSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(News)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n    src/dto/create-user.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRegex\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})')\n                        \n                    \n\n                \n                    \n                        Regex used to check if password is validated.\n\n                    \n                \n\n            \n        \n\n    src/dto/update-user.dto.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            passwordRegex\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new RegExp('^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})')\n                        \n                    \n\n                \n                    \n                        Regex used to check if password is validated.\n\n                    \n                \n\n            \n        \n\n    src/schemas/pronostic.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PronosticSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Pronostic)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n    src/schemas/sport.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Sport)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n    src/schemas/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n                \n                    \n                        SchemaFactory for the class \n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
